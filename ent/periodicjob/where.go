// Code generated by ent, DO NOT EDIT.

package periodicjob

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hedgehog125/project-reboot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldEQ(FieldType, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldEQ(FieldVersion, v))
}

// LastScheduledNewJob applies equality check predicate on the "lastScheduledNewJob" field. It's identical to LastScheduledNewJobEQ.
func LastScheduledNewJob(v time.Time) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldEQ(FieldLastScheduledNewJob, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldContainsFold(FieldType, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldLTE(FieldVersion, v))
}

// LastScheduledNewJobEQ applies the EQ predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobEQ(v time.Time) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldEQ(FieldLastScheduledNewJob, v))
}

// LastScheduledNewJobNEQ applies the NEQ predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobNEQ(v time.Time) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldNEQ(FieldLastScheduledNewJob, v))
}

// LastScheduledNewJobIn applies the In predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobIn(vs ...time.Time) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldIn(FieldLastScheduledNewJob, vs...))
}

// LastScheduledNewJobNotIn applies the NotIn predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobNotIn(vs ...time.Time) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldNotIn(FieldLastScheduledNewJob, vs...))
}

// LastScheduledNewJobGT applies the GT predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobGT(v time.Time) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldGT(FieldLastScheduledNewJob, v))
}

// LastScheduledNewJobGTE applies the GTE predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobGTE(v time.Time) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldGTE(FieldLastScheduledNewJob, v))
}

// LastScheduledNewJobLT applies the LT predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobLT(v time.Time) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldLT(FieldLastScheduledNewJob, v))
}

// LastScheduledNewJobLTE applies the LTE predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobLTE(v time.Time) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldLTE(FieldLastScheduledNewJob, v))
}

// LastScheduledNewJobIsNil applies the IsNil predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobIsNil() predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldIsNull(FieldLastScheduledNewJob))
}

// LastScheduledNewJobNotNil applies the NotNil predicate on the "lastScheduledNewJob" field.
func LastScheduledNewJobNotNil() predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.FieldNotNull(FieldLastScheduledNewJob))
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.PeriodicJob {
	return predicate.PeriodicJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.Job) predicate.PeriodicJob {
	return predicate.PeriodicJob(func(s *sql.Selector) {
		step := newJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PeriodicJob) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PeriodicJob) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PeriodicJob) predicate.PeriodicJob {
	return predicate.PeriodicJob(sql.NotPredicates(p))
}
