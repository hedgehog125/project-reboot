// Code generated by ent, DO NOT EDIT.

package periodicjob

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the periodicjob type in the database.
	Label = "periodic_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldLastScheduledNewJob holds the string denoting the lastschedulednewjob field in the database.
	FieldLastScheduledNewJob = "last_scheduled_new_job"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// Table holds the table name of the periodicjob in the database.
	Table = "periodic_jobs"
	// JobsTable is the table that holds the jobs relation/edge.
	JobsTable = "jobs"
	// JobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobsInverseTable = "jobs"
	// JobsColumn is the table column denoting the jobs relation/edge.
	JobsColumn = "periodic_job_id"
)

// Columns holds all SQL columns for periodicjob fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldVersion,
	FieldLastScheduledNewJob,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
)

// OrderOption defines the ordering options for the PeriodicJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByLastScheduledNewJob orders the results by the lastScheduledNewJob field.
func ByLastScheduledNewJob(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastScheduledNewJob, opts...).ToFunc()
}

// ByJobsCount orders the results by jobs count.
func ByJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsStep(), opts...)
	}
}

// ByJobs orders the results by jobs terms.
func ByJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
	)
}
