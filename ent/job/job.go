// Code generated by ent, DO NOT EDIT.

package job

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldDue holds the string denoting the due field in the database.
	FieldDue = "due"
	// FieldOriginallyDue holds the string denoting the originallydue field in the database.
	FieldOriginallyDue = "originally_due"
	// FieldStarted holds the string denoting the started field in the database.
	FieldStarted = "started"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRetries holds the string denoting the retries field in the database.
	FieldRetries = "retries"
	// FieldRetriedFraction holds the string denoting the retriedfraction field in the database.
	FieldRetriedFraction = "retried_fraction"
	// FieldLoggedStallWarning holds the string denoting the loggedstallwarning field in the database.
	FieldLoggedStallWarning = "logged_stall_warning"
	// Table holds the table name of the job in the database.
	Table = "jobs"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldCreated,
	FieldDue,
	FieldOriginallyDue,
	FieldStarted,
	FieldType,
	FieldVersion,
	FieldPriority,
	FieldWeight,
	FieldBody,
	FieldStatus,
	FieldRetries,
	FieldRetriedFraction,
	FieldLoggedStallWarning,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated func() time.Time
	// DefaultDue holds the default value on creation for the "due" field.
	DefaultDue func() time.Time
	// DefaultOriginallyDue holds the default value on creation for the "originallyDue" field.
	DefaultOriginallyDue func() time.Time
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultRetries holds the default value on creation for the "retries" field.
	DefaultRetries int
	// DefaultRetriedFraction holds the default value on creation for the "retriedFraction" field.
	DefaultRetriedFraction float64
	// DefaultLoggedStallWarning holds the default value on creation for the "loggedStallWarning" field.
	DefaultLoggedStallWarning bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending Status = "pending"
	StatusRunning Status = "running"
	StatusFailed  Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRunning, StatusFailed:
		return nil
	default:
		return fmt.Errorf("job: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreated orders the results by the created field.
func ByCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreated, opts...).ToFunc()
}

// ByDue orders the results by the due field.
func ByDue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDue, opts...).ToFunc()
}

// ByOriginallyDue orders the results by the originallyDue field.
func ByOriginallyDue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginallyDue, opts...).ToFunc()
}

// ByStarted orders the results by the started field.
func ByStarted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStarted, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRetries orders the results by the retries field.
func ByRetries(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetries, opts...).ToFunc()
}

// ByRetriedFraction orders the results by the retriedFraction field.
func ByRetriedFraction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetriedFraction, opts...).ToFunc()
}

// ByLoggedStallWarning orders the results by the loggedStallWarning field.
func ByLoggedStallWarning(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoggedStallWarning, opts...).ToFunc()
}
