// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreated, v))
}

// Due applies equality check predicate on the "due" field. It's identical to DueEQ.
func Due(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDue, v))
}

// OriginallyDue applies equality check predicate on the "originallyDue" field. It's identical to OriginallyDueEQ.
func OriginallyDue(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldOriginallyDue, v))
}

// Started applies equality check predicate on the "started" field. It's identical to StartedEQ.
func Started(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStarted, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldVersion, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int8) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPriority, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldWeight, v))
}

// Retries applies equality check predicate on the "retries" field. It's identical to RetriesEQ.
func Retries(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRetries, v))
}

// RetriedFraction applies equality check predicate on the "retriedFraction" field. It's identical to RetriedFractionEQ.
func RetriedFraction(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRetriedFraction, v))
}

// LoggedStallWarning applies equality check predicate on the "loggedStallWarning" field. It's identical to LoggedStallWarningEQ.
func LoggedStallWarning(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldLoggedStallWarning, v))
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreated, v))
}

// DueEQ applies the EQ predicate on the "due" field.
func DueEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDue, v))
}

// DueNEQ applies the NEQ predicate on the "due" field.
func DueNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldDue, v))
}

// DueIn applies the In predicate on the "due" field.
func DueIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldDue, vs...))
}

// DueNotIn applies the NotIn predicate on the "due" field.
func DueNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldDue, vs...))
}

// DueGT applies the GT predicate on the "due" field.
func DueGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldDue, v))
}

// DueGTE applies the GTE predicate on the "due" field.
func DueGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldDue, v))
}

// DueLT applies the LT predicate on the "due" field.
func DueLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldDue, v))
}

// DueLTE applies the LTE predicate on the "due" field.
func DueLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldDue, v))
}

// OriginallyDueEQ applies the EQ predicate on the "originallyDue" field.
func OriginallyDueEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldOriginallyDue, v))
}

// OriginallyDueNEQ applies the NEQ predicate on the "originallyDue" field.
func OriginallyDueNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldOriginallyDue, v))
}

// OriginallyDueIn applies the In predicate on the "originallyDue" field.
func OriginallyDueIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldOriginallyDue, vs...))
}

// OriginallyDueNotIn applies the NotIn predicate on the "originallyDue" field.
func OriginallyDueNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldOriginallyDue, vs...))
}

// OriginallyDueGT applies the GT predicate on the "originallyDue" field.
func OriginallyDueGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldOriginallyDue, v))
}

// OriginallyDueGTE applies the GTE predicate on the "originallyDue" field.
func OriginallyDueGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldOriginallyDue, v))
}

// OriginallyDueLT applies the LT predicate on the "originallyDue" field.
func OriginallyDueLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldOriginallyDue, v))
}

// OriginallyDueLTE applies the LTE predicate on the "originallyDue" field.
func OriginallyDueLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldOriginallyDue, v))
}

// StartedEQ applies the EQ predicate on the "started" field.
func StartedEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStarted, v))
}

// StartedNEQ applies the NEQ predicate on the "started" field.
func StartedNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStarted, v))
}

// StartedIn applies the In predicate on the "started" field.
func StartedIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStarted, vs...))
}

// StartedNotIn applies the NotIn predicate on the "started" field.
func StartedNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStarted, vs...))
}

// StartedGT applies the GT predicate on the "started" field.
func StartedGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldStarted, v))
}

// StartedGTE applies the GTE predicate on the "started" field.
func StartedGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldStarted, v))
}

// StartedLT applies the LT predicate on the "started" field.
func StartedLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldStarted, v))
}

// StartedLTE applies the LTE predicate on the "started" field.
func StartedLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldStarted, v))
}

// StartedIsNil applies the IsNil predicate on the "started" field.
func StartedIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldStarted))
}

// StartedNotNil applies the NotNil predicate on the "started" field.
func StartedNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldStarted))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldType, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldVersion, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int8) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int8) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int8) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int8) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int8) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int8) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int8) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int8) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldPriority, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldWeight, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStatus, vs...))
}

// RetriesEQ applies the EQ predicate on the "retries" field.
func RetriesEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRetries, v))
}

// RetriesNEQ applies the NEQ predicate on the "retries" field.
func RetriesNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRetries, v))
}

// RetriesIn applies the In predicate on the "retries" field.
func RetriesIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRetries, vs...))
}

// RetriesNotIn applies the NotIn predicate on the "retries" field.
func RetriesNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRetries, vs...))
}

// RetriesGT applies the GT predicate on the "retries" field.
func RetriesGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRetries, v))
}

// RetriesGTE applies the GTE predicate on the "retries" field.
func RetriesGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRetries, v))
}

// RetriesLT applies the LT predicate on the "retries" field.
func RetriesLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRetries, v))
}

// RetriesLTE applies the LTE predicate on the "retries" field.
func RetriesLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRetries, v))
}

// RetriedFractionEQ applies the EQ predicate on the "retriedFraction" field.
func RetriedFractionEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRetriedFraction, v))
}

// RetriedFractionNEQ applies the NEQ predicate on the "retriedFraction" field.
func RetriedFractionNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRetriedFraction, v))
}

// RetriedFractionIn applies the In predicate on the "retriedFraction" field.
func RetriedFractionIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRetriedFraction, vs...))
}

// RetriedFractionNotIn applies the NotIn predicate on the "retriedFraction" field.
func RetriedFractionNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRetriedFraction, vs...))
}

// RetriedFractionGT applies the GT predicate on the "retriedFraction" field.
func RetriedFractionGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRetriedFraction, v))
}

// RetriedFractionGTE applies the GTE predicate on the "retriedFraction" field.
func RetriedFractionGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRetriedFraction, v))
}

// RetriedFractionLT applies the LT predicate on the "retriedFraction" field.
func RetriedFractionLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRetriedFraction, v))
}

// RetriedFractionLTE applies the LTE predicate on the "retriedFraction" field.
func RetriedFractionLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRetriedFraction, v))
}

// LoggedStallWarningEQ applies the EQ predicate on the "loggedStallWarning" field.
func LoggedStallWarningEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldLoggedStallWarning, v))
}

// LoggedStallWarningNEQ applies the NEQ predicate on the "loggedStallWarning" field.
func LoggedStallWarningNEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldLoggedStallWarning, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
