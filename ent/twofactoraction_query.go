// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hedgehog125/project-reboot/ent/predicate"
	"github.com/hedgehog125/project-reboot/ent/twofactoraction"
)

// TwoFactorActionQuery is the builder for querying TwoFactorAction entities.
type TwoFactorActionQuery struct {
	config
	ctx        *QueryContext
	order      []twofactoraction.OrderOption
	inters     []Interceptor
	predicates []predicate.TwoFactorAction
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TwoFactorActionQuery builder.
func (tfaq *TwoFactorActionQuery) Where(ps ...predicate.TwoFactorAction) *TwoFactorActionQuery {
	tfaq.predicates = append(tfaq.predicates, ps...)
	return tfaq
}

// Limit the number of records to be returned by this query.
func (tfaq *TwoFactorActionQuery) Limit(limit int) *TwoFactorActionQuery {
	tfaq.ctx.Limit = &limit
	return tfaq
}

// Offset to start from.
func (tfaq *TwoFactorActionQuery) Offset(offset int) *TwoFactorActionQuery {
	tfaq.ctx.Offset = &offset
	return tfaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tfaq *TwoFactorActionQuery) Unique(unique bool) *TwoFactorActionQuery {
	tfaq.ctx.Unique = &unique
	return tfaq
}

// Order specifies how the records should be ordered.
func (tfaq *TwoFactorActionQuery) Order(o ...twofactoraction.OrderOption) *TwoFactorActionQuery {
	tfaq.order = append(tfaq.order, o...)
	return tfaq
}

// First returns the first TwoFactorAction entity from the query.
// Returns a *NotFoundError when no TwoFactorAction was found.
func (tfaq *TwoFactorActionQuery) First(ctx context.Context) (*TwoFactorAction, error) {
	nodes, err := tfaq.Limit(1).All(setContextOp(ctx, tfaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{twofactoraction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tfaq *TwoFactorActionQuery) FirstX(ctx context.Context) *TwoFactorAction {
	node, err := tfaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TwoFactorAction ID from the query.
// Returns a *NotFoundError when no TwoFactorAction ID was found.
func (tfaq *TwoFactorActionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tfaq.Limit(1).IDs(setContextOp(ctx, tfaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{twofactoraction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tfaq *TwoFactorActionQuery) FirstIDX(ctx context.Context) int {
	id, err := tfaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TwoFactorAction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TwoFactorAction entity is found.
// Returns a *NotFoundError when no TwoFactorAction entities are found.
func (tfaq *TwoFactorActionQuery) Only(ctx context.Context) (*TwoFactorAction, error) {
	nodes, err := tfaq.Limit(2).All(setContextOp(ctx, tfaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{twofactoraction.Label}
	default:
		return nil, &NotSingularError{twofactoraction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tfaq *TwoFactorActionQuery) OnlyX(ctx context.Context) *TwoFactorAction {
	node, err := tfaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TwoFactorAction ID in the query.
// Returns a *NotSingularError when more than one TwoFactorAction ID is found.
// Returns a *NotFoundError when no entities are found.
func (tfaq *TwoFactorActionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tfaq.Limit(2).IDs(setContextOp(ctx, tfaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{twofactoraction.Label}
	default:
		err = &NotSingularError{twofactoraction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tfaq *TwoFactorActionQuery) OnlyIDX(ctx context.Context) int {
	id, err := tfaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TwoFactorActions.
func (tfaq *TwoFactorActionQuery) All(ctx context.Context) ([]*TwoFactorAction, error) {
	ctx = setContextOp(ctx, tfaq.ctx, ent.OpQueryAll)
	if err := tfaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TwoFactorAction, *TwoFactorActionQuery]()
	return withInterceptors[[]*TwoFactorAction](ctx, tfaq, qr, tfaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tfaq *TwoFactorActionQuery) AllX(ctx context.Context) []*TwoFactorAction {
	nodes, err := tfaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TwoFactorAction IDs.
func (tfaq *TwoFactorActionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tfaq.ctx.Unique == nil && tfaq.path != nil {
		tfaq.Unique(true)
	}
	ctx = setContextOp(ctx, tfaq.ctx, ent.OpQueryIDs)
	if err = tfaq.Select(twofactoraction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tfaq *TwoFactorActionQuery) IDsX(ctx context.Context) []int {
	ids, err := tfaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tfaq *TwoFactorActionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tfaq.ctx, ent.OpQueryCount)
	if err := tfaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tfaq, querierCount[*TwoFactorActionQuery](), tfaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tfaq *TwoFactorActionQuery) CountX(ctx context.Context) int {
	count, err := tfaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tfaq *TwoFactorActionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tfaq.ctx, ent.OpQueryExist)
	switch _, err := tfaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tfaq *TwoFactorActionQuery) ExistX(ctx context.Context) bool {
	exist, err := tfaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TwoFactorActionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tfaq *TwoFactorActionQuery) Clone() *TwoFactorActionQuery {
	if tfaq == nil {
		return nil
	}
	return &TwoFactorActionQuery{
		config:     tfaq.config,
		ctx:        tfaq.ctx.Clone(),
		order:      append([]twofactoraction.OrderOption{}, tfaq.order...),
		inters:     append([]Interceptor{}, tfaq.inters...),
		predicates: append([]predicate.TwoFactorAction{}, tfaq.predicates...),
		// clone intermediate query.
		sql:  tfaq.sql.Clone(),
		path: tfaq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TwoFactorAction.Query().
//		GroupBy(twofactoraction.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tfaq *TwoFactorActionQuery) GroupBy(field string, fields ...string) *TwoFactorActionGroupBy {
	tfaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TwoFactorActionGroupBy{build: tfaq}
	grbuild.flds = &tfaq.ctx.Fields
	grbuild.label = twofactoraction.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//	}
//
//	client.TwoFactorAction.Query().
//		Select(twofactoraction.FieldType).
//		Scan(ctx, &v)
func (tfaq *TwoFactorActionQuery) Select(fields ...string) *TwoFactorActionSelect {
	tfaq.ctx.Fields = append(tfaq.ctx.Fields, fields...)
	sbuild := &TwoFactorActionSelect{TwoFactorActionQuery: tfaq}
	sbuild.label = twofactoraction.Label
	sbuild.flds, sbuild.scan = &tfaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TwoFactorActionSelect configured with the given aggregations.
func (tfaq *TwoFactorActionQuery) Aggregate(fns ...AggregateFunc) *TwoFactorActionSelect {
	return tfaq.Select().Aggregate(fns...)
}

func (tfaq *TwoFactorActionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tfaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tfaq); err != nil {
				return err
			}
		}
	}
	for _, f := range tfaq.ctx.Fields {
		if !twofactoraction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tfaq.path != nil {
		prev, err := tfaq.path(ctx)
		if err != nil {
			return err
		}
		tfaq.sql = prev
	}
	return nil
}

func (tfaq *TwoFactorActionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TwoFactorAction, error) {
	var (
		nodes = []*TwoFactorAction{}
		_spec = tfaq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TwoFactorAction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TwoFactorAction{config: tfaq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tfaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (tfaq *TwoFactorActionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tfaq.querySpec()
	_spec.Node.Columns = tfaq.ctx.Fields
	if len(tfaq.ctx.Fields) > 0 {
		_spec.Unique = tfaq.ctx.Unique != nil && *tfaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tfaq.driver, _spec)
}

func (tfaq *TwoFactorActionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(twofactoraction.Table, twofactoraction.Columns, sqlgraph.NewFieldSpec(twofactoraction.FieldID, field.TypeInt))
	_spec.From = tfaq.sql
	if unique := tfaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tfaq.path != nil {
		_spec.Unique = true
	}
	if fields := tfaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twofactoraction.FieldID)
		for i := range fields {
			if fields[i] != twofactoraction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tfaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tfaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tfaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tfaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tfaq *TwoFactorActionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tfaq.driver.Dialect())
	t1 := builder.Table(twofactoraction.Table)
	columns := tfaq.ctx.Fields
	if len(columns) == 0 {
		columns = twofactoraction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tfaq.sql != nil {
		selector = tfaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tfaq.ctx.Unique != nil && *tfaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tfaq.predicates {
		p(selector)
	}
	for _, p := range tfaq.order {
		p(selector)
	}
	if offset := tfaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tfaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TwoFactorActionGroupBy is the group-by builder for TwoFactorAction entities.
type TwoFactorActionGroupBy struct {
	selector
	build *TwoFactorActionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tfagb *TwoFactorActionGroupBy) Aggregate(fns ...AggregateFunc) *TwoFactorActionGroupBy {
	tfagb.fns = append(tfagb.fns, fns...)
	return tfagb
}

// Scan applies the selector query and scans the result into the given value.
func (tfagb *TwoFactorActionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tfagb.build.ctx, ent.OpQueryGroupBy)
	if err := tfagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TwoFactorActionQuery, *TwoFactorActionGroupBy](ctx, tfagb.build, tfagb, tfagb.build.inters, v)
}

func (tfagb *TwoFactorActionGroupBy) sqlScan(ctx context.Context, root *TwoFactorActionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tfagb.fns))
	for _, fn := range tfagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tfagb.flds)+len(tfagb.fns))
		for _, f := range *tfagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tfagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tfagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TwoFactorActionSelect is the builder for selecting fields of TwoFactorAction entities.
type TwoFactorActionSelect struct {
	*TwoFactorActionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tfas *TwoFactorActionSelect) Aggregate(fns ...AggregateFunc) *TwoFactorActionSelect {
	tfas.fns = append(tfas.fns, fns...)
	return tfas
}

// Scan applies the selector query and scans the result into the given value.
func (tfas *TwoFactorActionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tfas.ctx, ent.OpQuerySelect)
	if err := tfas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TwoFactorActionQuery, *TwoFactorActionSelect](ctx, tfas.TwoFactorActionQuery, tfas, tfas.inters, v)
}

func (tfas *TwoFactorActionSelect) sqlScan(ctx context.Context, root *TwoFactorActionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tfas.fns))
	for _, fn := range tfas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tfas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tfas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
