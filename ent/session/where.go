// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hedgehog125/project-reboot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldTime, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v []byte) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCode, v))
}

// CodeValidFrom applies equality check predicate on the "codeValidFrom" field. It's identical to CodeValidFromEQ.
func CodeValidFrom(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCodeValidFrom, v))
}

// UserAgent applies equality check predicate on the "userAgent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUserAgent, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIP, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldTime, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v []byte) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v []byte) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...[]byte) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...[]byte) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v []byte) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v []byte) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v []byte) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v []byte) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldCode, v))
}

// CodeValidFromEQ applies the EQ predicate on the "codeValidFrom" field.
func CodeValidFromEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCodeValidFrom, v))
}

// CodeValidFromNEQ applies the NEQ predicate on the "codeValidFrom" field.
func CodeValidFromNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldCodeValidFrom, v))
}

// CodeValidFromIn applies the In predicate on the "codeValidFrom" field.
func CodeValidFromIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldCodeValidFrom, vs...))
}

// CodeValidFromNotIn applies the NotIn predicate on the "codeValidFrom" field.
func CodeValidFromNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldCodeValidFrom, vs...))
}

// CodeValidFromGT applies the GT predicate on the "codeValidFrom" field.
func CodeValidFromGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldCodeValidFrom, v))
}

// CodeValidFromGTE applies the GTE predicate on the "codeValidFrom" field.
func CodeValidFromGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldCodeValidFrom, v))
}

// CodeValidFromLT applies the LT predicate on the "codeValidFrom" field.
func CodeValidFromLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldCodeValidFrom, v))
}

// CodeValidFromLTE applies the LTE predicate on the "codeValidFrom" field.
func CodeValidFromLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldCodeValidFrom, v))
}

// UserAgentEQ applies the EQ predicate on the "userAgent" field.
func UserAgentEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "userAgent" field.
func UserAgentNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "userAgent" field.
func UserAgentIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "userAgent" field.
func UserAgentNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "userAgent" field.
func UserAgentGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "userAgent" field.
func UserAgentGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "userAgent" field.
func UserAgentLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "userAgent" field.
func UserAgentLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "userAgent" field.
func UserAgentContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "userAgent" field.
func UserAgentHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "userAgent" field.
func UserAgentHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentEqualFold applies the EqualFold predicate on the "userAgent" field.
func UserAgentEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "userAgent" field.
func UserAgentContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldUserAgent, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldIP, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
