// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/logentry"
	"github.com/hedgehog125/project-reboot/ent/predicate"
	"github.com/hedgehog125/project-reboot/ent/session"
	"github.com/hedgehog125/project-reboot/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdate) SetUsername(v string) *UserUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUsername(v *string) *UserUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetAlertDiscordId sets the "alertDiscordId" field.
func (_u *UserUpdate) SetAlertDiscordId(v string) *UserUpdate {
	_u.mutation.SetAlertDiscordId(v)
	return _u
}

// SetNillableAlertDiscordId sets the "alertDiscordId" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAlertDiscordId(v *string) *UserUpdate {
	if v != nil {
		_u.SetAlertDiscordId(*v)
	}
	return _u
}

// SetAlertEmail sets the "alertEmail" field.
func (_u *UserUpdate) SetAlertEmail(v string) *UserUpdate {
	_u.mutation.SetAlertEmail(v)
	return _u
}

// SetNillableAlertEmail sets the "alertEmail" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAlertEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetAlertEmail(*v)
	}
	return _u
}

// SetLocked sets the "locked" field.
func (_u *UserUpdate) SetLocked(v bool) *UserUpdate {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLocked(v *bool) *UserUpdate {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetLockedUntil sets the "lockedUntil" field.
func (_u *UserUpdate) SetLockedUntil(v time.Time) *UserUpdate {
	_u.mutation.SetLockedUntil(v)
	return _u
}

// SetNillableLockedUntil sets the "lockedUntil" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLockedUntil(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLockedUntil(*v)
	}
	return _u
}

// ClearLockedUntil clears the value of the "lockedUntil" field.
func (_u *UserUpdate) ClearLockedUntil() *UserUpdate {
	_u.mutation.ClearLockedUntil()
	return _u
}

// SetContent sets the "content" field.
func (_u *UserUpdate) SetContent(v []byte) *UserUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetFileName sets the "fileName" field.
func (_u *UserUpdate) SetFileName(v string) *UserUpdate {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "fileName" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFileName(v *string) *UserUpdate {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// SetMime sets the "mime" field.
func (_u *UserUpdate) SetMime(v string) *UserUpdate {
	_u.mutation.SetMime(v)
	return _u
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMime(v *string) *UserUpdate {
	if v != nil {
		_u.SetMime(*v)
	}
	return _u
}

// SetNonce sets the "nonce" field.
func (_u *UserUpdate) SetNonce(v []byte) *UserUpdate {
	_u.mutation.SetNonce(v)
	return _u
}

// SetKeySalt sets the "keySalt" field.
func (_u *UserUpdate) SetKeySalt(v []byte) *UserUpdate {
	_u.mutation.SetKeySalt(v)
	return _u
}

// SetHashTime sets the "hashTime" field.
func (_u *UserUpdate) SetHashTime(v uint32) *UserUpdate {
	_u.mutation.ResetHashTime()
	_u.mutation.SetHashTime(v)
	return _u
}

// SetNillableHashTime sets the "hashTime" field if the given value is not nil.
func (_u *UserUpdate) SetNillableHashTime(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetHashTime(*v)
	}
	return _u
}

// AddHashTime adds value to the "hashTime" field.
func (_u *UserUpdate) AddHashTime(v int32) *UserUpdate {
	_u.mutation.AddHashTime(v)
	return _u
}

// SetHashMemory sets the "hashMemory" field.
func (_u *UserUpdate) SetHashMemory(v uint32) *UserUpdate {
	_u.mutation.ResetHashMemory()
	_u.mutation.SetHashMemory(v)
	return _u
}

// SetNillableHashMemory sets the "hashMemory" field if the given value is not nil.
func (_u *UserUpdate) SetNillableHashMemory(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetHashMemory(*v)
	}
	return _u
}

// AddHashMemory adds value to the "hashMemory" field.
func (_u *UserUpdate) AddHashMemory(v int32) *UserUpdate {
	_u.mutation.AddHashMemory(v)
	return _u
}

// SetHashThreads sets the "hashThreads" field.
func (_u *UserUpdate) SetHashThreads(v uint8) *UserUpdate {
	_u.mutation.ResetHashThreads()
	_u.mutation.SetHashThreads(v)
	return _u
}

// SetNillableHashThreads sets the "hashThreads" field if the given value is not nil.
func (_u *UserUpdate) SetNillableHashThreads(v *uint8) *UserUpdate {
	if v != nil {
		_u.SetHashThreads(*v)
	}
	return _u
}

// AddHashThreads adds value to the "hashThreads" field.
func (_u *UserUpdate) AddHashThreads(v int8) *UserUpdate {
	_u.mutation.AddHashThreads(v)
	return _u
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (_u *UserUpdate) AddSessionIDs(ids ...int) *UserUpdate {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the Session entity.
func (_u *UserUpdate) AddSessions(v ...*Session) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the LogEntry entity by IDs.
func (_u *UserUpdate) AddLogIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddLogIDs(ids...)
	return _u
}

// AddLogs adds the "logs" edges to the LogEntry entity.
func (_u *UserUpdate) AddLogs(v ...*LogEntry) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLogIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (_u *UserUpdate) ClearSessions() *UserUpdate {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (_u *UserUpdate) RemoveSessionIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (_u *UserUpdate) RemoveSessions(v ...*Session) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// ClearLogs clears all "logs" edges to the LogEntry entity.
func (_u *UserUpdate) ClearLogs() *UserUpdate {
	_u.mutation.ClearLogs()
	return _u
}

// RemoveLogIDs removes the "logs" edge to LogEntry entities by IDs.
func (_u *UserUpdate) RemoveLogIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveLogIDs(ids...)
	return _u
}

// RemoveLogs removes "logs" edges to LogEntry entities.
func (_u *UserUpdate) RemoveLogs(v ...*LogEntry) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Content(); ok {
		if err := user.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "User.content": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FileName(); ok {
		if err := user.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "fileName", err: fmt.Errorf(`ent: validator failed for field "User.fileName": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Mime(); ok {
		if err := user.MimeValidator(v); err != nil {
			return &ValidationError{Name: "mime", err: fmt.Errorf(`ent: validator failed for field "User.mime": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Nonce(); ok {
		if err := user.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`ent: validator failed for field "User.nonce": %w`, err)}
		}
	}
	if v, ok := _u.mutation.KeySalt(); ok {
		if err := user.KeySaltValidator(v); err != nil {
			return &ValidationError{Name: "keySalt", err: fmt.Errorf(`ent: validator failed for field "User.keySalt": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.AlertDiscordId(); ok {
		_spec.SetField(user.FieldAlertDiscordId, field.TypeString, value)
	}
	if value, ok := _u.mutation.AlertEmail(); ok {
		_spec.SetField(user.FieldAlertEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(user.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LockedUntil(); ok {
		_spec.SetField(user.FieldLockedUntil, field.TypeTime, value)
	}
	if _u.mutation.LockedUntilCleared() {
		_spec.ClearField(user.FieldLockedUntil, field.TypeTime)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(user.FieldContent, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(user.FieldFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Mime(); ok {
		_spec.SetField(user.FieldMime, field.TypeString, value)
	}
	if value, ok := _u.mutation.Nonce(); ok {
		_spec.SetField(user.FieldNonce, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.KeySalt(); ok {
		_spec.SetField(user.FieldKeySalt, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.HashTime(); ok {
		_spec.SetField(user.FieldHashTime, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedHashTime(); ok {
		_spec.AddField(user.FieldHashTime, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.HashMemory(); ok {
		_spec.SetField(user.FieldHashMemory, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedHashMemory(); ok {
		_spec.AddField(user.FieldHashMemory, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.HashThreads(); ok {
		_spec.SetField(user.FieldHashThreads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedHashThreads(); ok {
		_spec.AddField(user.FieldHashThreads, field.TypeUint8, value)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LogsTable,
			Columns: []string{user.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLogsIDs(); len(nodes) > 0 && !_u.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LogsTable,
			Columns: []string{user.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LogsTable,
			Columns: []string{user.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (_u *UserUpdateOne) SetUsername(v string) *UserUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUsername(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetAlertDiscordId sets the "alertDiscordId" field.
func (_u *UserUpdateOne) SetAlertDiscordId(v string) *UserUpdateOne {
	_u.mutation.SetAlertDiscordId(v)
	return _u
}

// SetNillableAlertDiscordId sets the "alertDiscordId" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAlertDiscordId(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAlertDiscordId(*v)
	}
	return _u
}

// SetAlertEmail sets the "alertEmail" field.
func (_u *UserUpdateOne) SetAlertEmail(v string) *UserUpdateOne {
	_u.mutation.SetAlertEmail(v)
	return _u
}

// SetNillableAlertEmail sets the "alertEmail" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAlertEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAlertEmail(*v)
	}
	return _u
}

// SetLocked sets the "locked" field.
func (_u *UserUpdateOne) SetLocked(v bool) *UserUpdateOne {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLocked(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetLockedUntil sets the "lockedUntil" field.
func (_u *UserUpdateOne) SetLockedUntil(v time.Time) *UserUpdateOne {
	_u.mutation.SetLockedUntil(v)
	return _u
}

// SetNillableLockedUntil sets the "lockedUntil" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLockedUntil(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLockedUntil(*v)
	}
	return _u
}

// ClearLockedUntil clears the value of the "lockedUntil" field.
func (_u *UserUpdateOne) ClearLockedUntil() *UserUpdateOne {
	_u.mutation.ClearLockedUntil()
	return _u
}

// SetContent sets the "content" field.
func (_u *UserUpdateOne) SetContent(v []byte) *UserUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetFileName sets the "fileName" field.
func (_u *UserUpdateOne) SetFileName(v string) *UserUpdateOne {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "fileName" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFileName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// SetMime sets the "mime" field.
func (_u *UserUpdateOne) SetMime(v string) *UserUpdateOne {
	_u.mutation.SetMime(v)
	return _u
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMime(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetMime(*v)
	}
	return _u
}

// SetNonce sets the "nonce" field.
func (_u *UserUpdateOne) SetNonce(v []byte) *UserUpdateOne {
	_u.mutation.SetNonce(v)
	return _u
}

// SetKeySalt sets the "keySalt" field.
func (_u *UserUpdateOne) SetKeySalt(v []byte) *UserUpdateOne {
	_u.mutation.SetKeySalt(v)
	return _u
}

// SetHashTime sets the "hashTime" field.
func (_u *UserUpdateOne) SetHashTime(v uint32) *UserUpdateOne {
	_u.mutation.ResetHashTime()
	_u.mutation.SetHashTime(v)
	return _u
}

// SetNillableHashTime sets the "hashTime" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableHashTime(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetHashTime(*v)
	}
	return _u
}

// AddHashTime adds value to the "hashTime" field.
func (_u *UserUpdateOne) AddHashTime(v int32) *UserUpdateOne {
	_u.mutation.AddHashTime(v)
	return _u
}

// SetHashMemory sets the "hashMemory" field.
func (_u *UserUpdateOne) SetHashMemory(v uint32) *UserUpdateOne {
	_u.mutation.ResetHashMemory()
	_u.mutation.SetHashMemory(v)
	return _u
}

// SetNillableHashMemory sets the "hashMemory" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableHashMemory(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetHashMemory(*v)
	}
	return _u
}

// AddHashMemory adds value to the "hashMemory" field.
func (_u *UserUpdateOne) AddHashMemory(v int32) *UserUpdateOne {
	_u.mutation.AddHashMemory(v)
	return _u
}

// SetHashThreads sets the "hashThreads" field.
func (_u *UserUpdateOne) SetHashThreads(v uint8) *UserUpdateOne {
	_u.mutation.ResetHashThreads()
	_u.mutation.SetHashThreads(v)
	return _u
}

// SetNillableHashThreads sets the "hashThreads" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableHashThreads(v *uint8) *UserUpdateOne {
	if v != nil {
		_u.SetHashThreads(*v)
	}
	return _u
}

// AddHashThreads adds value to the "hashThreads" field.
func (_u *UserUpdateOne) AddHashThreads(v int8) *UserUpdateOne {
	_u.mutation.AddHashThreads(v)
	return _u
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (_u *UserUpdateOne) AddSessionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the Session entity.
func (_u *UserUpdateOne) AddSessions(v ...*Session) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the LogEntry entity by IDs.
func (_u *UserUpdateOne) AddLogIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddLogIDs(ids...)
	return _u
}

// AddLogs adds the "logs" edges to the LogEntry entity.
func (_u *UserUpdateOne) AddLogs(v ...*LogEntry) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLogIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (_u *UserUpdateOne) ClearSessions() *UserUpdateOne {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (_u *UserUpdateOne) RemoveSessionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (_u *UserUpdateOne) RemoveSessions(v ...*Session) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// ClearLogs clears all "logs" edges to the LogEntry entity.
func (_u *UserUpdateOne) ClearLogs() *UserUpdateOne {
	_u.mutation.ClearLogs()
	return _u
}

// RemoveLogIDs removes the "logs" edge to LogEntry entities by IDs.
func (_u *UserUpdateOne) RemoveLogIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveLogIDs(ids...)
	return _u
}

// RemoveLogs removes "logs" edges to LogEntry entities.
func (_u *UserUpdateOne) RemoveLogs(v ...*LogEntry) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLogIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Content(); ok {
		if err := user.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "User.content": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FileName(); ok {
		if err := user.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "fileName", err: fmt.Errorf(`ent: validator failed for field "User.fileName": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Mime(); ok {
		if err := user.MimeValidator(v); err != nil {
			return &ValidationError{Name: "mime", err: fmt.Errorf(`ent: validator failed for field "User.mime": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Nonce(); ok {
		if err := user.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`ent: validator failed for field "User.nonce": %w`, err)}
		}
	}
	if v, ok := _u.mutation.KeySalt(); ok {
		if err := user.KeySaltValidator(v); err != nil {
			return &ValidationError{Name: "keySalt", err: fmt.Errorf(`ent: validator failed for field "User.keySalt": %w`, err)}
		}
	}
	return nil
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.AlertDiscordId(); ok {
		_spec.SetField(user.FieldAlertDiscordId, field.TypeString, value)
	}
	if value, ok := _u.mutation.AlertEmail(); ok {
		_spec.SetField(user.FieldAlertEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(user.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LockedUntil(); ok {
		_spec.SetField(user.FieldLockedUntil, field.TypeTime, value)
	}
	if _u.mutation.LockedUntilCleared() {
		_spec.ClearField(user.FieldLockedUntil, field.TypeTime)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(user.FieldContent, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(user.FieldFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Mime(); ok {
		_spec.SetField(user.FieldMime, field.TypeString, value)
	}
	if value, ok := _u.mutation.Nonce(); ok {
		_spec.SetField(user.FieldNonce, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.KeySalt(); ok {
		_spec.SetField(user.FieldKeySalt, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.HashTime(); ok {
		_spec.SetField(user.FieldHashTime, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedHashTime(); ok {
		_spec.AddField(user.FieldHashTime, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.HashMemory(); ok {
		_spec.SetField(user.FieldHashMemory, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedHashMemory(); ok {
		_spec.AddField(user.FieldHashMemory, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.HashThreads(); ok {
		_spec.SetField(user.FieldHashThreads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedHashThreads(); ok {
		_spec.AddField(user.FieldHashThreads, field.TypeUint8, value)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LogsTable,
			Columns: []string{user.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLogsIDs(); len(nodes) > 0 && !_u.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LogsTable,
			Columns: []string{user.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LogsTable,
			Columns: []string{user.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
