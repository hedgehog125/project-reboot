// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/twofactoraction"
)

// TwoFactorActionCreate is the builder for creating a TwoFactorAction entity.
type TwoFactorActionCreate struct {
	config
	mutation *TwoFactorActionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (_c *TwoFactorActionCreate) SetType(v string) *TwoFactorActionCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetVersion sets the "version" field.
func (_c *TwoFactorActionCreate) SetVersion(v int) *TwoFactorActionCreate {
	_c.mutation.SetVersion(v)
	return _c
}

// SetData sets the "data" field.
func (_c *TwoFactorActionCreate) SetData(v string) *TwoFactorActionCreate {
	_c.mutation.SetData(v)
	return _c
}

// SetExpiresAt sets the "expiresAt" field.
func (_c *TwoFactorActionCreate) SetExpiresAt(v time.Time) *TwoFactorActionCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetCode sets the "code" field.
func (_c *TwoFactorActionCreate) SetCode(v string) *TwoFactorActionCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetID sets the "id" field.
func (_c *TwoFactorActionCreate) SetID(v uuid.UUID) *TwoFactorActionCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TwoFactorActionCreate) SetNillableID(v *uuid.UUID) *TwoFactorActionCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the TwoFactorActionMutation object of the builder.
func (_c *TwoFactorActionCreate) Mutation() *TwoFactorActionMutation {
	return _c.mutation
}

// Save creates the TwoFactorAction in the database.
func (_c *TwoFactorActionCreate) Save(ctx context.Context) (*TwoFactorAction, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TwoFactorActionCreate) SaveX(ctx context.Context) *TwoFactorAction {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TwoFactorActionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TwoFactorActionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TwoFactorActionCreate) defaults() {
	if _, ok := _c.mutation.ID(); !ok {
		v := twofactoraction.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TwoFactorActionCreate) check() error {
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TwoFactorAction.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := twofactoraction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TwoFactorAction.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "TwoFactorAction.version"`)}
	}
	if _, ok := _c.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "TwoFactorAction.data"`)}
	}
	if _, ok := _c.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expiresAt", err: errors.New(`ent: missing required field "TwoFactorAction.expiresAt"`)}
	}
	if _, ok := _c.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "TwoFactorAction.code"`)}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := twofactoraction.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "TwoFactorAction.code": %w`, err)}
		}
	}
	return nil
}

func (_c *TwoFactorActionCreate) sqlSave(ctx context.Context) (*TwoFactorAction, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TwoFactorActionCreate) createSpec() (*TwoFactorAction, *sqlgraph.CreateSpec) {
	var (
		_node = &TwoFactorAction{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(twofactoraction.Table, sqlgraph.NewFieldSpec(twofactoraction.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(twofactoraction.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Version(); ok {
		_spec.SetField(twofactoraction.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := _c.mutation.Data(); ok {
		_spec.SetField(twofactoraction.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(twofactoraction.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(twofactoraction.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwoFactorAction.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwoFactorActionUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *TwoFactorActionCreate) OnConflict(opts ...sql.ConflictOption) *TwoFactorActionUpsertOne {
	_c.conflict = opts
	return &TwoFactorActionUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwoFactorAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TwoFactorActionCreate) OnConflictColumns(columns ...string) *TwoFactorActionUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TwoFactorActionUpsertOne{
		create: _c,
	}
}

type (
	// TwoFactorActionUpsertOne is the builder for "upsert"-ing
	//  one TwoFactorAction node.
	TwoFactorActionUpsertOne struct {
		create *TwoFactorActionCreate
	}

	// TwoFactorActionUpsert is the "OnConflict" setter.
	TwoFactorActionUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *TwoFactorActionUpsert) SetType(v string) *TwoFactorActionUpsert {
	u.Set(twofactoraction.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TwoFactorActionUpsert) UpdateType() *TwoFactorActionUpsert {
	u.SetExcluded(twofactoraction.FieldType)
	return u
}

// SetVersion sets the "version" field.
func (u *TwoFactorActionUpsert) SetVersion(v int) *TwoFactorActionUpsert {
	u.Set(twofactoraction.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *TwoFactorActionUpsert) UpdateVersion() *TwoFactorActionUpsert {
	u.SetExcluded(twofactoraction.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *TwoFactorActionUpsert) AddVersion(v int) *TwoFactorActionUpsert {
	u.Add(twofactoraction.FieldVersion, v)
	return u
}

// SetData sets the "data" field.
func (u *TwoFactorActionUpsert) SetData(v string) *TwoFactorActionUpsert {
	u.Set(twofactoraction.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TwoFactorActionUpsert) UpdateData() *TwoFactorActionUpsert {
	u.SetExcluded(twofactoraction.FieldData)
	return u
}

// SetExpiresAt sets the "expiresAt" field.
func (u *TwoFactorActionUpsert) SetExpiresAt(v time.Time) *TwoFactorActionUpsert {
	u.Set(twofactoraction.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expiresAt" field to the value that was provided on create.
func (u *TwoFactorActionUpsert) UpdateExpiresAt() *TwoFactorActionUpsert {
	u.SetExcluded(twofactoraction.FieldExpiresAt)
	return u
}

// SetCode sets the "code" field.
func (u *TwoFactorActionUpsert) SetCode(v string) *TwoFactorActionUpsert {
	u.Set(twofactoraction.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TwoFactorActionUpsert) UpdateCode() *TwoFactorActionUpsert {
	u.SetExcluded(twofactoraction.FieldCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TwoFactorAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(twofactoraction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TwoFactorActionUpsertOne) UpdateNewValues() *TwoFactorActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(twofactoraction.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwoFactorAction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TwoFactorActionUpsertOne) Ignore() *TwoFactorActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwoFactorActionUpsertOne) DoNothing() *TwoFactorActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwoFactorActionCreate.OnConflict
// documentation for more info.
func (u *TwoFactorActionUpsertOne) Update(set func(*TwoFactorActionUpsert)) *TwoFactorActionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwoFactorActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *TwoFactorActionUpsertOne) SetType(v string) *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TwoFactorActionUpsertOne) UpdateType() *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateType()
	})
}

// SetVersion sets the "version" field.
func (u *TwoFactorActionUpsertOne) SetVersion(v int) *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *TwoFactorActionUpsertOne) AddVersion(v int) *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *TwoFactorActionUpsertOne) UpdateVersion() *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateVersion()
	})
}

// SetData sets the "data" field.
func (u *TwoFactorActionUpsertOne) SetData(v string) *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TwoFactorActionUpsertOne) UpdateData() *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateData()
	})
}

// SetExpiresAt sets the "expiresAt" field.
func (u *TwoFactorActionUpsertOne) SetExpiresAt(v time.Time) *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expiresAt" field to the value that was provided on create.
func (u *TwoFactorActionUpsertOne) UpdateExpiresAt() *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetCode sets the "code" field.
func (u *TwoFactorActionUpsertOne) SetCode(v string) *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TwoFactorActionUpsertOne) UpdateCode() *TwoFactorActionUpsertOne {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *TwoFactorActionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TwoFactorActionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwoFactorActionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TwoFactorActionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TwoFactorActionUpsertOne.ID is not supported by MySQL driver. Use TwoFactorActionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TwoFactorActionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TwoFactorActionCreateBulk is the builder for creating many TwoFactorAction entities in bulk.
type TwoFactorActionCreateBulk struct {
	config
	err      error
	builders []*TwoFactorActionCreate
	conflict []sql.ConflictOption
}

// Save creates the TwoFactorAction entities in the database.
func (_c *TwoFactorActionCreateBulk) Save(ctx context.Context) ([]*TwoFactorAction, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TwoFactorAction, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwoFactorActionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TwoFactorActionCreateBulk) SaveX(ctx context.Context) []*TwoFactorAction {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TwoFactorActionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TwoFactorActionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TwoFactorAction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TwoFactorActionUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *TwoFactorActionCreateBulk) OnConflict(opts ...sql.ConflictOption) *TwoFactorActionUpsertBulk {
	_c.conflict = opts
	return &TwoFactorActionUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TwoFactorAction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TwoFactorActionCreateBulk) OnConflictColumns(columns ...string) *TwoFactorActionUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TwoFactorActionUpsertBulk{
		create: _c,
	}
}

// TwoFactorActionUpsertBulk is the builder for "upsert"-ing
// a bulk of TwoFactorAction nodes.
type TwoFactorActionUpsertBulk struct {
	create *TwoFactorActionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TwoFactorAction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(twofactoraction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TwoFactorActionUpsertBulk) UpdateNewValues() *TwoFactorActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(twofactoraction.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TwoFactorAction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TwoFactorActionUpsertBulk) Ignore() *TwoFactorActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TwoFactorActionUpsertBulk) DoNothing() *TwoFactorActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TwoFactorActionCreateBulk.OnConflict
// documentation for more info.
func (u *TwoFactorActionUpsertBulk) Update(set func(*TwoFactorActionUpsert)) *TwoFactorActionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TwoFactorActionUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *TwoFactorActionUpsertBulk) SetType(v string) *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TwoFactorActionUpsertBulk) UpdateType() *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateType()
	})
}

// SetVersion sets the "version" field.
func (u *TwoFactorActionUpsertBulk) SetVersion(v int) *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *TwoFactorActionUpsertBulk) AddVersion(v int) *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *TwoFactorActionUpsertBulk) UpdateVersion() *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateVersion()
	})
}

// SetData sets the "data" field.
func (u *TwoFactorActionUpsertBulk) SetData(v string) *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TwoFactorActionUpsertBulk) UpdateData() *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateData()
	})
}

// SetExpiresAt sets the "expiresAt" field.
func (u *TwoFactorActionUpsertBulk) SetExpiresAt(v time.Time) *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expiresAt" field to the value that was provided on create.
func (u *TwoFactorActionUpsertBulk) UpdateExpiresAt() *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetCode sets the "code" field.
func (u *TwoFactorActionUpsertBulk) SetCode(v string) *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TwoFactorActionUpsertBulk) UpdateCode() *TwoFactorActionUpsertBulk {
	return u.Update(func(s *TwoFactorActionUpsert) {
		s.UpdateCode()
	})
}

// Exec executes the query.
func (u *TwoFactorActionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TwoFactorActionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TwoFactorActionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TwoFactorActionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
