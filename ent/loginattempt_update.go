// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hedgehog125/project-reboot/ent/loginattempt"
	"github.com/hedgehog125/project-reboot/ent/predicate"
	"github.com/hedgehog125/project-reboot/ent/user"
	"github.com/hedgehog125/project-reboot/intertypes"
)

// LoginAttemptUpdate is the builder for updating LoginAttempt entities.
type LoginAttemptUpdate struct {
	config
	hooks    []Hook
	mutation *LoginAttemptMutation
}

// Where appends a list predicates to the LoginAttemptUpdate builder.
func (lau *LoginAttemptUpdate) Where(ps ...predicate.LoginAttempt) *LoginAttemptUpdate {
	lau.mutation.Where(ps...)
	return lau
}

// SetTime sets the "time" field.
func (lau *LoginAttemptUpdate) SetTime(t time.Time) *LoginAttemptUpdate {
	lau.mutation.SetTime(t)
	return lau
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableTime(t *time.Time) *LoginAttemptUpdate {
	if t != nil {
		lau.SetTime(*t)
	}
	return lau
}

// SetCode sets the "code" field.
func (lau *LoginAttemptUpdate) SetCode(b []byte) *LoginAttemptUpdate {
	lau.mutation.SetCode(b)
	return lau
}

// SetCodeValidFrom sets the "codeValidFrom" field.
func (lau *LoginAttemptUpdate) SetCodeValidFrom(t time.Time) *LoginAttemptUpdate {
	lau.mutation.SetCodeValidFrom(t)
	return lau
}

// SetNillableCodeValidFrom sets the "codeValidFrom" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableCodeValidFrom(t *time.Time) *LoginAttemptUpdate {
	if t != nil {
		lau.SetCodeValidFrom(*t)
	}
	return lau
}

// SetInfo sets the "info" field.
func (lau *LoginAttemptUpdate) SetInfo(iai *intertypes.LoginAttemptInfo) *LoginAttemptUpdate {
	lau.mutation.SetInfo(iai)
	return lau
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lau *LoginAttemptUpdate) SetUserID(id int) *LoginAttemptUpdate {
	lau.mutation.SetUserID(id)
	return lau
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableUserID(id *int) *LoginAttemptUpdate {
	if id != nil {
		lau = lau.SetUserID(*id)
	}
	return lau
}

// SetUser sets the "user" edge to the User entity.
func (lau *LoginAttemptUpdate) SetUser(u *User) *LoginAttemptUpdate {
	return lau.SetUserID(u.ID)
}

// Mutation returns the LoginAttemptMutation object of the builder.
func (lau *LoginAttemptUpdate) Mutation() *LoginAttemptMutation {
	return lau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lau *LoginAttemptUpdate) ClearUser() *LoginAttemptUpdate {
	lau.mutation.ClearUser()
	return lau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lau *LoginAttemptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lau.sqlSave, lau.mutation, lau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lau *LoginAttemptUpdate) SaveX(ctx context.Context) int {
	affected, err := lau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lau *LoginAttemptUpdate) Exec(ctx context.Context) error {
	_, err := lau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lau *LoginAttemptUpdate) ExecX(ctx context.Context) {
	if err := lau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lau *LoginAttemptUpdate) check() error {
	if v, ok := lau.mutation.Code(); ok {
		if err := loginattempt.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "LoginAttempt.code": %w`, err)}
		}
	}
	return nil
}

func (lau *LoginAttemptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(loginattempt.Table, loginattempt.Columns, sqlgraph.NewFieldSpec(loginattempt.FieldID, field.TypeInt))
	if ps := lau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lau.mutation.Time(); ok {
		_spec.SetField(loginattempt.FieldTime, field.TypeTime, value)
	}
	if value, ok := lau.mutation.Code(); ok {
		_spec.SetField(loginattempt.FieldCode, field.TypeBytes, value)
	}
	if value, ok := lau.mutation.CodeValidFrom(); ok {
		_spec.SetField(loginattempt.FieldCodeValidFrom, field.TypeTime, value)
	}
	if value, ok := lau.mutation.Info(); ok {
		_spec.SetField(loginattempt.FieldInfo, field.TypeJSON, value)
	}
	if lau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginattempt.UserTable,
			Columns: []string{loginattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginattempt.UserTable,
			Columns: []string{loginattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lau.mutation.done = true
	return n, nil
}

// LoginAttemptUpdateOne is the builder for updating a single LoginAttempt entity.
type LoginAttemptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginAttemptMutation
}

// SetTime sets the "time" field.
func (lauo *LoginAttemptUpdateOne) SetTime(t time.Time) *LoginAttemptUpdateOne {
	lauo.mutation.SetTime(t)
	return lauo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableTime(t *time.Time) *LoginAttemptUpdateOne {
	if t != nil {
		lauo.SetTime(*t)
	}
	return lauo
}

// SetCode sets the "code" field.
func (lauo *LoginAttemptUpdateOne) SetCode(b []byte) *LoginAttemptUpdateOne {
	lauo.mutation.SetCode(b)
	return lauo
}

// SetCodeValidFrom sets the "codeValidFrom" field.
func (lauo *LoginAttemptUpdateOne) SetCodeValidFrom(t time.Time) *LoginAttemptUpdateOne {
	lauo.mutation.SetCodeValidFrom(t)
	return lauo
}

// SetNillableCodeValidFrom sets the "codeValidFrom" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableCodeValidFrom(t *time.Time) *LoginAttemptUpdateOne {
	if t != nil {
		lauo.SetCodeValidFrom(*t)
	}
	return lauo
}

// SetInfo sets the "info" field.
func (lauo *LoginAttemptUpdateOne) SetInfo(iai *intertypes.LoginAttemptInfo) *LoginAttemptUpdateOne {
	lauo.mutation.SetInfo(iai)
	return lauo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lauo *LoginAttemptUpdateOne) SetUserID(id int) *LoginAttemptUpdateOne {
	lauo.mutation.SetUserID(id)
	return lauo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableUserID(id *int) *LoginAttemptUpdateOne {
	if id != nil {
		lauo = lauo.SetUserID(*id)
	}
	return lauo
}

// SetUser sets the "user" edge to the User entity.
func (lauo *LoginAttemptUpdateOne) SetUser(u *User) *LoginAttemptUpdateOne {
	return lauo.SetUserID(u.ID)
}

// Mutation returns the LoginAttemptMutation object of the builder.
func (lauo *LoginAttemptUpdateOne) Mutation() *LoginAttemptMutation {
	return lauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lauo *LoginAttemptUpdateOne) ClearUser() *LoginAttemptUpdateOne {
	lauo.mutation.ClearUser()
	return lauo
}

// Where appends a list predicates to the LoginAttemptUpdate builder.
func (lauo *LoginAttemptUpdateOne) Where(ps ...predicate.LoginAttempt) *LoginAttemptUpdateOne {
	lauo.mutation.Where(ps...)
	return lauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lauo *LoginAttemptUpdateOne) Select(field string, fields ...string) *LoginAttemptUpdateOne {
	lauo.fields = append([]string{field}, fields...)
	return lauo
}

// Save executes the query and returns the updated LoginAttempt entity.
func (lauo *LoginAttemptUpdateOne) Save(ctx context.Context) (*LoginAttempt, error) {
	return withHooks(ctx, lauo.sqlSave, lauo.mutation, lauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lauo *LoginAttemptUpdateOne) SaveX(ctx context.Context) *LoginAttempt {
	node, err := lauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lauo *LoginAttemptUpdateOne) Exec(ctx context.Context) error {
	_, err := lauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lauo *LoginAttemptUpdateOne) ExecX(ctx context.Context) {
	if err := lauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lauo *LoginAttemptUpdateOne) check() error {
	if v, ok := lauo.mutation.Code(); ok {
		if err := loginattempt.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "LoginAttempt.code": %w`, err)}
		}
	}
	return nil
}

func (lauo *LoginAttemptUpdateOne) sqlSave(ctx context.Context) (_node *LoginAttempt, err error) {
	if err := lauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loginattempt.Table, loginattempt.Columns, sqlgraph.NewFieldSpec(loginattempt.FieldID, field.TypeInt))
	id, ok := lauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginAttempt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginattempt.FieldID)
		for _, f := range fields {
			if !loginattempt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginattempt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lauo.mutation.Time(); ok {
		_spec.SetField(loginattempt.FieldTime, field.TypeTime, value)
	}
	if value, ok := lauo.mutation.Code(); ok {
		_spec.SetField(loginattempt.FieldCode, field.TypeBytes, value)
	}
	if value, ok := lauo.mutation.CodeValidFrom(); ok {
		_spec.SetField(loginattempt.FieldCodeValidFrom, field.TypeTime, value)
	}
	if value, ok := lauo.mutation.Info(); ok {
		_spec.SetField(loginattempt.FieldInfo, field.TypeJSON, value)
	}
	if lauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginattempt.UserTable,
			Columns: []string{loginattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginattempt.UserTable,
			Columns: []string{loginattempt.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LoginAttempt{config: lauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lauo.mutation.done = true
	return _node, nil
}
