// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/job"
	"github.com/hedgehog125/project-reboot/ent/schema"
	"github.com/hedgehog125/project-reboot/ent/session"
	"github.com/hedgehog125/project-reboot/ent/twofactoraction"
	"github.com/hedgehog125/project-reboot/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	jobFields := schema.Job{}.Fields()
	_ = jobFields
	// jobDescCreated is the schema descriptor for created field.
	jobDescCreated := jobFields[1].Descriptor()
	// job.DefaultCreated holds the default value on creation for the created field.
	job.DefaultCreated = jobDescCreated.Default.(func() time.Time)
	// jobDescDue is the schema descriptor for due field.
	jobDescDue := jobFields[2].Descriptor()
	// job.DefaultDue holds the default value on creation for the due field.
	job.DefaultDue = jobDescDue.Default.(func() time.Time)
	// jobDescType is the schema descriptor for type field.
	jobDescType := jobFields[4].Descriptor()
	// job.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	job.TypeValidator = func() func(string) error {
		validators := jobDescType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_type string) error {
			for _, fn := range fns {
				if err := fn(_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// jobDescRetries is the schema descriptor for retries field.
	jobDescRetries := jobFields[10].Descriptor()
	// job.DefaultRetries holds the default value on creation for the retries field.
	job.DefaultRetries = jobDescRetries.Default.(int)
	// jobDescRetriedFraction is the schema descriptor for retriedFraction field.
	jobDescRetriedFraction := jobFields[11].Descriptor()
	// job.DefaultRetriedFraction holds the default value on creation for the retriedFraction field.
	job.DefaultRetriedFraction = jobDescRetriedFraction.Default.(float64)
	// jobDescLoggedStallWarning is the schema descriptor for loggedStallWarning field.
	jobDescLoggedStallWarning := jobFields[12].Descriptor()
	// job.DefaultLoggedStallWarning holds the default value on creation for the loggedStallWarning field.
	job.DefaultLoggedStallWarning = jobDescLoggedStallWarning.Default.(bool)
	// jobDescID is the schema descriptor for id field.
	jobDescID := jobFields[0].Descriptor()
	// job.DefaultID holds the default value on creation for the id field.
	job.DefaultID = jobDescID.Default.(func() uuid.UUID)
	sessionFields := schema.Session{}.Fields()
	_ = sessionFields
	// sessionDescTime is the schema descriptor for time field.
	sessionDescTime := sessionFields[0].Descriptor()
	// session.DefaultTime holds the default value on creation for the time field.
	session.DefaultTime = sessionDescTime.Default.(func() time.Time)
	// sessionDescCode is the schema descriptor for code field.
	sessionDescCode := sessionFields[1].Descriptor()
	// session.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	session.CodeValidator = sessionDescCode.Validators[0].(func([]byte) error)
	twofactoractionFields := schema.TwoFactorAction{}.Fields()
	_ = twofactoractionFields
	// twofactoractionDescType is the schema descriptor for type field.
	twofactoractionDescType := twofactoractionFields[1].Descriptor()
	// twofactoraction.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	twofactoraction.TypeValidator = func() func(string) error {
		validators := twofactoractionDescType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_type string) error {
			for _, fn := range fns {
				if err := fn(_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// twofactoractionDescCode is the schema descriptor for code field.
	twofactoractionDescCode := twofactoractionFields[5].Descriptor()
	// twofactoraction.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	twofactoraction.CodeValidator = func() func(string) error {
		validators := twofactoractionDescCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(code string) error {
			for _, fn := range fns {
				if err := fn(code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// twofactoractionDescID is the schema descriptor for id field.
	twofactoractionDescID := twofactoractionFields[0].Descriptor()
	// twofactoraction.DefaultID holds the default value on creation for the id field.
	twofactoraction.DefaultID = twofactoractionDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescAlertDiscordId is the schema descriptor for alertDiscordId field.
	userDescAlertDiscordId := userFields[1].Descriptor()
	// user.DefaultAlertDiscordId holds the default value on creation for the alertDiscordId field.
	user.DefaultAlertDiscordId = userDescAlertDiscordId.Default.(string)
	// userDescAlertEmail is the schema descriptor for alertEmail field.
	userDescAlertEmail := userFields[2].Descriptor()
	// user.DefaultAlertEmail holds the default value on creation for the alertEmail field.
	user.DefaultAlertEmail = userDescAlertEmail.Default.(string)
	// userDescLocked is the schema descriptor for locked field.
	userDescLocked := userFields[3].Descriptor()
	// user.DefaultLocked holds the default value on creation for the locked field.
	user.DefaultLocked = userDescLocked.Default.(bool)
	// userDescContent is the schema descriptor for content field.
	userDescContent := userFields[5].Descriptor()
	// user.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	user.ContentValidator = userDescContent.Validators[0].(func([]byte) error)
	// userDescFileName is the schema descriptor for fileName field.
	userDescFileName := userFields[6].Descriptor()
	// user.FileNameValidator is a validator for the "fileName" field. It is called by the builders before save.
	user.FileNameValidator = userDescFileName.Validators[0].(func(string) error)
	// userDescMime is the schema descriptor for mime field.
	userDescMime := userFields[7].Descriptor()
	// user.MimeValidator is a validator for the "mime" field. It is called by the builders before save.
	user.MimeValidator = userDescMime.Validators[0].(func(string) error)
	// userDescNonce is the schema descriptor for nonce field.
	userDescNonce := userFields[8].Descriptor()
	// user.NonceValidator is a validator for the "nonce" field. It is called by the builders before save.
	user.NonceValidator = userDescNonce.Validators[0].(func([]byte) error)
	// userDescKeySalt is the schema descriptor for keySalt field.
	userDescKeySalt := userFields[9].Descriptor()
	// user.KeySaltValidator is a validator for the "keySalt" field. It is called by the builders before save.
	user.KeySaltValidator = userDescKeySalt.Validators[0].(func([]byte) error)
}
