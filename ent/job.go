// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/job"
	"github.com/hedgehog125/project-reboot/ent/periodicjob"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Due holds the value of the "due" field.
	Due time.Time `json:"due,omitempty"`
	// OriginallyDue holds the value of the "originallyDue" field.
	OriginallyDue time.Time `json:"originallyDue,omitempty"`
	// Started holds the value of the "started" field.
	Started time.Time `json:"started,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int8 `json:"priority,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int `json:"weight,omitempty"`
	// Body holds the value of the "body" field.
	Body json.RawMessage `json:"body,omitempty"`
	// Status holds the value of the "status" field.
	Status job.Status `json:"status,omitempty"`
	// Retries holds the value of the "retries" field.
	Retries int `json:"retries,omitempty"`
	// RetriedFraction holds the value of the "retriedFraction" field.
	RetriedFraction float64 `json:"retriedFraction,omitempty"`
	// LoggedStallWarning holds the value of the "loggedStallWarning" field.
	LoggedStallWarning bool `json:"loggedStallWarning,omitempty"`
	// PeriodicJobID holds the value of the "periodicJobID" field.
	PeriodicJobID int `json:"periodicJobID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges        JobEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// PeriodicJob holds the value of the periodicJob edge.
	PeriodicJob *PeriodicJob `json:"periodicJob,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PeriodicJobOrErr returns the PeriodicJob value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) PeriodicJobOrErr() (*PeriodicJob, error) {
	if e.PeriodicJob != nil {
		return e.PeriodicJob, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: periodicjob.Label}
	}
	return nil, &NotLoadedError{edge: "periodicJob"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldBody:
			values[i] = new([]byte)
		case job.FieldLoggedStallWarning:
			values[i] = new(sql.NullBool)
		case job.FieldRetriedFraction:
			values[i] = new(sql.NullFloat64)
		case job.FieldVersion, job.FieldPriority, job.FieldWeight, job.FieldRetries, job.FieldPeriodicJobID:
			values[i] = new(sql.NullInt64)
		case job.FieldType, job.FieldStatus:
			values[i] = new(sql.NullString)
		case job.FieldCreated, job.FieldDue, job.FieldOriginallyDue, job.FieldStarted:
			values[i] = new(sql.NullTime)
		case job.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (_m *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case job.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				_m.Created = value.Time
			}
		case job.FieldDue:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due", values[i])
			} else if value.Valid {
				_m.Due = value.Time
			}
		case job.FieldOriginallyDue:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field originallyDue", values[i])
			} else if value.Valid {
				_m.OriginallyDue = value.Time
			}
		case job.FieldStarted:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started", values[i])
			} else if value.Valid {
				_m.Started = value.Time
			}
		case job.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case job.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = int(value.Int64)
			}
		case job.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				_m.Priority = int8(value.Int64)
			}
		case job.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				_m.Weight = int(value.Int64)
			}
		case job.FieldBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Body); err != nil {
					return fmt.Errorf("unmarshal field body: %w", err)
				}
			}
		case job.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = job.Status(value.String)
			}
		case job.FieldRetries:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retries", values[i])
			} else if value.Valid {
				_m.Retries = int(value.Int64)
			}
		case job.FieldRetriedFraction:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field retriedFraction", values[i])
			} else if value.Valid {
				_m.RetriedFraction = value.Float64
			}
		case job.FieldLoggedStallWarning:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field loggedStallWarning", values[i])
			} else if value.Valid {
				_m.LoggedStallWarning = value.Bool
			}
		case job.FieldPeriodicJobID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field periodicJobID", values[i])
			} else if value.Valid {
				_m.PeriodicJobID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Job.
// This includes values selected through modifiers, order, etc.
func (_m *Job) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPeriodicJob queries the "periodicJob" edge of the Job entity.
func (_m *Job) QueryPeriodicJob() *PeriodicJobQuery {
	return NewJobClient(_m.config).QueryPeriodicJob(_m)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Job) Update() *JobUpdateOne {
	return NewJobClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Job) Unwrap() *Job {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created=")
	builder.WriteString(_m.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("due=")
	builder.WriteString(_m.Due.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("originallyDue=")
	builder.WriteString(_m.OriginallyDue.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started=")
	builder.WriteString(_m.Started.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", _m.Version))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", _m.Priority))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", _m.Weight))
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(fmt.Sprintf("%v", _m.Body))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("retries=")
	builder.WriteString(fmt.Sprintf("%v", _m.Retries))
	builder.WriteString(", ")
	builder.WriteString("retriedFraction=")
	builder.WriteString(fmt.Sprintf("%v", _m.RetriedFraction))
	builder.WriteString(", ")
	builder.WriteString("loggedStallWarning=")
	builder.WriteString(fmt.Sprintf("%v", _m.LoggedStallWarning))
	builder.WriteString(", ")
	builder.WriteString("periodicJobID=")
	builder.WriteString(fmt.Sprintf("%v", _m.PeriodicJobID))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job
