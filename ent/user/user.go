// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldAlertDiscordId holds the string denoting the alertdiscordid field in the database.
	FieldAlertDiscordId = "alert_discord_id"
	// FieldAlertEmail holds the string denoting the alertemail field in the database.
	FieldAlertEmail = "alert_email"
	// FieldLocked holds the string denoting the locked field in the database.
	FieldLocked = "locked"
	// FieldLockedUntil holds the string denoting the lockeduntil field in the database.
	FieldLockedUntil = "locked_until"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldFileName holds the string denoting the filename field in the database.
	FieldFileName = "file_name"
	// FieldMime holds the string denoting the mime field in the database.
	FieldMime = "mime"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldKeySalt holds the string denoting the keysalt field in the database.
	FieldKeySalt = "key_salt"
	// FieldPasswordHash holds the string denoting the passwordhash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldPasswordSalt holds the string denoting the passwordsalt field in the database.
	FieldPasswordSalt = "password_salt"
	// FieldHashTime holds the string denoting the hashtime field in the database.
	FieldHashTime = "hash_time"
	// FieldHashMemory holds the string denoting the hashmemory field in the database.
	FieldHashMemory = "hash_memory"
	// FieldHashKeyLen holds the string denoting the hashkeylen field in the database.
	FieldHashKeyLen = "hash_key_len"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_sessions"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldAlertDiscordId,
	FieldAlertEmail,
	FieldLocked,
	FieldLockedUntil,
	FieldContent,
	FieldFileName,
	FieldMime,
	FieldNonce,
	FieldKeySalt,
	FieldPasswordHash,
	FieldPasswordSalt,
	FieldHashTime,
	FieldHashMemory,
	FieldHashKeyLen,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DefaultAlertDiscordId holds the default value on creation for the "alertDiscordId" field.
	DefaultAlertDiscordId string
	// DefaultAlertEmail holds the default value on creation for the "alertEmail" field.
	DefaultAlertEmail string
	// DefaultLocked holds the default value on creation for the "locked" field.
	DefaultLocked bool
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func([]byte) error
	// FileNameValidator is a validator for the "fileName" field. It is called by the builders before save.
	FileNameValidator func(string) error
	// MimeValidator is a validator for the "mime" field. It is called by the builders before save.
	MimeValidator func(string) error
	// NonceValidator is a validator for the "nonce" field. It is called by the builders before save.
	NonceValidator func([]byte) error
	// KeySaltValidator is a validator for the "keySalt" field. It is called by the builders before save.
	KeySaltValidator func([]byte) error
	// PasswordHashValidator is a validator for the "passwordHash" field. It is called by the builders before save.
	PasswordHashValidator func([]byte) error
	// PasswordSaltValidator is a validator for the "passwordSalt" field. It is called by the builders before save.
	PasswordSaltValidator func([]byte) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByAlertDiscordId orders the results by the alertDiscordId field.
func ByAlertDiscordId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlertDiscordId, opts...).ToFunc()
}

// ByAlertEmail orders the results by the alertEmail field.
func ByAlertEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlertEmail, opts...).ToFunc()
}

// ByLocked orders the results by the locked field.
func ByLocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocked, opts...).ToFunc()
}

// ByLockedUntil orders the results by the lockedUntil field.
func ByLockedUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedUntil, opts...).ToFunc()
}

// ByFileName orders the results by the fileName field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByMime orders the results by the mime field.
func ByMime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMime, opts...).ToFunc()
}

// ByHashTime orders the results by the hashTime field.
func ByHashTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashTime, opts...).ToFunc()
}

// ByHashMemory orders the results by the hashMemory field.
func ByHashMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashMemory, opts...).ToFunc()
}

// ByHashKeyLen orders the results by the hashKeyLen field.
func ByHashKeyLen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashKeyLen, opts...).ToFunc()
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
