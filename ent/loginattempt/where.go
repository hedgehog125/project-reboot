// Code generated by ent, DO NOT EDIT.

package loginattempt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hedgehog125/project-reboot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldID, id))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldTime, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldUsername, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldCode, v))
}

// CodeValidFrom applies equality check predicate on the "codeValidFrom" field. It's identical to CodeValidFromEQ.
func CodeValidFrom(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldCodeValidFrom, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldTime, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldUsername, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldCode, v))
}

// CodeValidFromEQ applies the EQ predicate on the "codeValidFrom" field.
func CodeValidFromEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldCodeValidFrom, v))
}

// CodeValidFromNEQ applies the NEQ predicate on the "codeValidFrom" field.
func CodeValidFromNEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldCodeValidFrom, v))
}

// CodeValidFromIn applies the In predicate on the "codeValidFrom" field.
func CodeValidFromIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldCodeValidFrom, vs...))
}

// CodeValidFromNotIn applies the NotIn predicate on the "codeValidFrom" field.
func CodeValidFromNotIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldCodeValidFrom, vs...))
}

// CodeValidFromGT applies the GT predicate on the "codeValidFrom" field.
func CodeValidFromGT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldCodeValidFrom, v))
}

// CodeValidFromGTE applies the GTE predicate on the "codeValidFrom" field.
func CodeValidFromGTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldCodeValidFrom, v))
}

// CodeValidFromLT applies the LT predicate on the "codeValidFrom" field.
func CodeValidFromLT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldCodeValidFrom, v))
}

// CodeValidFromLTE applies the LTE predicate on the "codeValidFrom" field.
func CodeValidFromLTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldCodeValidFrom, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginAttempt) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginAttempt) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginAttempt) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.NotPredicates(p))
}
