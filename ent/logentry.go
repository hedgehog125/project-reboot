// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/logentry"
	"github.com/hedgehog125/project-reboot/ent/user"
)

// LogEntry is the model entity for the LogEntry schema.
type LogEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// TimeKnown holds the value of the "timeKnown" field.
	TimeKnown bool `json:"timeKnown,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Attributes holds the value of the "attributes" field.
	Attributes string `json:"attributes,omitempty"`
	// SourceFile holds the value of the "sourceFile" field.
	SourceFile string `json:"sourceFile,omitempty"`
	// SourceFunction holds the value of the "sourceFunction" field.
	SourceFunction string `json:"sourceFunction,omitempty"`
	// SourceLine holds the value of the "sourceLine" field.
	SourceLine int `json:"sourceLine,omitempty"`
	// PublicMessage holds the value of the "publicMessage" field.
	PublicMessage string `json:"publicMessage,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LogEntryQuery when eager-loading is set.
	Edges          LogEntryEdges `json:"edges"`
	log_entry_user *int
	selectValues   sql.SelectValues
}

// LogEntryEdges holds the relations/edges for other nodes in the graph.
type LogEntryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LogEntryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logentry.FieldAttributes:
			values[i] = new([]byte)
		case logentry.FieldTimeKnown:
			values[i] = new(sql.NullBool)
		case logentry.FieldLevel, logentry.FieldSourceLine:
			values[i] = new(sql.NullInt64)
		case logentry.FieldMessage, logentry.FieldSourceFile, logentry.FieldSourceFunction, logentry.FieldPublicMessage:
			values[i] = new(sql.NullString)
		case logentry.FieldTime:
			values[i] = new(sql.NullTime)
		case logentry.FieldID:
			values[i] = new(uuid.UUID)
		case logentry.ForeignKeys[0]: // log_entry_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogEntry fields.
func (_m *LogEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logentry.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case logentry.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				_m.Time = value.Time
			}
		case logentry.FieldTimeKnown:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field timeKnown", values[i])
			} else if value.Valid {
				_m.TimeKnown = value.Bool
			}
		case logentry.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				_m.Level = int(value.Int64)
			}
		case logentry.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				_m.Message = value.String
			}
		case logentry.FieldAttributes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attributes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Attributes); err != nil {
					return fmt.Errorf("unmarshal field attributes: %w", err)
				}
			}
		case logentry.FieldSourceFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sourceFile", values[i])
			} else if value.Valid {
				_m.SourceFile = value.String
			}
		case logentry.FieldSourceFunction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sourceFunction", values[i])
			} else if value.Valid {
				_m.SourceFunction = value.String
			}
		case logentry.FieldSourceLine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sourceLine", values[i])
			} else if value.Valid {
				_m.SourceLine = int(value.Int64)
			}
		case logentry.FieldPublicMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publicMessage", values[i])
			} else if value.Valid {
				_m.PublicMessage = value.String
			}
		case logentry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field log_entry_user", value)
			} else if value.Valid {
				_m.log_entry_user = new(int)
				*_m.log_entry_user = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LogEntry.
// This includes values selected through modifiers, order, etc.
func (_m *LogEntry) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the LogEntry entity.
func (_m *LogEntry) QueryUser() *UserQuery {
	return NewLogEntryClient(_m.config).QueryUser(_m)
}

// Update returns a builder for updating this LogEntry.
// Note that you need to call LogEntry.Unwrap() before calling this method if this LogEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *LogEntry) Update() *LogEntryUpdateOne {
	return NewLogEntryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the LogEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *LogEntry) Unwrap() *LogEntry {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: LogEntry is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *LogEntry) String() string {
	var builder strings.Builder
	builder.WriteString("LogEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("time=")
	builder.WriteString(_m.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("timeKnown=")
	builder.WriteString(fmt.Sprintf("%v", _m.TimeKnown))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", _m.Level))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(_m.Message)
	builder.WriteString(", ")
	builder.WriteString("attributes=")
	builder.WriteString(fmt.Sprintf("%v", _m.Attributes))
	builder.WriteString(", ")
	builder.WriteString("sourceFile=")
	builder.WriteString(_m.SourceFile)
	builder.WriteString(", ")
	builder.WriteString("sourceFunction=")
	builder.WriteString(_m.SourceFunction)
	builder.WriteString(", ")
	builder.WriteString("sourceLine=")
	builder.WriteString(fmt.Sprintf("%v", _m.SourceLine))
	builder.WriteString(", ")
	builder.WriteString("publicMessage=")
	builder.WriteString(_m.PublicMessage)
	builder.WriteByte(')')
	return builder.String()
}

// LogEntries is a parsable slice of LogEntry.
type LogEntries []*LogEntry
