// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hedgehog125/project-reboot/ent/periodictask"
)

// PeriodicTaskCreate is the builder for creating a PeriodicTask entity.
type PeriodicTaskCreate struct {
	config
	mutation *PeriodicTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *PeriodicTaskCreate) SetName(v string) *PeriodicTaskCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetLastRan sets the "lastRan" field.
func (_c *PeriodicTaskCreate) SetLastRan(v time.Time) *PeriodicTaskCreate {
	_c.mutation.SetLastRan(v)
	return _c
}

// SetNillableLastRan sets the "lastRan" field if the given value is not nil.
func (_c *PeriodicTaskCreate) SetNillableLastRan(v *time.Time) *PeriodicTaskCreate {
	if v != nil {
		_c.SetLastRan(*v)
	}
	return _c
}

// Mutation returns the PeriodicTaskMutation object of the builder.
func (_c *PeriodicTaskCreate) Mutation() *PeriodicTaskMutation {
	return _c.mutation
}

// Save creates the PeriodicTask in the database.
func (_c *PeriodicTaskCreate) Save(ctx context.Context) (*PeriodicTask, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PeriodicTaskCreate) SaveX(ctx context.Context) *PeriodicTask {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PeriodicTaskCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PeriodicTaskCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PeriodicTaskCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PeriodicTask.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := periodictask.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PeriodicTask.name": %w`, err)}
		}
	}
	return nil
}

func (_c *PeriodicTaskCreate) sqlSave(ctx context.Context) (*PeriodicTask, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PeriodicTaskCreate) createSpec() (*PeriodicTask, *sqlgraph.CreateSpec) {
	var (
		_node = &PeriodicTask{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(periodictask.Table, sqlgraph.NewFieldSpec(periodictask.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(periodictask.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.LastRan(); ok {
		_spec.SetField(periodictask.FieldLastRan, field.TypeTime, value)
		_node.LastRan = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PeriodicTask.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PeriodicTaskUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *PeriodicTaskCreate) OnConflict(opts ...sql.ConflictOption) *PeriodicTaskUpsertOne {
	_c.conflict = opts
	return &PeriodicTaskUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PeriodicTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PeriodicTaskCreate) OnConflictColumns(columns ...string) *PeriodicTaskUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PeriodicTaskUpsertOne{
		create: _c,
	}
}

type (
	// PeriodicTaskUpsertOne is the builder for "upsert"-ing
	//  one PeriodicTask node.
	PeriodicTaskUpsertOne struct {
		create *PeriodicTaskCreate
	}

	// PeriodicTaskUpsert is the "OnConflict" setter.
	PeriodicTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *PeriodicTaskUpsert) SetName(v string) *PeriodicTaskUpsert {
	u.Set(periodictask.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PeriodicTaskUpsert) UpdateName() *PeriodicTaskUpsert {
	u.SetExcluded(periodictask.FieldName)
	return u
}

// SetLastRan sets the "lastRan" field.
func (u *PeriodicTaskUpsert) SetLastRan(v time.Time) *PeriodicTaskUpsert {
	u.Set(periodictask.FieldLastRan, v)
	return u
}

// UpdateLastRan sets the "lastRan" field to the value that was provided on create.
func (u *PeriodicTaskUpsert) UpdateLastRan() *PeriodicTaskUpsert {
	u.SetExcluded(periodictask.FieldLastRan)
	return u
}

// ClearLastRan clears the value of the "lastRan" field.
func (u *PeriodicTaskUpsert) ClearLastRan() *PeriodicTaskUpsert {
	u.SetNull(periodictask.FieldLastRan)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PeriodicTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PeriodicTaskUpsertOne) UpdateNewValues() *PeriodicTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PeriodicTask.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PeriodicTaskUpsertOne) Ignore() *PeriodicTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PeriodicTaskUpsertOne) DoNothing() *PeriodicTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PeriodicTaskCreate.OnConflict
// documentation for more info.
func (u *PeriodicTaskUpsertOne) Update(set func(*PeriodicTaskUpsert)) *PeriodicTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PeriodicTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PeriodicTaskUpsertOne) SetName(v string) *PeriodicTaskUpsertOne {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PeriodicTaskUpsertOne) UpdateName() *PeriodicTaskUpsertOne {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.UpdateName()
	})
}

// SetLastRan sets the "lastRan" field.
func (u *PeriodicTaskUpsertOne) SetLastRan(v time.Time) *PeriodicTaskUpsertOne {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.SetLastRan(v)
	})
}

// UpdateLastRan sets the "lastRan" field to the value that was provided on create.
func (u *PeriodicTaskUpsertOne) UpdateLastRan() *PeriodicTaskUpsertOne {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.UpdateLastRan()
	})
}

// ClearLastRan clears the value of the "lastRan" field.
func (u *PeriodicTaskUpsertOne) ClearLastRan() *PeriodicTaskUpsertOne {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.ClearLastRan()
	})
}

// Exec executes the query.
func (u *PeriodicTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PeriodicTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PeriodicTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PeriodicTaskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PeriodicTaskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PeriodicTaskCreateBulk is the builder for creating many PeriodicTask entities in bulk.
type PeriodicTaskCreateBulk struct {
	config
	err      error
	builders []*PeriodicTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the PeriodicTask entities in the database.
func (_c *PeriodicTaskCreateBulk) Save(ctx context.Context) ([]*PeriodicTask, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PeriodicTask, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PeriodicTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PeriodicTaskCreateBulk) SaveX(ctx context.Context) []*PeriodicTask {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PeriodicTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PeriodicTaskCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PeriodicTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PeriodicTaskUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *PeriodicTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *PeriodicTaskUpsertBulk {
	_c.conflict = opts
	return &PeriodicTaskUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PeriodicTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PeriodicTaskCreateBulk) OnConflictColumns(columns ...string) *PeriodicTaskUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PeriodicTaskUpsertBulk{
		create: _c,
	}
}

// PeriodicTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of PeriodicTask nodes.
type PeriodicTaskUpsertBulk struct {
	create *PeriodicTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PeriodicTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PeriodicTaskUpsertBulk) UpdateNewValues() *PeriodicTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PeriodicTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PeriodicTaskUpsertBulk) Ignore() *PeriodicTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PeriodicTaskUpsertBulk) DoNothing() *PeriodicTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PeriodicTaskCreateBulk.OnConflict
// documentation for more info.
func (u *PeriodicTaskUpsertBulk) Update(set func(*PeriodicTaskUpsert)) *PeriodicTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PeriodicTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PeriodicTaskUpsertBulk) SetName(v string) *PeriodicTaskUpsertBulk {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PeriodicTaskUpsertBulk) UpdateName() *PeriodicTaskUpsertBulk {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.UpdateName()
	})
}

// SetLastRan sets the "lastRan" field.
func (u *PeriodicTaskUpsertBulk) SetLastRan(v time.Time) *PeriodicTaskUpsertBulk {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.SetLastRan(v)
	})
}

// UpdateLastRan sets the "lastRan" field to the value that was provided on create.
func (u *PeriodicTaskUpsertBulk) UpdateLastRan() *PeriodicTaskUpsertBulk {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.UpdateLastRan()
	})
}

// ClearLastRan clears the value of the "lastRan" field.
func (u *PeriodicTaskUpsertBulk) ClearLastRan() *PeriodicTaskUpsertBulk {
	return u.Update(func(s *PeriodicTaskUpsert) {
		s.ClearLastRan()
	})
}

// Exec executes the query.
func (u *PeriodicTaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PeriodicTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PeriodicTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PeriodicTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
