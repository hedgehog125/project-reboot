// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hedgehog125/project-reboot/ent/loginattempt"
	"github.com/hedgehog125/project-reboot/intertypes"
)

// LoginAttemptCreate is the builder for creating a LoginAttempt entity.
type LoginAttemptCreate struct {
	config
	mutation *LoginAttemptMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTime sets the "time" field.
func (lac *LoginAttemptCreate) SetTime(t time.Time) *LoginAttemptCreate {
	lac.mutation.SetTime(t)
	return lac
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (lac *LoginAttemptCreate) SetNillableTime(t *time.Time) *LoginAttemptCreate {
	if t != nil {
		lac.SetTime(*t)
	}
	return lac
}

// SetUsername sets the "username" field.
func (lac *LoginAttemptCreate) SetUsername(s string) *LoginAttemptCreate {
	lac.mutation.SetUsername(s)
	return lac
}

// SetCode sets the "code" field.
func (lac *LoginAttemptCreate) SetCode(s string) *LoginAttemptCreate {
	lac.mutation.SetCode(s)
	return lac
}

// SetCodeValidFrom sets the "codeValidFrom" field.
func (lac *LoginAttemptCreate) SetCodeValidFrom(t time.Time) *LoginAttemptCreate {
	lac.mutation.SetCodeValidFrom(t)
	return lac
}

// SetInfo sets the "info" field.
func (lac *LoginAttemptCreate) SetInfo(iai *intertypes.LoginAttemptInfo) *LoginAttemptCreate {
	lac.mutation.SetInfo(iai)
	return lac
}

// Mutation returns the LoginAttemptMutation object of the builder.
func (lac *LoginAttemptCreate) Mutation() *LoginAttemptMutation {
	return lac.mutation
}

// Save creates the LoginAttempt in the database.
func (lac *LoginAttemptCreate) Save(ctx context.Context) (*LoginAttempt, error) {
	lac.defaults()
	return withHooks(ctx, lac.sqlSave, lac.mutation, lac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lac *LoginAttemptCreate) SaveX(ctx context.Context) *LoginAttempt {
	v, err := lac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lac *LoginAttemptCreate) Exec(ctx context.Context) error {
	_, err := lac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lac *LoginAttemptCreate) ExecX(ctx context.Context) {
	if err := lac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lac *LoginAttemptCreate) defaults() {
	if _, ok := lac.mutation.Time(); !ok {
		v := loginattempt.DefaultTime()
		lac.mutation.SetTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lac *LoginAttemptCreate) check() error {
	if _, ok := lac.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "LoginAttempt.time"`)}
	}
	if _, ok := lac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "LoginAttempt.username"`)}
	}
	if _, ok := lac.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "LoginAttempt.code"`)}
	}
	if _, ok := lac.mutation.CodeValidFrom(); !ok {
		return &ValidationError{Name: "codeValidFrom", err: errors.New(`ent: missing required field "LoginAttempt.codeValidFrom"`)}
	}
	if _, ok := lac.mutation.Info(); !ok {
		return &ValidationError{Name: "info", err: errors.New(`ent: missing required field "LoginAttempt.info"`)}
	}
	return nil
}

func (lac *LoginAttemptCreate) sqlSave(ctx context.Context) (*LoginAttempt, error) {
	if err := lac.check(); err != nil {
		return nil, err
	}
	_node, _spec := lac.createSpec()
	if err := sqlgraph.CreateNode(ctx, lac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lac.mutation.id = &_node.ID
	lac.mutation.done = true
	return _node, nil
}

func (lac *LoginAttemptCreate) createSpec() (*LoginAttempt, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginAttempt{config: lac.config}
		_spec = sqlgraph.NewCreateSpec(loginattempt.Table, sqlgraph.NewFieldSpec(loginattempt.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lac.conflict
	if value, ok := lac.mutation.Time(); ok {
		_spec.SetField(loginattempt.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if value, ok := lac.mutation.Username(); ok {
		_spec.SetField(loginattempt.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := lac.mutation.Code(); ok {
		_spec.SetField(loginattempt.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := lac.mutation.CodeValidFrom(); ok {
		_spec.SetField(loginattempt.FieldCodeValidFrom, field.TypeTime, value)
		_node.CodeValidFrom = value
	}
	if value, ok := lac.mutation.Info(); ok {
		_spec.SetField(loginattempt.FieldInfo, field.TypeJSON, value)
		_node.Info = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginAttempt.Create().
//		SetTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginAttemptUpsert) {
//			SetTime(v+v).
//		}).
//		Exec(ctx)
func (lac *LoginAttemptCreate) OnConflict(opts ...sql.ConflictOption) *LoginAttemptUpsertOne {
	lac.conflict = opts
	return &LoginAttemptUpsertOne{
		create: lac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginAttempt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lac *LoginAttemptCreate) OnConflictColumns(columns ...string) *LoginAttemptUpsertOne {
	lac.conflict = append(lac.conflict, sql.ConflictColumns(columns...))
	return &LoginAttemptUpsertOne{
		create: lac,
	}
}

type (
	// LoginAttemptUpsertOne is the builder for "upsert"-ing
	//  one LoginAttempt node.
	LoginAttemptUpsertOne struct {
		create *LoginAttemptCreate
	}

	// LoginAttemptUpsert is the "OnConflict" setter.
	LoginAttemptUpsert struct {
		*sql.UpdateSet
	}
)

// SetTime sets the "time" field.
func (u *LoginAttemptUpsert) SetTime(v time.Time) *LoginAttemptUpsert {
	u.Set(loginattempt.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *LoginAttemptUpsert) UpdateTime() *LoginAttemptUpsert {
	u.SetExcluded(loginattempt.FieldTime)
	return u
}

// SetUsername sets the "username" field.
func (u *LoginAttemptUpsert) SetUsername(v string) *LoginAttemptUpsert {
	u.Set(loginattempt.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *LoginAttemptUpsert) UpdateUsername() *LoginAttemptUpsert {
	u.SetExcluded(loginattempt.FieldUsername)
	return u
}

// SetCode sets the "code" field.
func (u *LoginAttemptUpsert) SetCode(v string) *LoginAttemptUpsert {
	u.Set(loginattempt.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *LoginAttemptUpsert) UpdateCode() *LoginAttemptUpsert {
	u.SetExcluded(loginattempt.FieldCode)
	return u
}

// SetCodeValidFrom sets the "codeValidFrom" field.
func (u *LoginAttemptUpsert) SetCodeValidFrom(v time.Time) *LoginAttemptUpsert {
	u.Set(loginattempt.FieldCodeValidFrom, v)
	return u
}

// UpdateCodeValidFrom sets the "codeValidFrom" field to the value that was provided on create.
func (u *LoginAttemptUpsert) UpdateCodeValidFrom() *LoginAttemptUpsert {
	u.SetExcluded(loginattempt.FieldCodeValidFrom)
	return u
}

// SetInfo sets the "info" field.
func (u *LoginAttemptUpsert) SetInfo(v *intertypes.LoginAttemptInfo) *LoginAttemptUpsert {
	u.Set(loginattempt.FieldInfo, v)
	return u
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *LoginAttemptUpsert) UpdateInfo() *LoginAttemptUpsert {
	u.SetExcluded(loginattempt.FieldInfo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.LoginAttempt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LoginAttemptUpsertOne) UpdateNewValues() *LoginAttemptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginAttempt.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LoginAttemptUpsertOne) Ignore() *LoginAttemptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginAttemptUpsertOne) DoNothing() *LoginAttemptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginAttemptCreate.OnConflict
// documentation for more info.
func (u *LoginAttemptUpsertOne) Update(set func(*LoginAttemptUpsert)) *LoginAttemptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginAttemptUpsert{UpdateSet: update})
	}))
	return u
}

// SetTime sets the "time" field.
func (u *LoginAttemptUpsertOne) SetTime(v time.Time) *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *LoginAttemptUpsertOne) UpdateTime() *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateTime()
	})
}

// SetUsername sets the "username" field.
func (u *LoginAttemptUpsertOne) SetUsername(v string) *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *LoginAttemptUpsertOne) UpdateUsername() *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateUsername()
	})
}

// SetCode sets the "code" field.
func (u *LoginAttemptUpsertOne) SetCode(v string) *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *LoginAttemptUpsertOne) UpdateCode() *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateCode()
	})
}

// SetCodeValidFrom sets the "codeValidFrom" field.
func (u *LoginAttemptUpsertOne) SetCodeValidFrom(v time.Time) *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetCodeValidFrom(v)
	})
}

// UpdateCodeValidFrom sets the "codeValidFrom" field to the value that was provided on create.
func (u *LoginAttemptUpsertOne) UpdateCodeValidFrom() *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateCodeValidFrom()
	})
}

// SetInfo sets the "info" field.
func (u *LoginAttemptUpsertOne) SetInfo(v *intertypes.LoginAttemptInfo) *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *LoginAttemptUpsertOne) UpdateInfo() *LoginAttemptUpsertOne {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateInfo()
	})
}

// Exec executes the query.
func (u *LoginAttemptUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginAttemptCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginAttemptUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LoginAttemptUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LoginAttemptUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LoginAttemptCreateBulk is the builder for creating many LoginAttempt entities in bulk.
type LoginAttemptCreateBulk struct {
	config
	err      error
	builders []*LoginAttemptCreate
	conflict []sql.ConflictOption
}

// Save creates the LoginAttempt entities in the database.
func (lacb *LoginAttemptCreateBulk) Save(ctx context.Context) ([]*LoginAttempt, error) {
	if lacb.err != nil {
		return nil, lacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lacb.builders))
	nodes := make([]*LoginAttempt, len(lacb.builders))
	mutators := make([]Mutator, len(lacb.builders))
	for i := range lacb.builders {
		func(i int, root context.Context) {
			builder := lacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginAttemptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lacb *LoginAttemptCreateBulk) SaveX(ctx context.Context) []*LoginAttempt {
	v, err := lacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lacb *LoginAttemptCreateBulk) Exec(ctx context.Context) error {
	_, err := lacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lacb *LoginAttemptCreateBulk) ExecX(ctx context.Context) {
	if err := lacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LoginAttempt.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LoginAttemptUpsert) {
//			SetTime(v+v).
//		}).
//		Exec(ctx)
func (lacb *LoginAttemptCreateBulk) OnConflict(opts ...sql.ConflictOption) *LoginAttemptUpsertBulk {
	lacb.conflict = opts
	return &LoginAttemptUpsertBulk{
		create: lacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LoginAttempt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lacb *LoginAttemptCreateBulk) OnConflictColumns(columns ...string) *LoginAttemptUpsertBulk {
	lacb.conflict = append(lacb.conflict, sql.ConflictColumns(columns...))
	return &LoginAttemptUpsertBulk{
		create: lacb,
	}
}

// LoginAttemptUpsertBulk is the builder for "upsert"-ing
// a bulk of LoginAttempt nodes.
type LoginAttemptUpsertBulk struct {
	create *LoginAttemptCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LoginAttempt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LoginAttemptUpsertBulk) UpdateNewValues() *LoginAttemptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LoginAttempt.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LoginAttemptUpsertBulk) Ignore() *LoginAttemptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LoginAttemptUpsertBulk) DoNothing() *LoginAttemptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LoginAttemptCreateBulk.OnConflict
// documentation for more info.
func (u *LoginAttemptUpsertBulk) Update(set func(*LoginAttemptUpsert)) *LoginAttemptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LoginAttemptUpsert{UpdateSet: update})
	}))
	return u
}

// SetTime sets the "time" field.
func (u *LoginAttemptUpsertBulk) SetTime(v time.Time) *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *LoginAttemptUpsertBulk) UpdateTime() *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateTime()
	})
}

// SetUsername sets the "username" field.
func (u *LoginAttemptUpsertBulk) SetUsername(v string) *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *LoginAttemptUpsertBulk) UpdateUsername() *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateUsername()
	})
}

// SetCode sets the "code" field.
func (u *LoginAttemptUpsertBulk) SetCode(v string) *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *LoginAttemptUpsertBulk) UpdateCode() *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateCode()
	})
}

// SetCodeValidFrom sets the "codeValidFrom" field.
func (u *LoginAttemptUpsertBulk) SetCodeValidFrom(v time.Time) *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetCodeValidFrom(v)
	})
}

// UpdateCodeValidFrom sets the "codeValidFrom" field to the value that was provided on create.
func (u *LoginAttemptUpsertBulk) UpdateCodeValidFrom() *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateCodeValidFrom()
	})
}

// SetInfo sets the "info" field.
func (u *LoginAttemptUpsertBulk) SetInfo(v *intertypes.LoginAttemptInfo) *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *LoginAttemptUpsertBulk) UpdateInfo() *LoginAttemptUpsertBulk {
	return u.Update(func(s *LoginAttemptUpsert) {
		s.UpdateInfo()
	})
}

// Exec executes the query.
func (u *LoginAttemptUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LoginAttemptCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LoginAttemptCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LoginAttemptUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
