// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hedgehog125/project-reboot/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// AlertDiscordId holds the value of the "alertDiscordId" field.
	AlertDiscordId string `json:"alertDiscordId,omitempty"`
	// AlertEmail holds the value of the "alertEmail" field.
	AlertEmail string `json:"alertEmail,omitempty"`
	// Locked holds the value of the "locked" field.
	Locked bool `json:"locked,omitempty"`
	// LockedUntil holds the value of the "lockedUntil" field.
	LockedUntil *time.Time `json:"lockedUntil,omitempty"`
	// Content holds the value of the "content" field.
	Content []byte `json:"content,omitempty"`
	// FileName holds the value of the "fileName" field.
	FileName string `json:"fileName,omitempty"`
	// Mime holds the value of the "mime" field.
	Mime string `json:"mime,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce []byte `json:"nonce,omitempty"`
	// KeySalt holds the value of the "keySalt" field.
	KeySalt []byte `json:"keySalt,omitempty"`
	// HashTime holds the value of the "hashTime" field.
	HashTime uint32 `json:"hashTime,omitempty"`
	// HashMemory holds the value of the "hashMemory" field.
	HashMemory uint32 `json:"hashMemory,omitempty"`
	// HashThreads holds the value of the "hashThreads" field.
	HashThreads uint8 `json:"hashThreads,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// Logs holds the value of the logs edge.
	Logs []*LogEntry `json:"logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[0] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LogsOrErr() ([]*LogEntry, error) {
	if e.loadedTypes[1] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldContent, user.FieldNonce, user.FieldKeySalt:
			values[i] = new([]byte)
		case user.FieldLocked:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldHashTime, user.FieldHashMemory, user.FieldHashThreads:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldAlertDiscordId, user.FieldAlertEmail, user.FieldFileName, user.FieldMime:
			values[i] = new(sql.NullString)
		case user.FieldLockedUntil:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				_m.Username = value.String
			}
		case user.FieldAlertDiscordId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alertDiscordId", values[i])
			} else if value.Valid {
				_m.AlertDiscordId = value.String
			}
		case user.FieldAlertEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alertEmail", values[i])
			} else if value.Valid {
				_m.AlertEmail = value.String
			}
		case user.FieldLocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field locked", values[i])
			} else if value.Valid {
				_m.Locked = value.Bool
			}
		case user.FieldLockedUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lockedUntil", values[i])
			} else if value.Valid {
				_m.LockedUntil = new(time.Time)
				*_m.LockedUntil = value.Time
			}
		case user.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				_m.Content = *value
			}
		case user.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fileName", values[i])
			} else if value.Valid {
				_m.FileName = value.String
			}
		case user.FieldMime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime", values[i])
			} else if value.Valid {
				_m.Mime = value.String
			}
		case user.FieldNonce:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value != nil {
				_m.Nonce = *value
			}
		case user.FieldKeySalt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field keySalt", values[i])
			} else if value != nil {
				_m.KeySalt = *value
			}
		case user.FieldHashTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hashTime", values[i])
			} else if value.Valid {
				_m.HashTime = uint32(value.Int64)
			}
		case user.FieldHashMemory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hashMemory", values[i])
			} else if value.Valid {
				_m.HashMemory = uint32(value.Int64)
			}
		case user.FieldHashThreads:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hashThreads", values[i])
			} else if value.Valid {
				_m.HashThreads = uint8(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySessions queries the "sessions" edge of the User entity.
func (_m *User) QuerySessions() *SessionQuery {
	return NewUserClient(_m.config).QuerySessions(_m)
}

// QueryLogs queries the "logs" edge of the User entity.
func (_m *User) QueryLogs() *LogEntryQuery {
	return NewUserClient(_m.config).QueryLogs(_m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("username=")
	builder.WriteString(_m.Username)
	builder.WriteString(", ")
	builder.WriteString("alertDiscordId=")
	builder.WriteString(_m.AlertDiscordId)
	builder.WriteString(", ")
	builder.WriteString("alertEmail=")
	builder.WriteString(_m.AlertEmail)
	builder.WriteString(", ")
	builder.WriteString("locked=")
	builder.WriteString(fmt.Sprintf("%v", _m.Locked))
	builder.WriteString(", ")
	if v := _m.LockedUntil; v != nil {
		builder.WriteString("lockedUntil=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", _m.Content))
	builder.WriteString(", ")
	builder.WriteString("fileName=")
	builder.WriteString(_m.FileName)
	builder.WriteString(", ")
	builder.WriteString("mime=")
	builder.WriteString(_m.Mime)
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(fmt.Sprintf("%v", _m.Nonce))
	builder.WriteString(", ")
	builder.WriteString("keySalt=")
	builder.WriteString(fmt.Sprintf("%v", _m.KeySalt))
	builder.WriteString(", ")
	builder.WriteString("hashTime=")
	builder.WriteString(fmt.Sprintf("%v", _m.HashTime))
	builder.WriteString(", ")
	builder.WriteString("hashMemory=")
	builder.WriteString(fmt.Sprintf("%v", _m.HashMemory))
	builder.WriteString(", ")
	builder.WriteString("hashThreads=")
	builder.WriteString(fmt.Sprintf("%v", _m.HashThreads))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
