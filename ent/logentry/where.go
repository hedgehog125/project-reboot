// Code generated by ent, DO NOT EDIT.

package logentry

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLTE(FieldID, id))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldTime, v))
}

// TimeKnown applies equality check predicate on the "timeKnown" field. It's identical to TimeKnownEQ.
func TimeKnown(v bool) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldTimeKnown, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldLevel, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldMessage, v))
}

// SourceFile applies equality check predicate on the "sourceFile" field. It's identical to SourceFileEQ.
func SourceFile(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldSourceFile, v))
}

// SourceFunction applies equality check predicate on the "sourceFunction" field. It's identical to SourceFunctionEQ.
func SourceFunction(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldSourceFunction, v))
}

// SourceLine applies equality check predicate on the "sourceLine" field. It's identical to SourceLineEQ.
func SourceLine(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldSourceLine, v))
}

// PublicMessage applies equality check predicate on the "publicMessage" field. It's identical to PublicMessageEQ.
func PublicMessage(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldPublicMessage, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLTE(FieldTime, v))
}

// TimeKnownEQ applies the EQ predicate on the "timeKnown" field.
func TimeKnownEQ(v bool) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldTimeKnown, v))
}

// TimeKnownNEQ applies the NEQ predicate on the "timeKnown" field.
func TimeKnownNEQ(v bool) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNEQ(FieldTimeKnown, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLTE(FieldLevel, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldContainsFold(FieldMessage, v))
}

// SourceFileEQ applies the EQ predicate on the "sourceFile" field.
func SourceFileEQ(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldSourceFile, v))
}

// SourceFileNEQ applies the NEQ predicate on the "sourceFile" field.
func SourceFileNEQ(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNEQ(FieldSourceFile, v))
}

// SourceFileIn applies the In predicate on the "sourceFile" field.
func SourceFileIn(vs ...string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldIn(FieldSourceFile, vs...))
}

// SourceFileNotIn applies the NotIn predicate on the "sourceFile" field.
func SourceFileNotIn(vs ...string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNotIn(FieldSourceFile, vs...))
}

// SourceFileGT applies the GT predicate on the "sourceFile" field.
func SourceFileGT(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGT(FieldSourceFile, v))
}

// SourceFileGTE applies the GTE predicate on the "sourceFile" field.
func SourceFileGTE(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGTE(FieldSourceFile, v))
}

// SourceFileLT applies the LT predicate on the "sourceFile" field.
func SourceFileLT(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLT(FieldSourceFile, v))
}

// SourceFileLTE applies the LTE predicate on the "sourceFile" field.
func SourceFileLTE(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLTE(FieldSourceFile, v))
}

// SourceFileContains applies the Contains predicate on the "sourceFile" field.
func SourceFileContains(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldContains(FieldSourceFile, v))
}

// SourceFileHasPrefix applies the HasPrefix predicate on the "sourceFile" field.
func SourceFileHasPrefix(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldHasPrefix(FieldSourceFile, v))
}

// SourceFileHasSuffix applies the HasSuffix predicate on the "sourceFile" field.
func SourceFileHasSuffix(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldHasSuffix(FieldSourceFile, v))
}

// SourceFileEqualFold applies the EqualFold predicate on the "sourceFile" field.
func SourceFileEqualFold(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEqualFold(FieldSourceFile, v))
}

// SourceFileContainsFold applies the ContainsFold predicate on the "sourceFile" field.
func SourceFileContainsFold(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldContainsFold(FieldSourceFile, v))
}

// SourceFunctionEQ applies the EQ predicate on the "sourceFunction" field.
func SourceFunctionEQ(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldSourceFunction, v))
}

// SourceFunctionNEQ applies the NEQ predicate on the "sourceFunction" field.
func SourceFunctionNEQ(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNEQ(FieldSourceFunction, v))
}

// SourceFunctionIn applies the In predicate on the "sourceFunction" field.
func SourceFunctionIn(vs ...string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldIn(FieldSourceFunction, vs...))
}

// SourceFunctionNotIn applies the NotIn predicate on the "sourceFunction" field.
func SourceFunctionNotIn(vs ...string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNotIn(FieldSourceFunction, vs...))
}

// SourceFunctionGT applies the GT predicate on the "sourceFunction" field.
func SourceFunctionGT(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGT(FieldSourceFunction, v))
}

// SourceFunctionGTE applies the GTE predicate on the "sourceFunction" field.
func SourceFunctionGTE(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGTE(FieldSourceFunction, v))
}

// SourceFunctionLT applies the LT predicate on the "sourceFunction" field.
func SourceFunctionLT(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLT(FieldSourceFunction, v))
}

// SourceFunctionLTE applies the LTE predicate on the "sourceFunction" field.
func SourceFunctionLTE(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLTE(FieldSourceFunction, v))
}

// SourceFunctionContains applies the Contains predicate on the "sourceFunction" field.
func SourceFunctionContains(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldContains(FieldSourceFunction, v))
}

// SourceFunctionHasPrefix applies the HasPrefix predicate on the "sourceFunction" field.
func SourceFunctionHasPrefix(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldHasPrefix(FieldSourceFunction, v))
}

// SourceFunctionHasSuffix applies the HasSuffix predicate on the "sourceFunction" field.
func SourceFunctionHasSuffix(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldHasSuffix(FieldSourceFunction, v))
}

// SourceFunctionEqualFold applies the EqualFold predicate on the "sourceFunction" field.
func SourceFunctionEqualFold(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEqualFold(FieldSourceFunction, v))
}

// SourceFunctionContainsFold applies the ContainsFold predicate on the "sourceFunction" field.
func SourceFunctionContainsFold(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldContainsFold(FieldSourceFunction, v))
}

// SourceLineEQ applies the EQ predicate on the "sourceLine" field.
func SourceLineEQ(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldSourceLine, v))
}

// SourceLineNEQ applies the NEQ predicate on the "sourceLine" field.
func SourceLineNEQ(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNEQ(FieldSourceLine, v))
}

// SourceLineIn applies the In predicate on the "sourceLine" field.
func SourceLineIn(vs ...int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldIn(FieldSourceLine, vs...))
}

// SourceLineNotIn applies the NotIn predicate on the "sourceLine" field.
func SourceLineNotIn(vs ...int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNotIn(FieldSourceLine, vs...))
}

// SourceLineGT applies the GT predicate on the "sourceLine" field.
func SourceLineGT(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGT(FieldSourceLine, v))
}

// SourceLineGTE applies the GTE predicate on the "sourceLine" field.
func SourceLineGTE(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGTE(FieldSourceLine, v))
}

// SourceLineLT applies the LT predicate on the "sourceLine" field.
func SourceLineLT(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLT(FieldSourceLine, v))
}

// SourceLineLTE applies the LTE predicate on the "sourceLine" field.
func SourceLineLTE(v int) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLTE(FieldSourceLine, v))
}

// PublicMessageEQ applies the EQ predicate on the "publicMessage" field.
func PublicMessageEQ(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEQ(FieldPublicMessage, v))
}

// PublicMessageNEQ applies the NEQ predicate on the "publicMessage" field.
func PublicMessageNEQ(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNEQ(FieldPublicMessage, v))
}

// PublicMessageIn applies the In predicate on the "publicMessage" field.
func PublicMessageIn(vs ...string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldIn(FieldPublicMessage, vs...))
}

// PublicMessageNotIn applies the NotIn predicate on the "publicMessage" field.
func PublicMessageNotIn(vs ...string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldNotIn(FieldPublicMessage, vs...))
}

// PublicMessageGT applies the GT predicate on the "publicMessage" field.
func PublicMessageGT(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGT(FieldPublicMessage, v))
}

// PublicMessageGTE applies the GTE predicate on the "publicMessage" field.
func PublicMessageGTE(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldGTE(FieldPublicMessage, v))
}

// PublicMessageLT applies the LT predicate on the "publicMessage" field.
func PublicMessageLT(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLT(FieldPublicMessage, v))
}

// PublicMessageLTE applies the LTE predicate on the "publicMessage" field.
func PublicMessageLTE(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldLTE(FieldPublicMessage, v))
}

// PublicMessageContains applies the Contains predicate on the "publicMessage" field.
func PublicMessageContains(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldContains(FieldPublicMessage, v))
}

// PublicMessageHasPrefix applies the HasPrefix predicate on the "publicMessage" field.
func PublicMessageHasPrefix(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldHasPrefix(FieldPublicMessage, v))
}

// PublicMessageHasSuffix applies the HasSuffix predicate on the "publicMessage" field.
func PublicMessageHasSuffix(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldHasSuffix(FieldPublicMessage, v))
}

// PublicMessageEqualFold applies the EqualFold predicate on the "publicMessage" field.
func PublicMessageEqualFold(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldEqualFold(FieldPublicMessage, v))
}

// PublicMessageContainsFold applies the ContainsFold predicate on the "publicMessage" field.
func PublicMessageContainsFold(v string) predicate.LogEntry {
	return predicate.LogEntry(sql.FieldContainsFold(FieldPublicMessage, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.LogEntry {
	return predicate.LogEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.LogEntry {
	return predicate.LogEntry(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LogEntry) predicate.LogEntry {
	return predicate.LogEntry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LogEntry) predicate.LogEntry {
	return predicate.LogEntry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LogEntry) predicate.LogEntry {
	return predicate.LogEntry(sql.NotPredicates(p))
}
