// Code generated by ent, DO NOT EDIT.

package logentry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the logentry type in the database.
	Label = "log_entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldTimeKnown holds the string denoting the timeknown field in the database.
	FieldTimeKnown = "time_known"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldAttributes holds the string denoting the attributes field in the database.
	FieldAttributes = "attributes"
	// FieldSourceFile holds the string denoting the sourcefile field in the database.
	FieldSourceFile = "source_file"
	// FieldSourceFunction holds the string denoting the sourcefunction field in the database.
	FieldSourceFunction = "source_function"
	// FieldSourceLine holds the string denoting the sourceline field in the database.
	FieldSourceLine = "source_line"
	// FieldPublicMessage holds the string denoting the publicmessage field in the database.
	FieldPublicMessage = "public_message"
	// FieldUserID holds the string denoting the userid field in the database.
	FieldUserID = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the logentry in the database.
	Table = "log_entries"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "log_entries"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for logentry fields.
var Columns = []string{
	FieldID,
	FieldTime,
	FieldTimeKnown,
	FieldLevel,
	FieldMessage,
	FieldAttributes,
	FieldSourceFile,
	FieldSourceFunction,
	FieldSourceLine,
	FieldPublicMessage,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the LogEntry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByTimeKnown orders the results by the timeKnown field.
func ByTimeKnown(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeKnown, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// BySourceFile orders the results by the sourceFile field.
func BySourceFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceFile, opts...).ToFunc()
}

// BySourceFunction orders the results by the sourceFunction field.
func BySourceFunction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceFunction, opts...).ToFunc()
}

// BySourceLine orders the results by the sourceLine field.
func BySourceLine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceLine, opts...).ToFunc()
}

// ByPublicMessage orders the results by the publicMessage field.
func ByPublicMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicMessage, opts...).ToFunc()
}

// ByUserID orders the results by the userID field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
