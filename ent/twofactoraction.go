// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/twofactoraction"
)

// TwoFactorAction is the model entity for the TwoFactorAction schema.
type TwoFactorAction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// Body holds the value of the "body" field.
	Body json.RawMessage `json:"body,omitempty"`
	// ExpiresAt holds the value of the "expiresAt" field.
	ExpiresAt time.Time `json:"expiresAt,omitempty"`
	// Code holds the value of the "code" field.
	Code         string `json:"code,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TwoFactorAction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case twofactoraction.FieldBody:
			values[i] = new([]byte)
		case twofactoraction.FieldVersion:
			values[i] = new(sql.NullInt64)
		case twofactoraction.FieldType, twofactoraction.FieldCode:
			values[i] = new(sql.NullString)
		case twofactoraction.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case twofactoraction.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TwoFactorAction fields.
func (_m *TwoFactorAction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case twofactoraction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case twofactoraction.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = value.String
			}
		case twofactoraction.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = int(value.Int64)
			}
		case twofactoraction.FieldBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Body); err != nil {
					return fmt.Errorf("unmarshal field body: %w", err)
				}
			}
		case twofactoraction.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiresAt", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case twofactoraction.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TwoFactorAction.
// This includes values selected through modifiers, order, etc.
func (_m *TwoFactorAction) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this TwoFactorAction.
// Note that you need to call TwoFactorAction.Unwrap() before calling this method if this TwoFactorAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TwoFactorAction) Update() *TwoFactorActionUpdateOne {
	return NewTwoFactorActionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TwoFactorAction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TwoFactorAction) Unwrap() *TwoFactorAction {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TwoFactorAction is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TwoFactorAction) String() string {
	var builder strings.Builder
	builder.WriteString("TwoFactorAction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("type=")
	builder.WriteString(_m.Type)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", _m.Version))
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(fmt.Sprintf("%v", _m.Body))
	builder.WriteString(", ")
	builder.WriteString("expiresAt=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteByte(')')
	return builder.String()
}

// TwoFactorActions is a parsable slice of TwoFactorAction.
type TwoFactorActions []*TwoFactorAction
