// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hedgehog125/project-reboot/ent/loginattempt"
	"github.com/hedgehog125/project-reboot/ent/predicate"
	"github.com/hedgehog125/project-reboot/ent/user"
	"github.com/hedgehog125/project-reboot/intertypes"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLoginAttempt = "LoginAttempt"
	TypeUser         = "User"
)

// LoginAttemptMutation represents an operation that mutates the LoginAttempt nodes in the graph.
type LoginAttemptMutation struct {
	config
	op            Op
	typ           string
	id            *int
	time          *time.Time
	username      *time.Time
	code          *string
	codeValidFrom *time.Time
	info          **intertypes.LoginAttemptInfo
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*LoginAttempt, error)
	predicates    []predicate.LoginAttempt
}

var _ ent.Mutation = (*LoginAttemptMutation)(nil)

// loginattemptOption allows management of the mutation configuration using functional options.
type loginattemptOption func(*LoginAttemptMutation)

// newLoginAttemptMutation creates new mutation for the LoginAttempt entity.
func newLoginAttemptMutation(c config, op Op, opts ...loginattemptOption) *LoginAttemptMutation {
	m := &LoginAttemptMutation{
		config:        c,
		op:            op,
		typ:           TypeLoginAttempt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLoginAttemptID sets the ID field of the mutation.
func withLoginAttemptID(id int) loginattemptOption {
	return func(m *LoginAttemptMutation) {
		var (
			err   error
			once  sync.Once
			value *LoginAttempt
		)
		m.oldValue = func(ctx context.Context) (*LoginAttempt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LoginAttempt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLoginAttempt sets the old LoginAttempt of the mutation.
func withLoginAttempt(node *LoginAttempt) loginattemptOption {
	return func(m *LoginAttemptMutation) {
		m.oldValue = func(context.Context) (*LoginAttempt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LoginAttemptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LoginAttemptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LoginAttemptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LoginAttemptMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LoginAttempt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTime sets the "time" field.
func (m *LoginAttemptMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *LoginAttemptMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the LoginAttempt entity.
// If the LoginAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginAttemptMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *LoginAttemptMutation) ResetTime() {
	m.time = nil
}

// SetUsername sets the "username" field.
func (m *LoginAttemptMutation) SetUsername(t time.Time) {
	m.username = &t
}

// Username returns the value of the "username" field in the mutation.
func (m *LoginAttemptMutation) Username() (r time.Time, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the LoginAttempt entity.
// If the LoginAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginAttemptMutation) OldUsername(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *LoginAttemptMutation) ResetUsername() {
	m.username = nil
}

// SetCode sets the "code" field.
func (m *LoginAttemptMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *LoginAttemptMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the LoginAttempt entity.
// If the LoginAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginAttemptMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *LoginAttemptMutation) ResetCode() {
	m.code = nil
}

// SetCodeValidFrom sets the "codeValidFrom" field.
func (m *LoginAttemptMutation) SetCodeValidFrom(t time.Time) {
	m.codeValidFrom = &t
}

// CodeValidFrom returns the value of the "codeValidFrom" field in the mutation.
func (m *LoginAttemptMutation) CodeValidFrom() (r time.Time, exists bool) {
	v := m.codeValidFrom
	if v == nil {
		return
	}
	return *v, true
}

// OldCodeValidFrom returns the old "codeValidFrom" field's value of the LoginAttempt entity.
// If the LoginAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginAttemptMutation) OldCodeValidFrom(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCodeValidFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCodeValidFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCodeValidFrom: %w", err)
	}
	return oldValue.CodeValidFrom, nil
}

// ResetCodeValidFrom resets all changes to the "codeValidFrom" field.
func (m *LoginAttemptMutation) ResetCodeValidFrom() {
	m.codeValidFrom = nil
}

// SetInfo sets the "info" field.
func (m *LoginAttemptMutation) SetInfo(iai *intertypes.LoginAttemptInfo) {
	m.info = &iai
}

// Info returns the value of the "info" field in the mutation.
func (m *LoginAttemptMutation) Info() (r *intertypes.LoginAttemptInfo, exists bool) {
	v := m.info
	if v == nil {
		return
	}
	return *v, true
}

// OldInfo returns the old "info" field's value of the LoginAttempt entity.
// If the LoginAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginAttemptMutation) OldInfo(ctx context.Context) (v *intertypes.LoginAttemptInfo, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfo: %w", err)
	}
	return oldValue.Info, nil
}

// ResetInfo resets all changes to the "info" field.
func (m *LoginAttemptMutation) ResetInfo() {
	m.info = nil
}

// Where appends a list predicates to the LoginAttemptMutation builder.
func (m *LoginAttemptMutation) Where(ps ...predicate.LoginAttempt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LoginAttemptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LoginAttemptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LoginAttempt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LoginAttemptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LoginAttemptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LoginAttempt).
func (m *LoginAttemptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LoginAttemptMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.time != nil {
		fields = append(fields, loginattempt.FieldTime)
	}
	if m.username != nil {
		fields = append(fields, loginattempt.FieldUsername)
	}
	if m.code != nil {
		fields = append(fields, loginattempt.FieldCode)
	}
	if m.codeValidFrom != nil {
		fields = append(fields, loginattempt.FieldCodeValidFrom)
	}
	if m.info != nil {
		fields = append(fields, loginattempt.FieldInfo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LoginAttemptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case loginattempt.FieldTime:
		return m.Time()
	case loginattempt.FieldUsername:
		return m.Username()
	case loginattempt.FieldCode:
		return m.Code()
	case loginattempt.FieldCodeValidFrom:
		return m.CodeValidFrom()
	case loginattempt.FieldInfo:
		return m.Info()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LoginAttemptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case loginattempt.FieldTime:
		return m.OldTime(ctx)
	case loginattempt.FieldUsername:
		return m.OldUsername(ctx)
	case loginattempt.FieldCode:
		return m.OldCode(ctx)
	case loginattempt.FieldCodeValidFrom:
		return m.OldCodeValidFrom(ctx)
	case loginattempt.FieldInfo:
		return m.OldInfo(ctx)
	}
	return nil, fmt.Errorf("unknown LoginAttempt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoginAttemptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case loginattempt.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case loginattempt.FieldUsername:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case loginattempt.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case loginattempt.FieldCodeValidFrom:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCodeValidFrom(v)
		return nil
	case loginattempt.FieldInfo:
		v, ok := value.(*intertypes.LoginAttemptInfo)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfo(v)
		return nil
	}
	return fmt.Errorf("unknown LoginAttempt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LoginAttemptMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LoginAttemptMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoginAttemptMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LoginAttempt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LoginAttemptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LoginAttemptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LoginAttemptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LoginAttempt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LoginAttemptMutation) ResetField(name string) error {
	switch name {
	case loginattempt.FieldTime:
		m.ResetTime()
		return nil
	case loginattempt.FieldUsername:
		m.ResetUsername()
		return nil
	case loginattempt.FieldCode:
		m.ResetCode()
		return nil
	case loginattempt.FieldCodeValidFrom:
		m.ResetCodeValidFrom()
		return nil
	case loginattempt.FieldInfo:
		m.ResetInfo()
		return nil
	}
	return fmt.Errorf("unknown LoginAttempt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LoginAttemptMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LoginAttemptMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LoginAttemptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LoginAttemptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LoginAttemptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LoginAttemptMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LoginAttemptMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LoginAttempt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LoginAttemptMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LoginAttempt edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	content       *[]byte
	fileName      *string
	mime          *string
	nonce         *[]byte
	keySalt       *[]byte
	passwordHash  *[]byte
	passwordSalt  *[]byte
	hashTime      *uint32
	addhashTime   *int32
	hashMemory    *uint32
	addhashMemory *int32
	hashKeyLen    *uint32
	addhashKeyLen *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetContent sets the "content" field.
func (m *UserMutation) SetContent(b []byte) {
	m.content = &b
}

// Content returns the value of the "content" field in the mutation.
func (m *UserMutation) Content() (r []byte, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldContent(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *UserMutation) ResetContent() {
	m.content = nil
}

// SetFileName sets the "fileName" field.
func (m *UserMutation) SetFileName(s string) {
	m.fileName = &s
}

// FileName returns the value of the "fileName" field in the mutation.
func (m *UserMutation) FileName() (r string, exists bool) {
	v := m.fileName
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "fileName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "fileName" field.
func (m *UserMutation) ResetFileName() {
	m.fileName = nil
}

// SetMime sets the "mime" field.
func (m *UserMutation) SetMime(s string) {
	m.mime = &s
}

// Mime returns the value of the "mime" field in the mutation.
func (m *UserMutation) Mime() (r string, exists bool) {
	v := m.mime
	if v == nil {
		return
	}
	return *v, true
}

// OldMime returns the old "mime" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMime: %w", err)
	}
	return oldValue.Mime, nil
}

// ResetMime resets all changes to the "mime" field.
func (m *UserMutation) ResetMime() {
	m.mime = nil
}

// SetNonce sets the "nonce" field.
func (m *UserMutation) SetNonce(b []byte) {
	m.nonce = &b
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *UserMutation) Nonce() (r []byte, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNonce(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// ResetNonce resets all changes to the "nonce" field.
func (m *UserMutation) ResetNonce() {
	m.nonce = nil
}

// SetKeySalt sets the "keySalt" field.
func (m *UserMutation) SetKeySalt(b []byte) {
	m.keySalt = &b
}

// KeySalt returns the value of the "keySalt" field in the mutation.
func (m *UserMutation) KeySalt() (r []byte, exists bool) {
	v := m.keySalt
	if v == nil {
		return
	}
	return *v, true
}

// OldKeySalt returns the old "keySalt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldKeySalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeySalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeySalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeySalt: %w", err)
	}
	return oldValue.KeySalt, nil
}

// ResetKeySalt resets all changes to the "keySalt" field.
func (m *UserMutation) ResetKeySalt() {
	m.keySalt = nil
}

// SetPasswordHash sets the "passwordHash" field.
func (m *UserMutation) SetPasswordHash(b []byte) {
	m.passwordHash = &b
}

// PasswordHash returns the value of the "passwordHash" field in the mutation.
func (m *UserMutation) PasswordHash() (r []byte, exists bool) {
	v := m.passwordHash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "passwordHash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "passwordHash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.passwordHash = nil
}

// SetPasswordSalt sets the "passwordSalt" field.
func (m *UserMutation) SetPasswordSalt(b []byte) {
	m.passwordSalt = &b
}

// PasswordSalt returns the value of the "passwordSalt" field in the mutation.
func (m *UserMutation) PasswordSalt() (r []byte, exists bool) {
	v := m.passwordSalt
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordSalt returns the old "passwordSalt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordSalt: %w", err)
	}
	return oldValue.PasswordSalt, nil
}

// ResetPasswordSalt resets all changes to the "passwordSalt" field.
func (m *UserMutation) ResetPasswordSalt() {
	m.passwordSalt = nil
}

// SetHashTime sets the "hashTime" field.
func (m *UserMutation) SetHashTime(u uint32) {
	m.hashTime = &u
	m.addhashTime = nil
}

// HashTime returns the value of the "hashTime" field in the mutation.
func (m *UserMutation) HashTime() (r uint32, exists bool) {
	v := m.hashTime
	if v == nil {
		return
	}
	return *v, true
}

// OldHashTime returns the old "hashTime" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashTime(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashTime: %w", err)
	}
	return oldValue.HashTime, nil
}

// AddHashTime adds u to the "hashTime" field.
func (m *UserMutation) AddHashTime(u int32) {
	if m.addhashTime != nil {
		*m.addhashTime += u
	} else {
		m.addhashTime = &u
	}
}

// AddedHashTime returns the value that was added to the "hashTime" field in this mutation.
func (m *UserMutation) AddedHashTime() (r int32, exists bool) {
	v := m.addhashTime
	if v == nil {
		return
	}
	return *v, true
}

// ResetHashTime resets all changes to the "hashTime" field.
func (m *UserMutation) ResetHashTime() {
	m.hashTime = nil
	m.addhashTime = nil
}

// SetHashMemory sets the "hashMemory" field.
func (m *UserMutation) SetHashMemory(u uint32) {
	m.hashMemory = &u
	m.addhashMemory = nil
}

// HashMemory returns the value of the "hashMemory" field in the mutation.
func (m *UserMutation) HashMemory() (r uint32, exists bool) {
	v := m.hashMemory
	if v == nil {
		return
	}
	return *v, true
}

// OldHashMemory returns the old "hashMemory" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashMemory(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashMemory: %w", err)
	}
	return oldValue.HashMemory, nil
}

// AddHashMemory adds u to the "hashMemory" field.
func (m *UserMutation) AddHashMemory(u int32) {
	if m.addhashMemory != nil {
		*m.addhashMemory += u
	} else {
		m.addhashMemory = &u
	}
}

// AddedHashMemory returns the value that was added to the "hashMemory" field in this mutation.
func (m *UserMutation) AddedHashMemory() (r int32, exists bool) {
	v := m.addhashMemory
	if v == nil {
		return
	}
	return *v, true
}

// ResetHashMemory resets all changes to the "hashMemory" field.
func (m *UserMutation) ResetHashMemory() {
	m.hashMemory = nil
	m.addhashMemory = nil
}

// SetHashKeyLen sets the "hashKeyLen" field.
func (m *UserMutation) SetHashKeyLen(u uint32) {
	m.hashKeyLen = &u
	m.addhashKeyLen = nil
}

// HashKeyLen returns the value of the "hashKeyLen" field in the mutation.
func (m *UserMutation) HashKeyLen() (r uint32, exists bool) {
	v := m.hashKeyLen
	if v == nil {
		return
	}
	return *v, true
}

// OldHashKeyLen returns the old "hashKeyLen" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashKeyLen(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashKeyLen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashKeyLen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashKeyLen: %w", err)
	}
	return oldValue.HashKeyLen, nil
}

// AddHashKeyLen adds u to the "hashKeyLen" field.
func (m *UserMutation) AddHashKeyLen(u int32) {
	if m.addhashKeyLen != nil {
		*m.addhashKeyLen += u
	} else {
		m.addhashKeyLen = &u
	}
}

// AddedHashKeyLen returns the value that was added to the "hashKeyLen" field in this mutation.
func (m *UserMutation) AddedHashKeyLen() (r int32, exists bool) {
	v := m.addhashKeyLen
	if v == nil {
		return
	}
	return *v, true
}

// ResetHashKeyLen resets all changes to the "hashKeyLen" field.
func (m *UserMutation) ResetHashKeyLen() {
	m.hashKeyLen = nil
	m.addhashKeyLen = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.content != nil {
		fields = append(fields, user.FieldContent)
	}
	if m.fileName != nil {
		fields = append(fields, user.FieldFileName)
	}
	if m.mime != nil {
		fields = append(fields, user.FieldMime)
	}
	if m.nonce != nil {
		fields = append(fields, user.FieldNonce)
	}
	if m.keySalt != nil {
		fields = append(fields, user.FieldKeySalt)
	}
	if m.passwordHash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.passwordSalt != nil {
		fields = append(fields, user.FieldPasswordSalt)
	}
	if m.hashTime != nil {
		fields = append(fields, user.FieldHashTime)
	}
	if m.hashMemory != nil {
		fields = append(fields, user.FieldHashMemory)
	}
	if m.hashKeyLen != nil {
		fields = append(fields, user.FieldHashKeyLen)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldContent:
		return m.Content()
	case user.FieldFileName:
		return m.FileName()
	case user.FieldMime:
		return m.Mime()
	case user.FieldNonce:
		return m.Nonce()
	case user.FieldKeySalt:
		return m.KeySalt()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldPasswordSalt:
		return m.PasswordSalt()
	case user.FieldHashTime:
		return m.HashTime()
	case user.FieldHashMemory:
		return m.HashMemory()
	case user.FieldHashKeyLen:
		return m.HashKeyLen()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldContent:
		return m.OldContent(ctx)
	case user.FieldFileName:
		return m.OldFileName(ctx)
	case user.FieldMime:
		return m.OldMime(ctx)
	case user.FieldNonce:
		return m.OldNonce(ctx)
	case user.FieldKeySalt:
		return m.OldKeySalt(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldPasswordSalt:
		return m.OldPasswordSalt(ctx)
	case user.FieldHashTime:
		return m.OldHashTime(ctx)
	case user.FieldHashMemory:
		return m.OldHashMemory(ctx)
	case user.FieldHashKeyLen:
		return m.OldHashKeyLen(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldContent:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case user.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case user.FieldMime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMime(v)
		return nil
	case user.FieldNonce:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	case user.FieldKeySalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeySalt(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldPasswordSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordSalt(v)
		return nil
	case user.FieldHashTime:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashTime(v)
		return nil
	case user.FieldHashMemory:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashMemory(v)
		return nil
	case user.FieldHashKeyLen:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashKeyLen(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addhashTime != nil {
		fields = append(fields, user.FieldHashTime)
	}
	if m.addhashMemory != nil {
		fields = append(fields, user.FieldHashMemory)
	}
	if m.addhashKeyLen != nil {
		fields = append(fields, user.FieldHashKeyLen)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldHashTime:
		return m.AddedHashTime()
	case user.FieldHashMemory:
		return m.AddedHashMemory()
	case user.FieldHashKeyLen:
		return m.AddedHashKeyLen()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldHashTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHashTime(v)
		return nil
	case user.FieldHashMemory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHashMemory(v)
		return nil
	case user.FieldHashKeyLen:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHashKeyLen(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldContent:
		m.ResetContent()
		return nil
	case user.FieldFileName:
		m.ResetFileName()
		return nil
	case user.FieldMime:
		m.ResetMime()
		return nil
	case user.FieldNonce:
		m.ResetNonce()
		return nil
	case user.FieldKeySalt:
		m.ResetKeySalt()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldPasswordSalt:
		m.ResetPasswordSalt()
		return nil
	case user.FieldHashTime:
		m.ResetHashTime()
		return nil
	case user.FieldHashMemory:
		m.ResetHashMemory()
		return nil
	case user.FieldHashKeyLen:
		m.ResetHashKeyLen()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
