// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/predicate"
	"github.com/hedgehog125/project-reboot/ent/session"
	"github.com/hedgehog125/project-reboot/ent/twofactoraction"
	"github.com/hedgehog125/project-reboot/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSession         = "Session"
	TypeTwoFactorAction = "TwoFactorAction"
	TypeUser            = "User"
)

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	time          *time.Time
	code          *[]byte
	codeValidFrom *time.Time
	userAgent     *string
	ip            *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Session, error)
	predicates    []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTime sets the "time" field.
func (m *SessionMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *SessionMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *SessionMutation) ResetTime() {
	m.time = nil
}

// SetCode sets the "code" field.
func (m *SessionMutation) SetCode(b []byte) {
	m.code = &b
}

// Code returns the value of the "code" field in the mutation.
func (m *SessionMutation) Code() (r []byte, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCode(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *SessionMutation) ResetCode() {
	m.code = nil
}

// SetCodeValidFrom sets the "codeValidFrom" field.
func (m *SessionMutation) SetCodeValidFrom(t time.Time) {
	m.codeValidFrom = &t
}

// CodeValidFrom returns the value of the "codeValidFrom" field in the mutation.
func (m *SessionMutation) CodeValidFrom() (r time.Time, exists bool) {
	v := m.codeValidFrom
	if v == nil {
		return
	}
	return *v, true
}

// OldCodeValidFrom returns the old "codeValidFrom" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCodeValidFrom(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCodeValidFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCodeValidFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCodeValidFrom: %w", err)
	}
	return oldValue.CodeValidFrom, nil
}

// ResetCodeValidFrom resets all changes to the "codeValidFrom" field.
func (m *SessionMutation) ResetCodeValidFrom() {
	m.codeValidFrom = nil
}

// SetUserAgent sets the "userAgent" field.
func (m *SessionMutation) SetUserAgent(s string) {
	m.userAgent = &s
}

// UserAgent returns the value of the "userAgent" field in the mutation.
func (m *SessionMutation) UserAgent() (r string, exists bool) {
	v := m.userAgent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "userAgent" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ResetUserAgent resets all changes to the "userAgent" field.
func (m *SessionMutation) ResetUserAgent() {
	m.userAgent = nil
}

// SetIP sets the "ip" field.
func (m *SessionMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *SessionMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *SessionMutation) ResetIP() {
	m.ip = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SessionMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SessionMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.time != nil {
		fields = append(fields, session.FieldTime)
	}
	if m.code != nil {
		fields = append(fields, session.FieldCode)
	}
	if m.codeValidFrom != nil {
		fields = append(fields, session.FieldCodeValidFrom)
	}
	if m.userAgent != nil {
		fields = append(fields, session.FieldUserAgent)
	}
	if m.ip != nil {
		fields = append(fields, session.FieldIP)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldTime:
		return m.Time()
	case session.FieldCode:
		return m.Code()
	case session.FieldCodeValidFrom:
		return m.CodeValidFrom()
	case session.FieldUserAgent:
		return m.UserAgent()
	case session.FieldIP:
		return m.IP()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldTime:
		return m.OldTime(ctx)
	case session.FieldCode:
		return m.OldCode(ctx)
	case session.FieldCodeValidFrom:
		return m.OldCodeValidFrom(ctx)
	case session.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case session.FieldIP:
		return m.OldIP(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case session.FieldCode:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case session.FieldCodeValidFrom:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCodeValidFrom(v)
		return nil
	case session.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case session.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldTime:
		m.ResetTime()
		return nil
	case session.FieldCode:
		m.ResetCode()
		return nil
	case session.FieldCodeValidFrom:
		m.ResetCodeValidFrom()
		return nil
	case session.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case session.FieldIP:
		m.ResetIP()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// TwoFactorActionMutation represents an operation that mutates the TwoFactorAction nodes in the graph.
type TwoFactorActionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	_type         *string
	version       *int
	addversion    *int
	data          *string
	expiresAt     *time.Time
	code          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TwoFactorAction, error)
	predicates    []predicate.TwoFactorAction
}

var _ ent.Mutation = (*TwoFactorActionMutation)(nil)

// twofactoractionOption allows management of the mutation configuration using functional options.
type twofactoractionOption func(*TwoFactorActionMutation)

// newTwoFactorActionMutation creates new mutation for the TwoFactorAction entity.
func newTwoFactorActionMutation(c config, op Op, opts ...twofactoractionOption) *TwoFactorActionMutation {
	m := &TwoFactorActionMutation{
		config:        c,
		op:            op,
		typ:           TypeTwoFactorAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwoFactorActionID sets the ID field of the mutation.
func withTwoFactorActionID(id uuid.UUID) twofactoractionOption {
	return func(m *TwoFactorActionMutation) {
		var (
			err   error
			once  sync.Once
			value *TwoFactorAction
		)
		m.oldValue = func(ctx context.Context) (*TwoFactorAction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwoFactorAction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwoFactorAction sets the old TwoFactorAction of the mutation.
func withTwoFactorAction(node *TwoFactorAction) twofactoractionOption {
	return func(m *TwoFactorActionMutation) {
		m.oldValue = func(context.Context) (*TwoFactorAction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwoFactorActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwoFactorActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TwoFactorAction entities.
func (m *TwoFactorActionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwoFactorActionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwoFactorActionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwoFactorAction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *TwoFactorActionMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TwoFactorActionMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TwoFactorActionMutation) ResetType() {
	m._type = nil
}

// SetVersion sets the "version" field.
func (m *TwoFactorActionMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *TwoFactorActionMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *TwoFactorActionMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *TwoFactorActionMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *TwoFactorActionMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetData sets the "data" field.
func (m *TwoFactorActionMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *TwoFactorActionMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *TwoFactorActionMutation) ResetData() {
	m.data = nil
}

// SetExpiresAt sets the "expiresAt" field.
func (m *TwoFactorActionMutation) SetExpiresAt(t time.Time) {
	m.expiresAt = &t
}

// ExpiresAt returns the value of the "expiresAt" field in the mutation.
func (m *TwoFactorActionMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expiresAt
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expiresAt" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expiresAt" field.
func (m *TwoFactorActionMutation) ResetExpiresAt() {
	m.expiresAt = nil
}

// SetCode sets the "code" field.
func (m *TwoFactorActionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *TwoFactorActionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *TwoFactorActionMutation) ResetCode() {
	m.code = nil
}

// Where appends a list predicates to the TwoFactorActionMutation builder.
func (m *TwoFactorActionMutation) Where(ps ...predicate.TwoFactorAction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwoFactorActionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwoFactorActionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwoFactorAction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwoFactorActionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwoFactorActionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwoFactorAction).
func (m *TwoFactorActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwoFactorActionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._type != nil {
		fields = append(fields, twofactoraction.FieldType)
	}
	if m.version != nil {
		fields = append(fields, twofactoraction.FieldVersion)
	}
	if m.data != nil {
		fields = append(fields, twofactoraction.FieldData)
	}
	if m.expiresAt != nil {
		fields = append(fields, twofactoraction.FieldExpiresAt)
	}
	if m.code != nil {
		fields = append(fields, twofactoraction.FieldCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwoFactorActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twofactoraction.FieldType:
		return m.GetType()
	case twofactoraction.FieldVersion:
		return m.Version()
	case twofactoraction.FieldData:
		return m.Data()
	case twofactoraction.FieldExpiresAt:
		return m.ExpiresAt()
	case twofactoraction.FieldCode:
		return m.Code()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwoFactorActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twofactoraction.FieldType:
		return m.OldType(ctx)
	case twofactoraction.FieldVersion:
		return m.OldVersion(ctx)
	case twofactoraction.FieldData:
		return m.OldData(ctx)
	case twofactoraction.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case twofactoraction.FieldCode:
		return m.OldCode(ctx)
	}
	return nil, fmt.Errorf("unknown TwoFactorAction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwoFactorActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twofactoraction.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case twofactoraction.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case twofactoraction.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case twofactoraction.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case twofactoraction.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	}
	return fmt.Errorf("unknown TwoFactorAction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwoFactorActionMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, twofactoraction.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwoFactorActionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case twofactoraction.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwoFactorActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case twofactoraction.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown TwoFactorAction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwoFactorActionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwoFactorActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwoFactorActionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TwoFactorAction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwoFactorActionMutation) ResetField(name string) error {
	switch name {
	case twofactoraction.FieldType:
		m.ResetType()
		return nil
	case twofactoraction.FieldVersion:
		m.ResetVersion()
		return nil
	case twofactoraction.FieldData:
		m.ResetData()
		return nil
	case twofactoraction.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case twofactoraction.FieldCode:
		m.ResetCode()
		return nil
	}
	return fmt.Errorf("unknown TwoFactorAction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwoFactorActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwoFactorActionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwoFactorActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwoFactorActionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwoFactorActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwoFactorActionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwoFactorActionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TwoFactorAction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwoFactorActionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TwoFactorAction edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	username        *string
	alertDiscordId  *string
	alertEmail      *string
	locked          *bool
	lockedUntil     *time.Time
	content         *[]byte
	fileName        *string
	mime            *string
	nonce           *[]byte
	keySalt         *[]byte
	passwordHash    *[]byte
	passwordSalt    *[]byte
	hashTime        *uint32
	addhashTime     *int32
	hashMemory      *uint32
	addhashMemory   *int32
	hashKeyLen      *uint32
	addhashKeyLen   *int32
	clearedFields   map[string]struct{}
	sessions        map[int]struct{}
	removedsessions map[int]struct{}
	clearedsessions bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetAlertDiscordId sets the "alertDiscordId" field.
func (m *UserMutation) SetAlertDiscordId(s string) {
	m.alertDiscordId = &s
}

// AlertDiscordId returns the value of the "alertDiscordId" field in the mutation.
func (m *UserMutation) AlertDiscordId() (r string, exists bool) {
	v := m.alertDiscordId
	if v == nil {
		return
	}
	return *v, true
}

// OldAlertDiscordId returns the old "alertDiscordId" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAlertDiscordId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlertDiscordId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlertDiscordId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlertDiscordId: %w", err)
	}
	return oldValue.AlertDiscordId, nil
}

// ResetAlertDiscordId resets all changes to the "alertDiscordId" field.
func (m *UserMutation) ResetAlertDiscordId() {
	m.alertDiscordId = nil
}

// SetAlertEmail sets the "alertEmail" field.
func (m *UserMutation) SetAlertEmail(s string) {
	m.alertEmail = &s
}

// AlertEmail returns the value of the "alertEmail" field in the mutation.
func (m *UserMutation) AlertEmail() (r string, exists bool) {
	v := m.alertEmail
	if v == nil {
		return
	}
	return *v, true
}

// OldAlertEmail returns the old "alertEmail" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAlertEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlertEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlertEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlertEmail: %w", err)
	}
	return oldValue.AlertEmail, nil
}

// ResetAlertEmail resets all changes to the "alertEmail" field.
func (m *UserMutation) ResetAlertEmail() {
	m.alertEmail = nil
}

// SetLocked sets the "locked" field.
func (m *UserMutation) SetLocked(b bool) {
	m.locked = &b
}

// Locked returns the value of the "locked" field in the mutation.
func (m *UserMutation) Locked() (r bool, exists bool) {
	v := m.locked
	if v == nil {
		return
	}
	return *v, true
}

// OldLocked returns the old "locked" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLocked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocked: %w", err)
	}
	return oldValue.Locked, nil
}

// ResetLocked resets all changes to the "locked" field.
func (m *UserMutation) ResetLocked() {
	m.locked = nil
}

// SetLockedUntil sets the "lockedUntil" field.
func (m *UserMutation) SetLockedUntil(t time.Time) {
	m.lockedUntil = &t
}

// LockedUntil returns the value of the "lockedUntil" field in the mutation.
func (m *UserMutation) LockedUntil() (r time.Time, exists bool) {
	v := m.lockedUntil
	if v == nil {
		return
	}
	return *v, true
}

// OldLockedUntil returns the old "lockedUntil" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLockedUntil(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLockedUntil is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLockedUntil requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLockedUntil: %w", err)
	}
	return oldValue.LockedUntil, nil
}

// ClearLockedUntil clears the value of the "lockedUntil" field.
func (m *UserMutation) ClearLockedUntil() {
	m.lockedUntil = nil
	m.clearedFields[user.FieldLockedUntil] = struct{}{}
}

// LockedUntilCleared returns if the "lockedUntil" field was cleared in this mutation.
func (m *UserMutation) LockedUntilCleared() bool {
	_, ok := m.clearedFields[user.FieldLockedUntil]
	return ok
}

// ResetLockedUntil resets all changes to the "lockedUntil" field.
func (m *UserMutation) ResetLockedUntil() {
	m.lockedUntil = nil
	delete(m.clearedFields, user.FieldLockedUntil)
}

// SetContent sets the "content" field.
func (m *UserMutation) SetContent(b []byte) {
	m.content = &b
}

// Content returns the value of the "content" field in the mutation.
func (m *UserMutation) Content() (r []byte, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldContent(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *UserMutation) ResetContent() {
	m.content = nil
}

// SetFileName sets the "fileName" field.
func (m *UserMutation) SetFileName(s string) {
	m.fileName = &s
}

// FileName returns the value of the "fileName" field in the mutation.
func (m *UserMutation) FileName() (r string, exists bool) {
	v := m.fileName
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "fileName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "fileName" field.
func (m *UserMutation) ResetFileName() {
	m.fileName = nil
}

// SetMime sets the "mime" field.
func (m *UserMutation) SetMime(s string) {
	m.mime = &s
}

// Mime returns the value of the "mime" field in the mutation.
func (m *UserMutation) Mime() (r string, exists bool) {
	v := m.mime
	if v == nil {
		return
	}
	return *v, true
}

// OldMime returns the old "mime" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMime: %w", err)
	}
	return oldValue.Mime, nil
}

// ResetMime resets all changes to the "mime" field.
func (m *UserMutation) ResetMime() {
	m.mime = nil
}

// SetNonce sets the "nonce" field.
func (m *UserMutation) SetNonce(b []byte) {
	m.nonce = &b
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *UserMutation) Nonce() (r []byte, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNonce(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// ResetNonce resets all changes to the "nonce" field.
func (m *UserMutation) ResetNonce() {
	m.nonce = nil
}

// SetKeySalt sets the "keySalt" field.
func (m *UserMutation) SetKeySalt(b []byte) {
	m.keySalt = &b
}

// KeySalt returns the value of the "keySalt" field in the mutation.
func (m *UserMutation) KeySalt() (r []byte, exists bool) {
	v := m.keySalt
	if v == nil {
		return
	}
	return *v, true
}

// OldKeySalt returns the old "keySalt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldKeySalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeySalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeySalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeySalt: %w", err)
	}
	return oldValue.KeySalt, nil
}

// ResetKeySalt resets all changes to the "keySalt" field.
func (m *UserMutation) ResetKeySalt() {
	m.keySalt = nil
}

// SetPasswordHash sets the "passwordHash" field.
func (m *UserMutation) SetPasswordHash(b []byte) {
	m.passwordHash = &b
}

// PasswordHash returns the value of the "passwordHash" field in the mutation.
func (m *UserMutation) PasswordHash() (r []byte, exists bool) {
	v := m.passwordHash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "passwordHash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "passwordHash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.passwordHash = nil
}

// SetPasswordSalt sets the "passwordSalt" field.
func (m *UserMutation) SetPasswordSalt(b []byte) {
	m.passwordSalt = &b
}

// PasswordSalt returns the value of the "passwordSalt" field in the mutation.
func (m *UserMutation) PasswordSalt() (r []byte, exists bool) {
	v := m.passwordSalt
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordSalt returns the old "passwordSalt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordSalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordSalt: %w", err)
	}
	return oldValue.PasswordSalt, nil
}

// ResetPasswordSalt resets all changes to the "passwordSalt" field.
func (m *UserMutation) ResetPasswordSalt() {
	m.passwordSalt = nil
}

// SetHashTime sets the "hashTime" field.
func (m *UserMutation) SetHashTime(u uint32) {
	m.hashTime = &u
	m.addhashTime = nil
}

// HashTime returns the value of the "hashTime" field in the mutation.
func (m *UserMutation) HashTime() (r uint32, exists bool) {
	v := m.hashTime
	if v == nil {
		return
	}
	return *v, true
}

// OldHashTime returns the old "hashTime" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashTime(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashTime: %w", err)
	}
	return oldValue.HashTime, nil
}

// AddHashTime adds u to the "hashTime" field.
func (m *UserMutation) AddHashTime(u int32) {
	if m.addhashTime != nil {
		*m.addhashTime += u
	} else {
		m.addhashTime = &u
	}
}

// AddedHashTime returns the value that was added to the "hashTime" field in this mutation.
func (m *UserMutation) AddedHashTime() (r int32, exists bool) {
	v := m.addhashTime
	if v == nil {
		return
	}
	return *v, true
}

// ResetHashTime resets all changes to the "hashTime" field.
func (m *UserMutation) ResetHashTime() {
	m.hashTime = nil
	m.addhashTime = nil
}

// SetHashMemory sets the "hashMemory" field.
func (m *UserMutation) SetHashMemory(u uint32) {
	m.hashMemory = &u
	m.addhashMemory = nil
}

// HashMemory returns the value of the "hashMemory" field in the mutation.
func (m *UserMutation) HashMemory() (r uint32, exists bool) {
	v := m.hashMemory
	if v == nil {
		return
	}
	return *v, true
}

// OldHashMemory returns the old "hashMemory" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashMemory(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashMemory: %w", err)
	}
	return oldValue.HashMemory, nil
}

// AddHashMemory adds u to the "hashMemory" field.
func (m *UserMutation) AddHashMemory(u int32) {
	if m.addhashMemory != nil {
		*m.addhashMemory += u
	} else {
		m.addhashMemory = &u
	}
}

// AddedHashMemory returns the value that was added to the "hashMemory" field in this mutation.
func (m *UserMutation) AddedHashMemory() (r int32, exists bool) {
	v := m.addhashMemory
	if v == nil {
		return
	}
	return *v, true
}

// ResetHashMemory resets all changes to the "hashMemory" field.
func (m *UserMutation) ResetHashMemory() {
	m.hashMemory = nil
	m.addhashMemory = nil
}

// SetHashKeyLen sets the "hashKeyLen" field.
func (m *UserMutation) SetHashKeyLen(u uint32) {
	m.hashKeyLen = &u
	m.addhashKeyLen = nil
}

// HashKeyLen returns the value of the "hashKeyLen" field in the mutation.
func (m *UserMutation) HashKeyLen() (r uint32, exists bool) {
	v := m.hashKeyLen
	if v == nil {
		return
	}
	return *v, true
}

// OldHashKeyLen returns the old "hashKeyLen" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashKeyLen(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashKeyLen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashKeyLen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashKeyLen: %w", err)
	}
	return oldValue.HashKeyLen, nil
}

// AddHashKeyLen adds u to the "hashKeyLen" field.
func (m *UserMutation) AddHashKeyLen(u int32) {
	if m.addhashKeyLen != nil {
		*m.addhashKeyLen += u
	} else {
		m.addhashKeyLen = &u
	}
}

// AddedHashKeyLen returns the value that was added to the "hashKeyLen" field in this mutation.
func (m *UserMutation) AddedHashKeyLen() (r int32, exists bool) {
	v := m.addhashKeyLen
	if v == nil {
		return
	}
	return *v, true
}

// ResetHashKeyLen resets all changes to the "hashKeyLen" field.
func (m *UserMutation) ResetHashKeyLen() {
	m.hashKeyLen = nil
	m.addhashKeyLen = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the Session entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.alertDiscordId != nil {
		fields = append(fields, user.FieldAlertDiscordId)
	}
	if m.alertEmail != nil {
		fields = append(fields, user.FieldAlertEmail)
	}
	if m.locked != nil {
		fields = append(fields, user.FieldLocked)
	}
	if m.lockedUntil != nil {
		fields = append(fields, user.FieldLockedUntil)
	}
	if m.content != nil {
		fields = append(fields, user.FieldContent)
	}
	if m.fileName != nil {
		fields = append(fields, user.FieldFileName)
	}
	if m.mime != nil {
		fields = append(fields, user.FieldMime)
	}
	if m.nonce != nil {
		fields = append(fields, user.FieldNonce)
	}
	if m.keySalt != nil {
		fields = append(fields, user.FieldKeySalt)
	}
	if m.passwordHash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.passwordSalt != nil {
		fields = append(fields, user.FieldPasswordSalt)
	}
	if m.hashTime != nil {
		fields = append(fields, user.FieldHashTime)
	}
	if m.hashMemory != nil {
		fields = append(fields, user.FieldHashMemory)
	}
	if m.hashKeyLen != nil {
		fields = append(fields, user.FieldHashKeyLen)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldAlertDiscordId:
		return m.AlertDiscordId()
	case user.FieldAlertEmail:
		return m.AlertEmail()
	case user.FieldLocked:
		return m.Locked()
	case user.FieldLockedUntil:
		return m.LockedUntil()
	case user.FieldContent:
		return m.Content()
	case user.FieldFileName:
		return m.FileName()
	case user.FieldMime:
		return m.Mime()
	case user.FieldNonce:
		return m.Nonce()
	case user.FieldKeySalt:
		return m.KeySalt()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldPasswordSalt:
		return m.PasswordSalt()
	case user.FieldHashTime:
		return m.HashTime()
	case user.FieldHashMemory:
		return m.HashMemory()
	case user.FieldHashKeyLen:
		return m.HashKeyLen()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldAlertDiscordId:
		return m.OldAlertDiscordId(ctx)
	case user.FieldAlertEmail:
		return m.OldAlertEmail(ctx)
	case user.FieldLocked:
		return m.OldLocked(ctx)
	case user.FieldLockedUntil:
		return m.OldLockedUntil(ctx)
	case user.FieldContent:
		return m.OldContent(ctx)
	case user.FieldFileName:
		return m.OldFileName(ctx)
	case user.FieldMime:
		return m.OldMime(ctx)
	case user.FieldNonce:
		return m.OldNonce(ctx)
	case user.FieldKeySalt:
		return m.OldKeySalt(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldPasswordSalt:
		return m.OldPasswordSalt(ctx)
	case user.FieldHashTime:
		return m.OldHashTime(ctx)
	case user.FieldHashMemory:
		return m.OldHashMemory(ctx)
	case user.FieldHashKeyLen:
		return m.OldHashKeyLen(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldAlertDiscordId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlertDiscordId(v)
		return nil
	case user.FieldAlertEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlertEmail(v)
		return nil
	case user.FieldLocked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocked(v)
		return nil
	case user.FieldLockedUntil:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLockedUntil(v)
		return nil
	case user.FieldContent:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case user.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case user.FieldMime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMime(v)
		return nil
	case user.FieldNonce:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	case user.FieldKeySalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeySalt(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldPasswordSalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordSalt(v)
		return nil
	case user.FieldHashTime:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashTime(v)
		return nil
	case user.FieldHashMemory:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashMemory(v)
		return nil
	case user.FieldHashKeyLen:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashKeyLen(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addhashTime != nil {
		fields = append(fields, user.FieldHashTime)
	}
	if m.addhashMemory != nil {
		fields = append(fields, user.FieldHashMemory)
	}
	if m.addhashKeyLen != nil {
		fields = append(fields, user.FieldHashKeyLen)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldHashTime:
		return m.AddedHashTime()
	case user.FieldHashMemory:
		return m.AddedHashMemory()
	case user.FieldHashKeyLen:
		return m.AddedHashKeyLen()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldHashTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHashTime(v)
		return nil
	case user.FieldHashMemory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHashMemory(v)
		return nil
	case user.FieldHashKeyLen:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHashKeyLen(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldLockedUntil) {
		fields = append(fields, user.FieldLockedUntil)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldLockedUntil:
		m.ClearLockedUntil()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldAlertDiscordId:
		m.ResetAlertDiscordId()
		return nil
	case user.FieldAlertEmail:
		m.ResetAlertEmail()
		return nil
	case user.FieldLocked:
		m.ResetLocked()
		return nil
	case user.FieldLockedUntil:
		m.ResetLockedUntil()
		return nil
	case user.FieldContent:
		m.ResetContent()
		return nil
	case user.FieldFileName:
		m.ResetFileName()
		return nil
	case user.FieldMime:
		m.ResetMime()
		return nil
	case user.FieldNonce:
		m.ResetNonce()
		return nil
	case user.FieldKeySalt:
		m.ResetKeySalt()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldPasswordSalt:
		m.ResetPasswordSalt()
		return nil
	case user.FieldHashTime:
		m.ResetHashTime()
		return nil
	case user.FieldHashMemory:
		m.ResetHashMemory()
		return nil
	case user.FieldHashKeyLen:
		m.ResetHashKeyLen()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSessions:
		return m.clearedsessions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
