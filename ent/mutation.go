// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/job"
	"github.com/hedgehog125/project-reboot/ent/keyvalue"
	"github.com/hedgehog125/project-reboot/ent/logentry"
	"github.com/hedgehog125/project-reboot/ent/periodictask"
	"github.com/hedgehog125/project-reboot/ent/predicate"
	"github.com/hedgehog125/project-reboot/ent/session"
	"github.com/hedgehog125/project-reboot/ent/twofactoraction"
	"github.com/hedgehog125/project-reboot/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeJob             = "Job"
	TypeKeyValue        = "KeyValue"
	TypeLogEntry        = "LogEntry"
	TypePeriodicTask    = "PeriodicTask"
	TypeSession         = "Session"
	TypeTwoFactorAction = "TwoFactorAction"
	TypeUser            = "User"
)

// JobMutation represents an operation that mutates the Job nodes in the graph.
type JobMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created            *time.Time
	due                *time.Time
	originallyDue      *time.Time
	started            *time.Time
	_type              *string
	version            *int
	addversion         *int
	priority           *int8
	addpriority        *int8
	weight             *int
	addweight          *int
	body               *json.RawMessage
	appendbody         json.RawMessage
	status             *job.Status
	retries            *int
	addretries         *int
	retriedFraction    *float64
	addretriedFraction *float64
	loggedStallWarning *bool
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Job, error)
	predicates         []predicate.Job
}

var _ ent.Mutation = (*JobMutation)(nil)

// jobOption allows management of the mutation configuration using functional options.
type jobOption func(*JobMutation)

// newJobMutation creates new mutation for the Job entity.
func newJobMutation(c config, op Op, opts ...jobOption) *JobMutation {
	m := &JobMutation{
		config:        c,
		op:            op,
		typ:           TypeJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJobID sets the ID field of the mutation.
func withJobID(id uuid.UUID) jobOption {
	return func(m *JobMutation) {
		var (
			err   error
			once  sync.Once
			value *Job
		)
		m.oldValue = func(ctx context.Context) (*Job, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Job.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJob sets the old Job of the mutation.
func withJob(node *Job) jobOption {
	return func(m *JobMutation) {
		m.oldValue = func(context.Context) (*Job, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Job entities.
func (m *JobMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JobMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *JobMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Job.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreated sets the "created" field.
func (m *JobMutation) SetCreated(t time.Time) {
	m.created = &t
}

// Created returns the value of the "created" field in the mutation.
func (m *JobMutation) Created() (r time.Time, exists bool) {
	v := m.created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "created" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldCreated(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// ResetCreated resets all changes to the "created" field.
func (m *JobMutation) ResetCreated() {
	m.created = nil
}

// SetDue sets the "due" field.
func (m *JobMutation) SetDue(t time.Time) {
	m.due = &t
}

// Due returns the value of the "due" field in the mutation.
func (m *JobMutation) Due() (r time.Time, exists bool) {
	v := m.due
	if v == nil {
		return
	}
	return *v, true
}

// OldDue returns the old "due" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldDue(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDue: %w", err)
	}
	return oldValue.Due, nil
}

// ResetDue resets all changes to the "due" field.
func (m *JobMutation) ResetDue() {
	m.due = nil
}

// SetOriginallyDue sets the "originallyDue" field.
func (m *JobMutation) SetOriginallyDue(t time.Time) {
	m.originallyDue = &t
}

// OriginallyDue returns the value of the "originallyDue" field in the mutation.
func (m *JobMutation) OriginallyDue() (r time.Time, exists bool) {
	v := m.originallyDue
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginallyDue returns the old "originallyDue" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldOriginallyDue(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginallyDue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginallyDue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginallyDue: %w", err)
	}
	return oldValue.OriginallyDue, nil
}

// ResetOriginallyDue resets all changes to the "originallyDue" field.
func (m *JobMutation) ResetOriginallyDue() {
	m.originallyDue = nil
}

// SetStarted sets the "started" field.
func (m *JobMutation) SetStarted(t time.Time) {
	m.started = &t
}

// Started returns the value of the "started" field in the mutation.
func (m *JobMutation) Started() (r time.Time, exists bool) {
	v := m.started
	if v == nil {
		return
	}
	return *v, true
}

// OldStarted returns the old "started" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldStarted(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStarted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStarted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStarted: %w", err)
	}
	return oldValue.Started, nil
}

// ClearStarted clears the value of the "started" field.
func (m *JobMutation) ClearStarted() {
	m.started = nil
	m.clearedFields[job.FieldStarted] = struct{}{}
}

// StartedCleared returns if the "started" field was cleared in this mutation.
func (m *JobMutation) StartedCleared() bool {
	_, ok := m.clearedFields[job.FieldStarted]
	return ok
}

// ResetStarted resets all changes to the "started" field.
func (m *JobMutation) ResetStarted() {
	m.started = nil
	delete(m.clearedFields, job.FieldStarted)
}

// SetType sets the "type" field.
func (m *JobMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *JobMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *JobMutation) ResetType() {
	m._type = nil
}

// SetVersion sets the "version" field.
func (m *JobMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *JobMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *JobMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *JobMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *JobMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetPriority sets the "priority" field.
func (m *JobMutation) SetPriority(i int8) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *JobMutation) Priority() (r int8, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldPriority(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *JobMutation) AddPriority(i int8) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *JobMutation) AddedPriority() (r int8, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *JobMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetWeight sets the "weight" field.
func (m *JobMutation) SetWeight(i int) {
	m.weight = &i
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *JobMutation) Weight() (r int, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldWeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds i to the "weight" field.
func (m *JobMutation) AddWeight(i int) {
	if m.addweight != nil {
		*m.addweight += i
	} else {
		m.addweight = &i
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *JobMutation) AddedWeight() (r int, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *JobMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetBody sets the "body" field.
func (m *JobMutation) SetBody(jm json.RawMessage) {
	m.body = &jm
	m.appendbody = nil
}

// Body returns the value of the "body" field in the mutation.
func (m *JobMutation) Body() (r json.RawMessage, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldBody(ctx context.Context) (v json.RawMessage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// AppendBody adds jm to the "body" field.
func (m *JobMutation) AppendBody(jm json.RawMessage) {
	m.appendbody = append(m.appendbody, jm...)
}

// AppendedBody returns the list of values that were appended to the "body" field in this mutation.
func (m *JobMutation) AppendedBody() (json.RawMessage, bool) {
	if len(m.appendbody) == 0 {
		return nil, false
	}
	return m.appendbody, true
}

// ResetBody resets all changes to the "body" field.
func (m *JobMutation) ResetBody() {
	m.body = nil
	m.appendbody = nil
}

// SetStatus sets the "status" field.
func (m *JobMutation) SetStatus(j job.Status) {
	m.status = &j
}

// Status returns the value of the "status" field in the mutation.
func (m *JobMutation) Status() (r job.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldStatus(ctx context.Context) (v job.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *JobMutation) ResetStatus() {
	m.status = nil
}

// SetRetries sets the "retries" field.
func (m *JobMutation) SetRetries(i int) {
	m.retries = &i
	m.addretries = nil
}

// Retries returns the value of the "retries" field in the mutation.
func (m *JobMutation) Retries() (r int, exists bool) {
	v := m.retries
	if v == nil {
		return
	}
	return *v, true
}

// OldRetries returns the old "retries" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldRetries(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetries is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetries requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetries: %w", err)
	}
	return oldValue.Retries, nil
}

// AddRetries adds i to the "retries" field.
func (m *JobMutation) AddRetries(i int) {
	if m.addretries != nil {
		*m.addretries += i
	} else {
		m.addretries = &i
	}
}

// AddedRetries returns the value that was added to the "retries" field in this mutation.
func (m *JobMutation) AddedRetries() (r int, exists bool) {
	v := m.addretries
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetries resets all changes to the "retries" field.
func (m *JobMutation) ResetRetries() {
	m.retries = nil
	m.addretries = nil
}

// SetRetriedFraction sets the "retriedFraction" field.
func (m *JobMutation) SetRetriedFraction(f float64) {
	m.retriedFraction = &f
	m.addretriedFraction = nil
}

// RetriedFraction returns the value of the "retriedFraction" field in the mutation.
func (m *JobMutation) RetriedFraction() (r float64, exists bool) {
	v := m.retriedFraction
	if v == nil {
		return
	}
	return *v, true
}

// OldRetriedFraction returns the old "retriedFraction" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldRetriedFraction(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetriedFraction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetriedFraction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetriedFraction: %w", err)
	}
	return oldValue.RetriedFraction, nil
}

// AddRetriedFraction adds f to the "retriedFraction" field.
func (m *JobMutation) AddRetriedFraction(f float64) {
	if m.addretriedFraction != nil {
		*m.addretriedFraction += f
	} else {
		m.addretriedFraction = &f
	}
}

// AddedRetriedFraction returns the value that was added to the "retriedFraction" field in this mutation.
func (m *JobMutation) AddedRetriedFraction() (r float64, exists bool) {
	v := m.addretriedFraction
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetriedFraction resets all changes to the "retriedFraction" field.
func (m *JobMutation) ResetRetriedFraction() {
	m.retriedFraction = nil
	m.addretriedFraction = nil
}

// SetLoggedStallWarning sets the "loggedStallWarning" field.
func (m *JobMutation) SetLoggedStallWarning(b bool) {
	m.loggedStallWarning = &b
}

// LoggedStallWarning returns the value of the "loggedStallWarning" field in the mutation.
func (m *JobMutation) LoggedStallWarning() (r bool, exists bool) {
	v := m.loggedStallWarning
	if v == nil {
		return
	}
	return *v, true
}

// OldLoggedStallWarning returns the old "loggedStallWarning" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldLoggedStallWarning(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoggedStallWarning is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoggedStallWarning requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoggedStallWarning: %w", err)
	}
	return oldValue.LoggedStallWarning, nil
}

// ResetLoggedStallWarning resets all changes to the "loggedStallWarning" field.
func (m *JobMutation) ResetLoggedStallWarning() {
	m.loggedStallWarning = nil
}

// Where appends a list predicates to the JobMutation builder.
func (m *JobMutation) Where(ps ...predicate.Job) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the JobMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *JobMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Job, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *JobMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *JobMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Job).
func (m *JobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JobMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created != nil {
		fields = append(fields, job.FieldCreated)
	}
	if m.due != nil {
		fields = append(fields, job.FieldDue)
	}
	if m.originallyDue != nil {
		fields = append(fields, job.FieldOriginallyDue)
	}
	if m.started != nil {
		fields = append(fields, job.FieldStarted)
	}
	if m._type != nil {
		fields = append(fields, job.FieldType)
	}
	if m.version != nil {
		fields = append(fields, job.FieldVersion)
	}
	if m.priority != nil {
		fields = append(fields, job.FieldPriority)
	}
	if m.weight != nil {
		fields = append(fields, job.FieldWeight)
	}
	if m.body != nil {
		fields = append(fields, job.FieldBody)
	}
	if m.status != nil {
		fields = append(fields, job.FieldStatus)
	}
	if m.retries != nil {
		fields = append(fields, job.FieldRetries)
	}
	if m.retriedFraction != nil {
		fields = append(fields, job.FieldRetriedFraction)
	}
	if m.loggedStallWarning != nil {
		fields = append(fields, job.FieldLoggedStallWarning)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case job.FieldCreated:
		return m.Created()
	case job.FieldDue:
		return m.Due()
	case job.FieldOriginallyDue:
		return m.OriginallyDue()
	case job.FieldStarted:
		return m.Started()
	case job.FieldType:
		return m.GetType()
	case job.FieldVersion:
		return m.Version()
	case job.FieldPriority:
		return m.Priority()
	case job.FieldWeight:
		return m.Weight()
	case job.FieldBody:
		return m.Body()
	case job.FieldStatus:
		return m.Status()
	case job.FieldRetries:
		return m.Retries()
	case job.FieldRetriedFraction:
		return m.RetriedFraction()
	case job.FieldLoggedStallWarning:
		return m.LoggedStallWarning()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case job.FieldCreated:
		return m.OldCreated(ctx)
	case job.FieldDue:
		return m.OldDue(ctx)
	case job.FieldOriginallyDue:
		return m.OldOriginallyDue(ctx)
	case job.FieldStarted:
		return m.OldStarted(ctx)
	case job.FieldType:
		return m.OldType(ctx)
	case job.FieldVersion:
		return m.OldVersion(ctx)
	case job.FieldPriority:
		return m.OldPriority(ctx)
	case job.FieldWeight:
		return m.OldWeight(ctx)
	case job.FieldBody:
		return m.OldBody(ctx)
	case job.FieldStatus:
		return m.OldStatus(ctx)
	case job.FieldRetries:
		return m.OldRetries(ctx)
	case job.FieldRetriedFraction:
		return m.OldRetriedFraction(ctx)
	case job.FieldLoggedStallWarning:
		return m.OldLoggedStallWarning(ctx)
	}
	return nil, fmt.Errorf("unknown Job field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case job.FieldCreated:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case job.FieldDue:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDue(v)
		return nil
	case job.FieldOriginallyDue:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginallyDue(v)
		return nil
	case job.FieldStarted:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStarted(v)
		return nil
	case job.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case job.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case job.FieldPriority:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case job.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case job.FieldBody:
		v, ok := value.(json.RawMessage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case job.FieldStatus:
		v, ok := value.(job.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case job.FieldRetries:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetries(v)
		return nil
	case job.FieldRetriedFraction:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetriedFraction(v)
		return nil
	case job.FieldLoggedStallWarning:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoggedStallWarning(v)
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JobMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, job.FieldVersion)
	}
	if m.addpriority != nil {
		fields = append(fields, job.FieldPriority)
	}
	if m.addweight != nil {
		fields = append(fields, job.FieldWeight)
	}
	if m.addretries != nil {
		fields = append(fields, job.FieldRetries)
	}
	if m.addretriedFraction != nil {
		fields = append(fields, job.FieldRetriedFraction)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JobMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case job.FieldVersion:
		return m.AddedVersion()
	case job.FieldPriority:
		return m.AddedPriority()
	case job.FieldWeight:
		return m.AddedWeight()
	case job.FieldRetries:
		return m.AddedRetries()
	case job.FieldRetriedFraction:
		return m.AddedRetriedFraction()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobMutation) AddField(name string, value ent.Value) error {
	switch name {
	case job.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	case job.FieldPriority:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	case job.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case job.FieldRetries:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetries(v)
		return nil
	case job.FieldRetriedFraction:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetriedFraction(v)
		return nil
	}
	return fmt.Errorf("unknown Job numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JobMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(job.FieldStarted) {
		fields = append(fields, job.FieldStarted)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JobMutation) ClearField(name string) error {
	switch name {
	case job.FieldStarted:
		m.ClearStarted()
		return nil
	}
	return fmt.Errorf("unknown Job nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JobMutation) ResetField(name string) error {
	switch name {
	case job.FieldCreated:
		m.ResetCreated()
		return nil
	case job.FieldDue:
		m.ResetDue()
		return nil
	case job.FieldOriginallyDue:
		m.ResetOriginallyDue()
		return nil
	case job.FieldStarted:
		m.ResetStarted()
		return nil
	case job.FieldType:
		m.ResetType()
		return nil
	case job.FieldVersion:
		m.ResetVersion()
		return nil
	case job.FieldPriority:
		m.ResetPriority()
		return nil
	case job.FieldWeight:
		m.ResetWeight()
		return nil
	case job.FieldBody:
		m.ResetBody()
		return nil
	case job.FieldStatus:
		m.ResetStatus()
		return nil
	case job.FieldRetries:
		m.ResetRetries()
		return nil
	case job.FieldRetriedFraction:
		m.ResetRetriedFraction()
		return nil
	case job.FieldLoggedStallWarning:
		m.ResetLoggedStallWarning()
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JobMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JobMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JobMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JobMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JobMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Job unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JobMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Job edge %s", name)
}

// KeyValueMutation represents an operation that mutates the KeyValue nodes in the graph.
type KeyValueMutation struct {
	config
	op            Op
	typ           string
	id            *int
	key           *string
	value         *json.RawMessage
	appendvalue   json.RawMessage
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*KeyValue, error)
	predicates    []predicate.KeyValue
}

var _ ent.Mutation = (*KeyValueMutation)(nil)

// keyvalueOption allows management of the mutation configuration using functional options.
type keyvalueOption func(*KeyValueMutation)

// newKeyValueMutation creates new mutation for the KeyValue entity.
func newKeyValueMutation(c config, op Op, opts ...keyvalueOption) *KeyValueMutation {
	m := &KeyValueMutation{
		config:        c,
		op:            op,
		typ:           TypeKeyValue,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKeyValueID sets the ID field of the mutation.
func withKeyValueID(id int) keyvalueOption {
	return func(m *KeyValueMutation) {
		var (
			err   error
			once  sync.Once
			value *KeyValue
		)
		m.oldValue = func(ctx context.Context) (*KeyValue, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().KeyValue.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKeyValue sets the old KeyValue of the mutation.
func withKeyValue(node *KeyValue) keyvalueOption {
	return func(m *KeyValueMutation) {
		m.oldValue = func(context.Context) (*KeyValue, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KeyValueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KeyValueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KeyValueMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KeyValueMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().KeyValue.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *KeyValueMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *KeyValueMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the KeyValue entity.
// If the KeyValue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeyValueMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *KeyValueMutation) ResetKey() {
	m.key = nil
}

// SetValue sets the "value" field.
func (m *KeyValueMutation) SetValue(jm json.RawMessage) {
	m.value = &jm
	m.appendvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *KeyValueMutation) Value() (r json.RawMessage, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the KeyValue entity.
// If the KeyValue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeyValueMutation) OldValue(ctx context.Context) (v json.RawMessage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AppendValue adds jm to the "value" field.
func (m *KeyValueMutation) AppendValue(jm json.RawMessage) {
	m.appendvalue = append(m.appendvalue, jm...)
}

// AppendedValue returns the list of values that were appended to the "value" field in this mutation.
func (m *KeyValueMutation) AppendedValue() (json.RawMessage, bool) {
	if len(m.appendvalue) == 0 {
		return nil, false
	}
	return m.appendvalue, true
}

// ResetValue resets all changes to the "value" field.
func (m *KeyValueMutation) ResetValue() {
	m.value = nil
	m.appendvalue = nil
}

// Where appends a list predicates to the KeyValueMutation builder.
func (m *KeyValueMutation) Where(ps ...predicate.KeyValue) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the KeyValueMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *KeyValueMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.KeyValue, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *KeyValueMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *KeyValueMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (KeyValue).
func (m *KeyValueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KeyValueMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.key != nil {
		fields = append(fields, keyvalue.FieldKey)
	}
	if m.value != nil {
		fields = append(fields, keyvalue.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KeyValueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case keyvalue.FieldKey:
		return m.Key()
	case keyvalue.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KeyValueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case keyvalue.FieldKey:
		return m.OldKey(ctx)
	case keyvalue.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown KeyValue field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeyValueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case keyvalue.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case keyvalue.FieldValue:
		v, ok := value.(json.RawMessage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown KeyValue field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KeyValueMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KeyValueMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeyValueMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown KeyValue numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KeyValueMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KeyValueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KeyValueMutation) ClearField(name string) error {
	return fmt.Errorf("unknown KeyValue nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KeyValueMutation) ResetField(name string) error {
	switch name {
	case keyvalue.FieldKey:
		m.ResetKey()
		return nil
	case keyvalue.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown KeyValue field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KeyValueMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KeyValueMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KeyValueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KeyValueMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KeyValueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KeyValueMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KeyValueMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown KeyValue unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KeyValueMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown KeyValue edge %s", name)
}

// LogEntryMutation represents an operation that mutates the LogEntry nodes in the graph.
type LogEntryMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	time           *time.Time
	timeKnown      *bool
	level          *int
	addlevel       *int
	message        *string
	attributes     *map[string]interface{}
	sourceFile     *string
	sourceFunction *string
	sourceLine     *int
	addsourceLine  *int
	publicMessage  *string
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*LogEntry, error)
	predicates     []predicate.LogEntry
}

var _ ent.Mutation = (*LogEntryMutation)(nil)

// logentryOption allows management of the mutation configuration using functional options.
type logentryOption func(*LogEntryMutation)

// newLogEntryMutation creates new mutation for the LogEntry entity.
func newLogEntryMutation(c config, op Op, opts ...logentryOption) *LogEntryMutation {
	m := &LogEntryMutation{
		config:        c,
		op:            op,
		typ:           TypeLogEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLogEntryID sets the ID field of the mutation.
func withLogEntryID(id uuid.UUID) logentryOption {
	return func(m *LogEntryMutation) {
		var (
			err   error
			once  sync.Once
			value *LogEntry
		)
		m.oldValue = func(ctx context.Context) (*LogEntry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LogEntry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLogEntry sets the old LogEntry of the mutation.
func withLogEntry(node *LogEntry) logentryOption {
	return func(m *LogEntryMutation) {
		m.oldValue = func(context.Context) (*LogEntry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LogEntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LogEntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LogEntry entities.
func (m *LogEntryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LogEntryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LogEntryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LogEntry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTime sets the "time" field.
func (m *LogEntryMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *LogEntryMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *LogEntryMutation) ResetTime() {
	m.time = nil
}

// SetTimeKnown sets the "timeKnown" field.
func (m *LogEntryMutation) SetTimeKnown(b bool) {
	m.timeKnown = &b
}

// TimeKnown returns the value of the "timeKnown" field in the mutation.
func (m *LogEntryMutation) TimeKnown() (r bool, exists bool) {
	v := m.timeKnown
	if v == nil {
		return
	}
	return *v, true
}

// OldTimeKnown returns the old "timeKnown" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldTimeKnown(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimeKnown is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimeKnown requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimeKnown: %w", err)
	}
	return oldValue.TimeKnown, nil
}

// ResetTimeKnown resets all changes to the "timeKnown" field.
func (m *LogEntryMutation) ResetTimeKnown() {
	m.timeKnown = nil
}

// SetLevel sets the "level" field.
func (m *LogEntryMutation) SetLevel(i int) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *LogEntryMutation) Level() (r int, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldLevel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *LogEntryMutation) AddLevel(i int) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *LogEntryMutation) AddedLevel() (r int, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *LogEntryMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetMessage sets the "message" field.
func (m *LogEntryMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *LogEntryMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *LogEntryMutation) ResetMessage() {
	m.message = nil
}

// SetAttributes sets the "attributes" field.
func (m *LogEntryMutation) SetAttributes(value map[string]interface{}) {
	m.attributes = &value
}

// Attributes returns the value of the "attributes" field in the mutation.
func (m *LogEntryMutation) Attributes() (r map[string]interface{}, exists bool) {
	v := m.attributes
	if v == nil {
		return
	}
	return *v, true
}

// OldAttributes returns the old "attributes" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldAttributes(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttributes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttributes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttributes: %w", err)
	}
	return oldValue.Attributes, nil
}

// ResetAttributes resets all changes to the "attributes" field.
func (m *LogEntryMutation) ResetAttributes() {
	m.attributes = nil
}

// SetSourceFile sets the "sourceFile" field.
func (m *LogEntryMutation) SetSourceFile(s string) {
	m.sourceFile = &s
}

// SourceFile returns the value of the "sourceFile" field in the mutation.
func (m *LogEntryMutation) SourceFile() (r string, exists bool) {
	v := m.sourceFile
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceFile returns the old "sourceFile" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldSourceFile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceFile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceFile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceFile: %w", err)
	}
	return oldValue.SourceFile, nil
}

// ResetSourceFile resets all changes to the "sourceFile" field.
func (m *LogEntryMutation) ResetSourceFile() {
	m.sourceFile = nil
}

// SetSourceFunction sets the "sourceFunction" field.
func (m *LogEntryMutation) SetSourceFunction(s string) {
	m.sourceFunction = &s
}

// SourceFunction returns the value of the "sourceFunction" field in the mutation.
func (m *LogEntryMutation) SourceFunction() (r string, exists bool) {
	v := m.sourceFunction
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceFunction returns the old "sourceFunction" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldSourceFunction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceFunction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceFunction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceFunction: %w", err)
	}
	return oldValue.SourceFunction, nil
}

// ResetSourceFunction resets all changes to the "sourceFunction" field.
func (m *LogEntryMutation) ResetSourceFunction() {
	m.sourceFunction = nil
}

// SetSourceLine sets the "sourceLine" field.
func (m *LogEntryMutation) SetSourceLine(i int) {
	m.sourceLine = &i
	m.addsourceLine = nil
}

// SourceLine returns the value of the "sourceLine" field in the mutation.
func (m *LogEntryMutation) SourceLine() (r int, exists bool) {
	v := m.sourceLine
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceLine returns the old "sourceLine" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldSourceLine(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceLine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceLine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceLine: %w", err)
	}
	return oldValue.SourceLine, nil
}

// AddSourceLine adds i to the "sourceLine" field.
func (m *LogEntryMutation) AddSourceLine(i int) {
	if m.addsourceLine != nil {
		*m.addsourceLine += i
	} else {
		m.addsourceLine = &i
	}
}

// AddedSourceLine returns the value that was added to the "sourceLine" field in this mutation.
func (m *LogEntryMutation) AddedSourceLine() (r int, exists bool) {
	v := m.addsourceLine
	if v == nil {
		return
	}
	return *v, true
}

// ResetSourceLine resets all changes to the "sourceLine" field.
func (m *LogEntryMutation) ResetSourceLine() {
	m.sourceLine = nil
	m.addsourceLine = nil
}

// SetPublicMessage sets the "publicMessage" field.
func (m *LogEntryMutation) SetPublicMessage(s string) {
	m.publicMessage = &s
}

// PublicMessage returns the value of the "publicMessage" field in the mutation.
func (m *LogEntryMutation) PublicMessage() (r string, exists bool) {
	v := m.publicMessage
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicMessage returns the old "publicMessage" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldPublicMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicMessage: %w", err)
	}
	return oldValue.PublicMessage, nil
}

// ResetPublicMessage resets all changes to the "publicMessage" field.
func (m *LogEntryMutation) ResetPublicMessage() {
	m.publicMessage = nil
}

// SetUserID sets the "userID" field.
func (m *LogEntryMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "userID" field in the mutation.
func (m *LogEntryMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "userID" field's value of the LogEntry entity.
// If the LogEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LogEntryMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "userID" field.
func (m *LogEntryMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[logentry.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "userID" field was cleared in this mutation.
func (m *LogEntryMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[logentry.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "userID" field.
func (m *LogEntryMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, logentry.FieldUserID)
}

// ClearUser clears the "user" edge to the User entity.
func (m *LogEntryMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[logentry.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *LogEntryMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LogEntryMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LogEntryMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the LogEntryMutation builder.
func (m *LogEntryMutation) Where(ps ...predicate.LogEntry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LogEntryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LogEntryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LogEntry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LogEntryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LogEntryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LogEntry).
func (m *LogEntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LogEntryMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.time != nil {
		fields = append(fields, logentry.FieldTime)
	}
	if m.timeKnown != nil {
		fields = append(fields, logentry.FieldTimeKnown)
	}
	if m.level != nil {
		fields = append(fields, logentry.FieldLevel)
	}
	if m.message != nil {
		fields = append(fields, logentry.FieldMessage)
	}
	if m.attributes != nil {
		fields = append(fields, logentry.FieldAttributes)
	}
	if m.sourceFile != nil {
		fields = append(fields, logentry.FieldSourceFile)
	}
	if m.sourceFunction != nil {
		fields = append(fields, logentry.FieldSourceFunction)
	}
	if m.sourceLine != nil {
		fields = append(fields, logentry.FieldSourceLine)
	}
	if m.publicMessage != nil {
		fields = append(fields, logentry.FieldPublicMessage)
	}
	if m.user != nil {
		fields = append(fields, logentry.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LogEntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case logentry.FieldTime:
		return m.Time()
	case logentry.FieldTimeKnown:
		return m.TimeKnown()
	case logentry.FieldLevel:
		return m.Level()
	case logentry.FieldMessage:
		return m.Message()
	case logentry.FieldAttributes:
		return m.Attributes()
	case logentry.FieldSourceFile:
		return m.SourceFile()
	case logentry.FieldSourceFunction:
		return m.SourceFunction()
	case logentry.FieldSourceLine:
		return m.SourceLine()
	case logentry.FieldPublicMessage:
		return m.PublicMessage()
	case logentry.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LogEntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case logentry.FieldTime:
		return m.OldTime(ctx)
	case logentry.FieldTimeKnown:
		return m.OldTimeKnown(ctx)
	case logentry.FieldLevel:
		return m.OldLevel(ctx)
	case logentry.FieldMessage:
		return m.OldMessage(ctx)
	case logentry.FieldAttributes:
		return m.OldAttributes(ctx)
	case logentry.FieldSourceFile:
		return m.OldSourceFile(ctx)
	case logentry.FieldSourceFunction:
		return m.OldSourceFunction(ctx)
	case logentry.FieldSourceLine:
		return m.OldSourceLine(ctx)
	case logentry.FieldPublicMessage:
		return m.OldPublicMessage(ctx)
	case logentry.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown LogEntry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LogEntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case logentry.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case logentry.FieldTimeKnown:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimeKnown(v)
		return nil
	case logentry.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case logentry.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case logentry.FieldAttributes:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttributes(v)
		return nil
	case logentry.FieldSourceFile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceFile(v)
		return nil
	case logentry.FieldSourceFunction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceFunction(v)
		return nil
	case logentry.FieldSourceLine:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceLine(v)
		return nil
	case logentry.FieldPublicMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicMessage(v)
		return nil
	case logentry.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown LogEntry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LogEntryMutation) AddedFields() []string {
	var fields []string
	if m.addlevel != nil {
		fields = append(fields, logentry.FieldLevel)
	}
	if m.addsourceLine != nil {
		fields = append(fields, logentry.FieldSourceLine)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LogEntryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case logentry.FieldLevel:
		return m.AddedLevel()
	case logentry.FieldSourceLine:
		return m.AddedSourceLine()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LogEntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case logentry.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	case logentry.FieldSourceLine:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSourceLine(v)
		return nil
	}
	return fmt.Errorf("unknown LogEntry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LogEntryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(logentry.FieldUserID) {
		fields = append(fields, logentry.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LogEntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LogEntryMutation) ClearField(name string) error {
	switch name {
	case logentry.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown LogEntry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LogEntryMutation) ResetField(name string) error {
	switch name {
	case logentry.FieldTime:
		m.ResetTime()
		return nil
	case logentry.FieldTimeKnown:
		m.ResetTimeKnown()
		return nil
	case logentry.FieldLevel:
		m.ResetLevel()
		return nil
	case logentry.FieldMessage:
		m.ResetMessage()
		return nil
	case logentry.FieldAttributes:
		m.ResetAttributes()
		return nil
	case logentry.FieldSourceFile:
		m.ResetSourceFile()
		return nil
	case logentry.FieldSourceFunction:
		m.ResetSourceFunction()
		return nil
	case logentry.FieldSourceLine:
		m.ResetSourceLine()
		return nil
	case logentry.FieldPublicMessage:
		m.ResetPublicMessage()
		return nil
	case logentry.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown LogEntry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LogEntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, logentry.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LogEntryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case logentry.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LogEntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LogEntryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LogEntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, logentry.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LogEntryMutation) EdgeCleared(name string) bool {
	switch name {
	case logentry.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LogEntryMutation) ClearEdge(name string) error {
	switch name {
	case logentry.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown LogEntry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LogEntryMutation) ResetEdge(name string) error {
	switch name {
	case logentry.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown LogEntry edge %s", name)
}

// PeriodicTaskMutation represents an operation that mutates the PeriodicTask nodes in the graph.
type PeriodicTaskMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	lastRan       *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PeriodicTask, error)
	predicates    []predicate.PeriodicTask
}

var _ ent.Mutation = (*PeriodicTaskMutation)(nil)

// periodictaskOption allows management of the mutation configuration using functional options.
type periodictaskOption func(*PeriodicTaskMutation)

// newPeriodicTaskMutation creates new mutation for the PeriodicTask entity.
func newPeriodicTaskMutation(c config, op Op, opts ...periodictaskOption) *PeriodicTaskMutation {
	m := &PeriodicTaskMutation{
		config:        c,
		op:            op,
		typ:           TypePeriodicTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPeriodicTaskID sets the ID field of the mutation.
func withPeriodicTaskID(id int) periodictaskOption {
	return func(m *PeriodicTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *PeriodicTask
		)
		m.oldValue = func(ctx context.Context) (*PeriodicTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PeriodicTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPeriodicTask sets the old PeriodicTask of the mutation.
func withPeriodicTask(node *PeriodicTask) periodictaskOption {
	return func(m *PeriodicTaskMutation) {
		m.oldValue = func(context.Context) (*PeriodicTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PeriodicTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PeriodicTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PeriodicTaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PeriodicTaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PeriodicTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PeriodicTaskMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PeriodicTaskMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the PeriodicTask entity.
// If the PeriodicTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PeriodicTaskMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PeriodicTaskMutation) ResetName() {
	m.name = nil
}

// SetLastRan sets the "lastRan" field.
func (m *PeriodicTaskMutation) SetLastRan(t time.Time) {
	m.lastRan = &t
}

// LastRan returns the value of the "lastRan" field in the mutation.
func (m *PeriodicTaskMutation) LastRan() (r time.Time, exists bool) {
	v := m.lastRan
	if v == nil {
		return
	}
	return *v, true
}

// OldLastRan returns the old "lastRan" field's value of the PeriodicTask entity.
// If the PeriodicTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PeriodicTaskMutation) OldLastRan(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastRan is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastRan requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastRan: %w", err)
	}
	return oldValue.LastRan, nil
}

// ClearLastRan clears the value of the "lastRan" field.
func (m *PeriodicTaskMutation) ClearLastRan() {
	m.lastRan = nil
	m.clearedFields[periodictask.FieldLastRan] = struct{}{}
}

// LastRanCleared returns if the "lastRan" field was cleared in this mutation.
func (m *PeriodicTaskMutation) LastRanCleared() bool {
	_, ok := m.clearedFields[periodictask.FieldLastRan]
	return ok
}

// ResetLastRan resets all changes to the "lastRan" field.
func (m *PeriodicTaskMutation) ResetLastRan() {
	m.lastRan = nil
	delete(m.clearedFields, periodictask.FieldLastRan)
}

// Where appends a list predicates to the PeriodicTaskMutation builder.
func (m *PeriodicTaskMutation) Where(ps ...predicate.PeriodicTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PeriodicTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PeriodicTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PeriodicTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PeriodicTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PeriodicTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PeriodicTask).
func (m *PeriodicTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PeriodicTaskMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, periodictask.FieldName)
	}
	if m.lastRan != nil {
		fields = append(fields, periodictask.FieldLastRan)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PeriodicTaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case periodictask.FieldName:
		return m.Name()
	case periodictask.FieldLastRan:
		return m.LastRan()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PeriodicTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case periodictask.FieldName:
		return m.OldName(ctx)
	case periodictask.FieldLastRan:
		return m.OldLastRan(ctx)
	}
	return nil, fmt.Errorf("unknown PeriodicTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PeriodicTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case periodictask.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case periodictask.FieldLastRan:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastRan(v)
		return nil
	}
	return fmt.Errorf("unknown PeriodicTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PeriodicTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PeriodicTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PeriodicTaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PeriodicTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PeriodicTaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(periodictask.FieldLastRan) {
		fields = append(fields, periodictask.FieldLastRan)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PeriodicTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PeriodicTaskMutation) ClearField(name string) error {
	switch name {
	case periodictask.FieldLastRan:
		m.ClearLastRan()
		return nil
	}
	return fmt.Errorf("unknown PeriodicTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PeriodicTaskMutation) ResetField(name string) error {
	switch name {
	case periodictask.FieldName:
		m.ResetName()
		return nil
	case periodictask.FieldLastRan:
		m.ResetLastRan()
		return nil
	}
	return fmt.Errorf("unknown PeriodicTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PeriodicTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PeriodicTaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PeriodicTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PeriodicTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PeriodicTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PeriodicTaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PeriodicTaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PeriodicTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PeriodicTaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PeriodicTask edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	time          *time.Time
	code          *[]byte
	validFrom     *time.Time
	validUntil    *time.Time
	userAgent     *string
	ip            *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Session, error)
	predicates    []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTime sets the "time" field.
func (m *SessionMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *SessionMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *SessionMutation) ResetTime() {
	m.time = nil
}

// SetCode sets the "code" field.
func (m *SessionMutation) SetCode(b []byte) {
	m.code = &b
}

// Code returns the value of the "code" field in the mutation.
func (m *SessionMutation) Code() (r []byte, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCode(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *SessionMutation) ResetCode() {
	m.code = nil
}

// SetValidFrom sets the "validFrom" field.
func (m *SessionMutation) SetValidFrom(t time.Time) {
	m.validFrom = &t
}

// ValidFrom returns the value of the "validFrom" field in the mutation.
func (m *SessionMutation) ValidFrom() (r time.Time, exists bool) {
	v := m.validFrom
	if v == nil {
		return
	}
	return *v, true
}

// OldValidFrom returns the old "validFrom" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldValidFrom(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidFrom: %w", err)
	}
	return oldValue.ValidFrom, nil
}

// ResetValidFrom resets all changes to the "validFrom" field.
func (m *SessionMutation) ResetValidFrom() {
	m.validFrom = nil
}

// SetValidUntil sets the "validUntil" field.
func (m *SessionMutation) SetValidUntil(t time.Time) {
	m.validUntil = &t
}

// ValidUntil returns the value of the "validUntil" field in the mutation.
func (m *SessionMutation) ValidUntil() (r time.Time, exists bool) {
	v := m.validUntil
	if v == nil {
		return
	}
	return *v, true
}

// OldValidUntil returns the old "validUntil" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldValidUntil(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValidUntil is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValidUntil requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValidUntil: %w", err)
	}
	return oldValue.ValidUntil, nil
}

// ResetValidUntil resets all changes to the "validUntil" field.
func (m *SessionMutation) ResetValidUntil() {
	m.validUntil = nil
}

// SetUserAgent sets the "userAgent" field.
func (m *SessionMutation) SetUserAgent(s string) {
	m.userAgent = &s
}

// UserAgent returns the value of the "userAgent" field in the mutation.
func (m *SessionMutation) UserAgent() (r string, exists bool) {
	v := m.userAgent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "userAgent" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ResetUserAgent resets all changes to the "userAgent" field.
func (m *SessionMutation) ResetUserAgent() {
	m.userAgent = nil
}

// SetIP sets the "ip" field.
func (m *SessionMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *SessionMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *SessionMutation) ResetIP() {
	m.ip = nil
}

// SetUserID sets the "userID" field.
func (m *SessionMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "userID" field in the mutation.
func (m *SessionMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "userID" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "userID" field.
func (m *SessionMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[session.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.time != nil {
		fields = append(fields, session.FieldTime)
	}
	if m.code != nil {
		fields = append(fields, session.FieldCode)
	}
	if m.validFrom != nil {
		fields = append(fields, session.FieldValidFrom)
	}
	if m.validUntil != nil {
		fields = append(fields, session.FieldValidUntil)
	}
	if m.userAgent != nil {
		fields = append(fields, session.FieldUserAgent)
	}
	if m.ip != nil {
		fields = append(fields, session.FieldIP)
	}
	if m.user != nil {
		fields = append(fields, session.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldTime:
		return m.Time()
	case session.FieldCode:
		return m.Code()
	case session.FieldValidFrom:
		return m.ValidFrom()
	case session.FieldValidUntil:
		return m.ValidUntil()
	case session.FieldUserAgent:
		return m.UserAgent()
	case session.FieldIP:
		return m.IP()
	case session.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldTime:
		return m.OldTime(ctx)
	case session.FieldCode:
		return m.OldCode(ctx)
	case session.FieldValidFrom:
		return m.OldValidFrom(ctx)
	case session.FieldValidUntil:
		return m.OldValidUntil(ctx)
	case session.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case session.FieldIP:
		return m.OldIP(ctx)
	case session.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case session.FieldCode:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case session.FieldValidFrom:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidFrom(v)
		return nil
	case session.FieldValidUntil:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValidUntil(v)
		return nil
	case session.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case session.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case session.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldTime:
		m.ResetTime()
		return nil
	case session.FieldCode:
		m.ResetCode()
		return nil
	case session.FieldValidFrom:
		m.ResetValidFrom()
		return nil
	case session.FieldValidUntil:
		m.ResetValidUntil()
		return nil
	case session.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case session.FieldIP:
		m.ResetIP()
		return nil
	case session.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// TwoFactorActionMutation represents an operation that mutates the TwoFactorAction nodes in the graph.
type TwoFactorActionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	_type         *string
	version       *int
	addversion    *int
	body          *json.RawMessage
	appendbody    json.RawMessage
	expiresAt     *time.Time
	code          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TwoFactorAction, error)
	predicates    []predicate.TwoFactorAction
}

var _ ent.Mutation = (*TwoFactorActionMutation)(nil)

// twofactoractionOption allows management of the mutation configuration using functional options.
type twofactoractionOption func(*TwoFactorActionMutation)

// newTwoFactorActionMutation creates new mutation for the TwoFactorAction entity.
func newTwoFactorActionMutation(c config, op Op, opts ...twofactoractionOption) *TwoFactorActionMutation {
	m := &TwoFactorActionMutation{
		config:        c,
		op:            op,
		typ:           TypeTwoFactorAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwoFactorActionID sets the ID field of the mutation.
func withTwoFactorActionID(id uuid.UUID) twofactoractionOption {
	return func(m *TwoFactorActionMutation) {
		var (
			err   error
			once  sync.Once
			value *TwoFactorAction
		)
		m.oldValue = func(ctx context.Context) (*TwoFactorAction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwoFactorAction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwoFactorAction sets the old TwoFactorAction of the mutation.
func withTwoFactorAction(node *TwoFactorAction) twofactoractionOption {
	return func(m *TwoFactorActionMutation) {
		m.oldValue = func(context.Context) (*TwoFactorAction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwoFactorActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwoFactorActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TwoFactorAction entities.
func (m *TwoFactorActionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwoFactorActionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwoFactorActionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwoFactorAction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *TwoFactorActionMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TwoFactorActionMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TwoFactorActionMutation) ResetType() {
	m._type = nil
}

// SetVersion sets the "version" field.
func (m *TwoFactorActionMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *TwoFactorActionMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *TwoFactorActionMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *TwoFactorActionMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *TwoFactorActionMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetBody sets the "body" field.
func (m *TwoFactorActionMutation) SetBody(jm json.RawMessage) {
	m.body = &jm
	m.appendbody = nil
}

// Body returns the value of the "body" field in the mutation.
func (m *TwoFactorActionMutation) Body() (r json.RawMessage, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldBody(ctx context.Context) (v json.RawMessage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// AppendBody adds jm to the "body" field.
func (m *TwoFactorActionMutation) AppendBody(jm json.RawMessage) {
	m.appendbody = append(m.appendbody, jm...)
}

// AppendedBody returns the list of values that were appended to the "body" field in this mutation.
func (m *TwoFactorActionMutation) AppendedBody() (json.RawMessage, bool) {
	if len(m.appendbody) == 0 {
		return nil, false
	}
	return m.appendbody, true
}

// ResetBody resets all changes to the "body" field.
func (m *TwoFactorActionMutation) ResetBody() {
	m.body = nil
	m.appendbody = nil
}

// SetExpiresAt sets the "expiresAt" field.
func (m *TwoFactorActionMutation) SetExpiresAt(t time.Time) {
	m.expiresAt = &t
}

// ExpiresAt returns the value of the "expiresAt" field in the mutation.
func (m *TwoFactorActionMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expiresAt
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expiresAt" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expiresAt" field.
func (m *TwoFactorActionMutation) ResetExpiresAt() {
	m.expiresAt = nil
}

// SetCode sets the "code" field.
func (m *TwoFactorActionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *TwoFactorActionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the TwoFactorAction entity.
// If the TwoFactorAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwoFactorActionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *TwoFactorActionMutation) ResetCode() {
	m.code = nil
}

// Where appends a list predicates to the TwoFactorActionMutation builder.
func (m *TwoFactorActionMutation) Where(ps ...predicate.TwoFactorAction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwoFactorActionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwoFactorActionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwoFactorAction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwoFactorActionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwoFactorActionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwoFactorAction).
func (m *TwoFactorActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwoFactorActionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._type != nil {
		fields = append(fields, twofactoraction.FieldType)
	}
	if m.version != nil {
		fields = append(fields, twofactoraction.FieldVersion)
	}
	if m.body != nil {
		fields = append(fields, twofactoraction.FieldBody)
	}
	if m.expiresAt != nil {
		fields = append(fields, twofactoraction.FieldExpiresAt)
	}
	if m.code != nil {
		fields = append(fields, twofactoraction.FieldCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwoFactorActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twofactoraction.FieldType:
		return m.GetType()
	case twofactoraction.FieldVersion:
		return m.Version()
	case twofactoraction.FieldBody:
		return m.Body()
	case twofactoraction.FieldExpiresAt:
		return m.ExpiresAt()
	case twofactoraction.FieldCode:
		return m.Code()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwoFactorActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twofactoraction.FieldType:
		return m.OldType(ctx)
	case twofactoraction.FieldVersion:
		return m.OldVersion(ctx)
	case twofactoraction.FieldBody:
		return m.OldBody(ctx)
	case twofactoraction.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case twofactoraction.FieldCode:
		return m.OldCode(ctx)
	}
	return nil, fmt.Errorf("unknown TwoFactorAction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwoFactorActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twofactoraction.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case twofactoraction.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case twofactoraction.FieldBody:
		v, ok := value.(json.RawMessage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case twofactoraction.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case twofactoraction.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	}
	return fmt.Errorf("unknown TwoFactorAction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwoFactorActionMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, twofactoraction.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwoFactorActionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case twofactoraction.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwoFactorActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case twofactoraction.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown TwoFactorAction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwoFactorActionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwoFactorActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwoFactorActionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TwoFactorAction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwoFactorActionMutation) ResetField(name string) error {
	switch name {
	case twofactoraction.FieldType:
		m.ResetType()
		return nil
	case twofactoraction.FieldVersion:
		m.ResetVersion()
		return nil
	case twofactoraction.FieldBody:
		m.ResetBody()
		return nil
	case twofactoraction.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case twofactoraction.FieldCode:
		m.ResetCode()
		return nil
	}
	return fmt.Errorf("unknown TwoFactorAction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwoFactorActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwoFactorActionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwoFactorActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwoFactorActionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwoFactorActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwoFactorActionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwoFactorActionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TwoFactorAction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwoFactorActionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TwoFactorAction edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	username        *string
	alertDiscordId  *string
	alertEmail      *string
	locked          *bool
	lockedUntil     *time.Time
	content         *[]byte
	fileName        *string
	mime            *string
	nonce           *[]byte
	keySalt         *[]byte
	hashTime        *uint32
	addhashTime     *int32
	hashMemory      *uint32
	addhashMemory   *int32
	hashThreads     *uint8
	addhashThreads  *int8
	clearedFields   map[string]struct{}
	sessions        map[int]struct{}
	removedsessions map[int]struct{}
	clearedsessions bool
	logs            map[uuid.UUID]struct{}
	removedlogs     map[uuid.UUID]struct{}
	clearedlogs     bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetAlertDiscordId sets the "alertDiscordId" field.
func (m *UserMutation) SetAlertDiscordId(s string) {
	m.alertDiscordId = &s
}

// AlertDiscordId returns the value of the "alertDiscordId" field in the mutation.
func (m *UserMutation) AlertDiscordId() (r string, exists bool) {
	v := m.alertDiscordId
	if v == nil {
		return
	}
	return *v, true
}

// OldAlertDiscordId returns the old "alertDiscordId" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAlertDiscordId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlertDiscordId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlertDiscordId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlertDiscordId: %w", err)
	}
	return oldValue.AlertDiscordId, nil
}

// ResetAlertDiscordId resets all changes to the "alertDiscordId" field.
func (m *UserMutation) ResetAlertDiscordId() {
	m.alertDiscordId = nil
}

// SetAlertEmail sets the "alertEmail" field.
func (m *UserMutation) SetAlertEmail(s string) {
	m.alertEmail = &s
}

// AlertEmail returns the value of the "alertEmail" field in the mutation.
func (m *UserMutation) AlertEmail() (r string, exists bool) {
	v := m.alertEmail
	if v == nil {
		return
	}
	return *v, true
}

// OldAlertEmail returns the old "alertEmail" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAlertEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlertEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlertEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlertEmail: %w", err)
	}
	return oldValue.AlertEmail, nil
}

// ResetAlertEmail resets all changes to the "alertEmail" field.
func (m *UserMutation) ResetAlertEmail() {
	m.alertEmail = nil
}

// SetLocked sets the "locked" field.
func (m *UserMutation) SetLocked(b bool) {
	m.locked = &b
}

// Locked returns the value of the "locked" field in the mutation.
func (m *UserMutation) Locked() (r bool, exists bool) {
	v := m.locked
	if v == nil {
		return
	}
	return *v, true
}

// OldLocked returns the old "locked" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLocked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocked: %w", err)
	}
	return oldValue.Locked, nil
}

// ResetLocked resets all changes to the "locked" field.
func (m *UserMutation) ResetLocked() {
	m.locked = nil
}

// SetLockedUntil sets the "lockedUntil" field.
func (m *UserMutation) SetLockedUntil(t time.Time) {
	m.lockedUntil = &t
}

// LockedUntil returns the value of the "lockedUntil" field in the mutation.
func (m *UserMutation) LockedUntil() (r time.Time, exists bool) {
	v := m.lockedUntil
	if v == nil {
		return
	}
	return *v, true
}

// OldLockedUntil returns the old "lockedUntil" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLockedUntil(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLockedUntil is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLockedUntil requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLockedUntil: %w", err)
	}
	return oldValue.LockedUntil, nil
}

// ClearLockedUntil clears the value of the "lockedUntil" field.
func (m *UserMutation) ClearLockedUntil() {
	m.lockedUntil = nil
	m.clearedFields[user.FieldLockedUntil] = struct{}{}
}

// LockedUntilCleared returns if the "lockedUntil" field was cleared in this mutation.
func (m *UserMutation) LockedUntilCleared() bool {
	_, ok := m.clearedFields[user.FieldLockedUntil]
	return ok
}

// ResetLockedUntil resets all changes to the "lockedUntil" field.
func (m *UserMutation) ResetLockedUntil() {
	m.lockedUntil = nil
	delete(m.clearedFields, user.FieldLockedUntil)
}

// SetContent sets the "content" field.
func (m *UserMutation) SetContent(b []byte) {
	m.content = &b
}

// Content returns the value of the "content" field in the mutation.
func (m *UserMutation) Content() (r []byte, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldContent(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *UserMutation) ResetContent() {
	m.content = nil
}

// SetFileName sets the "fileName" field.
func (m *UserMutation) SetFileName(s string) {
	m.fileName = &s
}

// FileName returns the value of the "fileName" field in the mutation.
func (m *UserMutation) FileName() (r string, exists bool) {
	v := m.fileName
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "fileName" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "fileName" field.
func (m *UserMutation) ResetFileName() {
	m.fileName = nil
}

// SetMime sets the "mime" field.
func (m *UserMutation) SetMime(s string) {
	m.mime = &s
}

// Mime returns the value of the "mime" field in the mutation.
func (m *UserMutation) Mime() (r string, exists bool) {
	v := m.mime
	if v == nil {
		return
	}
	return *v, true
}

// OldMime returns the old "mime" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMime: %w", err)
	}
	return oldValue.Mime, nil
}

// ResetMime resets all changes to the "mime" field.
func (m *UserMutation) ResetMime() {
	m.mime = nil
}

// SetNonce sets the "nonce" field.
func (m *UserMutation) SetNonce(b []byte) {
	m.nonce = &b
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *UserMutation) Nonce() (r []byte, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNonce(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// ResetNonce resets all changes to the "nonce" field.
func (m *UserMutation) ResetNonce() {
	m.nonce = nil
}

// SetKeySalt sets the "keySalt" field.
func (m *UserMutation) SetKeySalt(b []byte) {
	m.keySalt = &b
}

// KeySalt returns the value of the "keySalt" field in the mutation.
func (m *UserMutation) KeySalt() (r []byte, exists bool) {
	v := m.keySalt
	if v == nil {
		return
	}
	return *v, true
}

// OldKeySalt returns the old "keySalt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldKeySalt(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeySalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeySalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeySalt: %w", err)
	}
	return oldValue.KeySalt, nil
}

// ResetKeySalt resets all changes to the "keySalt" field.
func (m *UserMutation) ResetKeySalt() {
	m.keySalt = nil
}

// SetHashTime sets the "hashTime" field.
func (m *UserMutation) SetHashTime(u uint32) {
	m.hashTime = &u
	m.addhashTime = nil
}

// HashTime returns the value of the "hashTime" field in the mutation.
func (m *UserMutation) HashTime() (r uint32, exists bool) {
	v := m.hashTime
	if v == nil {
		return
	}
	return *v, true
}

// OldHashTime returns the old "hashTime" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashTime(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashTime: %w", err)
	}
	return oldValue.HashTime, nil
}

// AddHashTime adds u to the "hashTime" field.
func (m *UserMutation) AddHashTime(u int32) {
	if m.addhashTime != nil {
		*m.addhashTime += u
	} else {
		m.addhashTime = &u
	}
}

// AddedHashTime returns the value that was added to the "hashTime" field in this mutation.
func (m *UserMutation) AddedHashTime() (r int32, exists bool) {
	v := m.addhashTime
	if v == nil {
		return
	}
	return *v, true
}

// ResetHashTime resets all changes to the "hashTime" field.
func (m *UserMutation) ResetHashTime() {
	m.hashTime = nil
	m.addhashTime = nil
}

// SetHashMemory sets the "hashMemory" field.
func (m *UserMutation) SetHashMemory(u uint32) {
	m.hashMemory = &u
	m.addhashMemory = nil
}

// HashMemory returns the value of the "hashMemory" field in the mutation.
func (m *UserMutation) HashMemory() (r uint32, exists bool) {
	v := m.hashMemory
	if v == nil {
		return
	}
	return *v, true
}

// OldHashMemory returns the old "hashMemory" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashMemory(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashMemory: %w", err)
	}
	return oldValue.HashMemory, nil
}

// AddHashMemory adds u to the "hashMemory" field.
func (m *UserMutation) AddHashMemory(u int32) {
	if m.addhashMemory != nil {
		*m.addhashMemory += u
	} else {
		m.addhashMemory = &u
	}
}

// AddedHashMemory returns the value that was added to the "hashMemory" field in this mutation.
func (m *UserMutation) AddedHashMemory() (r int32, exists bool) {
	v := m.addhashMemory
	if v == nil {
		return
	}
	return *v, true
}

// ResetHashMemory resets all changes to the "hashMemory" field.
func (m *UserMutation) ResetHashMemory() {
	m.hashMemory = nil
	m.addhashMemory = nil
}

// SetHashThreads sets the "hashThreads" field.
func (m *UserMutation) SetHashThreads(u uint8) {
	m.hashThreads = &u
	m.addhashThreads = nil
}

// HashThreads returns the value of the "hashThreads" field in the mutation.
func (m *UserMutation) HashThreads() (r uint8, exists bool) {
	v := m.hashThreads
	if v == nil {
		return
	}
	return *v, true
}

// OldHashThreads returns the old "hashThreads" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHashThreads(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashThreads is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashThreads requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashThreads: %w", err)
	}
	return oldValue.HashThreads, nil
}

// AddHashThreads adds u to the "hashThreads" field.
func (m *UserMutation) AddHashThreads(u int8) {
	if m.addhashThreads != nil {
		*m.addhashThreads += u
	} else {
		m.addhashThreads = &u
	}
}

// AddedHashThreads returns the value that was added to the "hashThreads" field in this mutation.
func (m *UserMutation) AddedHashThreads() (r int8, exists bool) {
	v := m.addhashThreads
	if v == nil {
		return
	}
	return *v, true
}

// ResetHashThreads resets all changes to the "hashThreads" field.
func (m *UserMutation) ResetHashThreads() {
	m.hashThreads = nil
	m.addhashThreads = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the Session entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// AddLogIDs adds the "logs" edge to the LogEntry entity by ids.
func (m *UserMutation) AddLogIDs(ids ...uuid.UUID) {
	if m.logs == nil {
		m.logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.logs[ids[i]] = struct{}{}
	}
}

// ClearLogs clears the "logs" edge to the LogEntry entity.
func (m *UserMutation) ClearLogs() {
	m.clearedlogs = true
}

// LogsCleared reports if the "logs" edge to the LogEntry entity was cleared.
func (m *UserMutation) LogsCleared() bool {
	return m.clearedlogs
}

// RemoveLogIDs removes the "logs" edge to the LogEntry entity by IDs.
func (m *UserMutation) RemoveLogIDs(ids ...uuid.UUID) {
	if m.removedlogs == nil {
		m.removedlogs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.logs, ids[i])
		m.removedlogs[ids[i]] = struct{}{}
	}
}

// RemovedLogs returns the removed IDs of the "logs" edge to the LogEntry entity.
func (m *UserMutation) RemovedLogsIDs() (ids []uuid.UUID) {
	for id := range m.removedlogs {
		ids = append(ids, id)
	}
	return
}

// LogsIDs returns the "logs" edge IDs in the mutation.
func (m *UserMutation) LogsIDs() (ids []uuid.UUID) {
	for id := range m.logs {
		ids = append(ids, id)
	}
	return
}

// ResetLogs resets all changes to the "logs" edge.
func (m *UserMutation) ResetLogs() {
	m.logs = nil
	m.clearedlogs = false
	m.removedlogs = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.alertDiscordId != nil {
		fields = append(fields, user.FieldAlertDiscordId)
	}
	if m.alertEmail != nil {
		fields = append(fields, user.FieldAlertEmail)
	}
	if m.locked != nil {
		fields = append(fields, user.FieldLocked)
	}
	if m.lockedUntil != nil {
		fields = append(fields, user.FieldLockedUntil)
	}
	if m.content != nil {
		fields = append(fields, user.FieldContent)
	}
	if m.fileName != nil {
		fields = append(fields, user.FieldFileName)
	}
	if m.mime != nil {
		fields = append(fields, user.FieldMime)
	}
	if m.nonce != nil {
		fields = append(fields, user.FieldNonce)
	}
	if m.keySalt != nil {
		fields = append(fields, user.FieldKeySalt)
	}
	if m.hashTime != nil {
		fields = append(fields, user.FieldHashTime)
	}
	if m.hashMemory != nil {
		fields = append(fields, user.FieldHashMemory)
	}
	if m.hashThreads != nil {
		fields = append(fields, user.FieldHashThreads)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldAlertDiscordId:
		return m.AlertDiscordId()
	case user.FieldAlertEmail:
		return m.AlertEmail()
	case user.FieldLocked:
		return m.Locked()
	case user.FieldLockedUntil:
		return m.LockedUntil()
	case user.FieldContent:
		return m.Content()
	case user.FieldFileName:
		return m.FileName()
	case user.FieldMime:
		return m.Mime()
	case user.FieldNonce:
		return m.Nonce()
	case user.FieldKeySalt:
		return m.KeySalt()
	case user.FieldHashTime:
		return m.HashTime()
	case user.FieldHashMemory:
		return m.HashMemory()
	case user.FieldHashThreads:
		return m.HashThreads()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldAlertDiscordId:
		return m.OldAlertDiscordId(ctx)
	case user.FieldAlertEmail:
		return m.OldAlertEmail(ctx)
	case user.FieldLocked:
		return m.OldLocked(ctx)
	case user.FieldLockedUntil:
		return m.OldLockedUntil(ctx)
	case user.FieldContent:
		return m.OldContent(ctx)
	case user.FieldFileName:
		return m.OldFileName(ctx)
	case user.FieldMime:
		return m.OldMime(ctx)
	case user.FieldNonce:
		return m.OldNonce(ctx)
	case user.FieldKeySalt:
		return m.OldKeySalt(ctx)
	case user.FieldHashTime:
		return m.OldHashTime(ctx)
	case user.FieldHashMemory:
		return m.OldHashMemory(ctx)
	case user.FieldHashThreads:
		return m.OldHashThreads(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldAlertDiscordId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlertDiscordId(v)
		return nil
	case user.FieldAlertEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlertEmail(v)
		return nil
	case user.FieldLocked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocked(v)
		return nil
	case user.FieldLockedUntil:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLockedUntil(v)
		return nil
	case user.FieldContent:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case user.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case user.FieldMime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMime(v)
		return nil
	case user.FieldNonce:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	case user.FieldKeySalt:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeySalt(v)
		return nil
	case user.FieldHashTime:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashTime(v)
		return nil
	case user.FieldHashMemory:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashMemory(v)
		return nil
	case user.FieldHashThreads:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashThreads(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addhashTime != nil {
		fields = append(fields, user.FieldHashTime)
	}
	if m.addhashMemory != nil {
		fields = append(fields, user.FieldHashMemory)
	}
	if m.addhashThreads != nil {
		fields = append(fields, user.FieldHashThreads)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldHashTime:
		return m.AddedHashTime()
	case user.FieldHashMemory:
		return m.AddedHashMemory()
	case user.FieldHashThreads:
		return m.AddedHashThreads()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldHashTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHashTime(v)
		return nil
	case user.FieldHashMemory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHashMemory(v)
		return nil
	case user.FieldHashThreads:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHashThreads(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldLockedUntil) {
		fields = append(fields, user.FieldLockedUntil)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldLockedUntil:
		m.ClearLockedUntil()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldAlertDiscordId:
		m.ResetAlertDiscordId()
		return nil
	case user.FieldAlertEmail:
		m.ResetAlertEmail()
		return nil
	case user.FieldLocked:
		m.ResetLocked()
		return nil
	case user.FieldLockedUntil:
		m.ResetLockedUntil()
		return nil
	case user.FieldContent:
		m.ResetContent()
		return nil
	case user.FieldFileName:
		m.ResetFileName()
		return nil
	case user.FieldMime:
		m.ResetMime()
		return nil
	case user.FieldNonce:
		m.ResetNonce()
		return nil
	case user.FieldKeySalt:
		m.ResetKeySalt()
		return nil
	case user.FieldHashTime:
		m.ResetHashTime()
		return nil
	case user.FieldHashMemory:
		m.ResetHashMemory()
		return nil
	case user.FieldHashThreads:
		m.ResetHashThreads()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.logs != nil {
		edges = append(edges, user.EdgeLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.logs))
		for id := range m.logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.removedlogs != nil {
		edges = append(edges, user.EdgeLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLogs:
		ids := make([]ent.Value, 0, len(m.removedlogs))
		for id := range m.removedlogs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	if m.clearedlogs {
		edges = append(edges, user.EdgeLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSessions:
		return m.clearedsessions
	case user.EdgeLogs:
		return m.clearedlogs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	case user.EdgeLogs:
		m.ResetLogs()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
