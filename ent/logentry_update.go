// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hedgehog125/project-reboot/ent/logentry"
	"github.com/hedgehog125/project-reboot/ent/predicate"
	"github.com/hedgehog125/project-reboot/ent/user"
)

// LogEntryUpdate is the builder for updating LogEntry entities.
type LogEntryUpdate struct {
	config
	hooks    []Hook
	mutation *LogEntryMutation
}

// Where appends a list predicates to the LogEntryUpdate builder.
func (_u *LogEntryUpdate) Where(ps ...predicate.LogEntry) *LogEntryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTime sets the "time" field.
func (_u *LogEntryUpdate) SetTime(v time.Time) *LogEntryUpdate {
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *LogEntryUpdate) SetNillableTime(v *time.Time) *LogEntryUpdate {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// SetTimeKnown sets the "timeKnown" field.
func (_u *LogEntryUpdate) SetTimeKnown(v bool) *LogEntryUpdate {
	_u.mutation.SetTimeKnown(v)
	return _u
}

// SetNillableTimeKnown sets the "timeKnown" field if the given value is not nil.
func (_u *LogEntryUpdate) SetNillableTimeKnown(v *bool) *LogEntryUpdate {
	if v != nil {
		_u.SetTimeKnown(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *LogEntryUpdate) SetLevel(v int) *LogEntryUpdate {
	_u.mutation.ResetLevel()
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *LogEntryUpdate) SetNillableLevel(v *int) *LogEntryUpdate {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// AddLevel adds value to the "level" field.
func (_u *LogEntryUpdate) AddLevel(v int) *LogEntryUpdate {
	_u.mutation.AddLevel(v)
	return _u
}

// SetMessage sets the "message" field.
func (_u *LogEntryUpdate) SetMessage(v string) *LogEntryUpdate {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *LogEntryUpdate) SetNillableMessage(v *string) *LogEntryUpdate {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetAttributes sets the "attributes" field.
func (_u *LogEntryUpdate) SetAttributes(v string) *LogEntryUpdate {
	_u.mutation.SetAttributes(v)
	return _u
}

// SetNillableAttributes sets the "attributes" field if the given value is not nil.
func (_u *LogEntryUpdate) SetNillableAttributes(v *string) *LogEntryUpdate {
	if v != nil {
		_u.SetAttributes(*v)
	}
	return _u
}

// SetSourceFile sets the "sourceFile" field.
func (_u *LogEntryUpdate) SetSourceFile(v string) *LogEntryUpdate {
	_u.mutation.SetSourceFile(v)
	return _u
}

// SetNillableSourceFile sets the "sourceFile" field if the given value is not nil.
func (_u *LogEntryUpdate) SetNillableSourceFile(v *string) *LogEntryUpdate {
	if v != nil {
		_u.SetSourceFile(*v)
	}
	return _u
}

// SetSourceFunction sets the "sourceFunction" field.
func (_u *LogEntryUpdate) SetSourceFunction(v string) *LogEntryUpdate {
	_u.mutation.SetSourceFunction(v)
	return _u
}

// SetNillableSourceFunction sets the "sourceFunction" field if the given value is not nil.
func (_u *LogEntryUpdate) SetNillableSourceFunction(v *string) *LogEntryUpdate {
	if v != nil {
		_u.SetSourceFunction(*v)
	}
	return _u
}

// SetSourceLine sets the "sourceLine" field.
func (_u *LogEntryUpdate) SetSourceLine(v int) *LogEntryUpdate {
	_u.mutation.ResetSourceLine()
	_u.mutation.SetSourceLine(v)
	return _u
}

// SetNillableSourceLine sets the "sourceLine" field if the given value is not nil.
func (_u *LogEntryUpdate) SetNillableSourceLine(v *int) *LogEntryUpdate {
	if v != nil {
		_u.SetSourceLine(*v)
	}
	return _u
}

// AddSourceLine adds value to the "sourceLine" field.
func (_u *LogEntryUpdate) AddSourceLine(v int) *LogEntryUpdate {
	_u.mutation.AddSourceLine(v)
	return _u
}

// SetPublicMessage sets the "publicMessage" field.
func (_u *LogEntryUpdate) SetPublicMessage(v string) *LogEntryUpdate {
	_u.mutation.SetPublicMessage(v)
	return _u
}

// SetNillablePublicMessage sets the "publicMessage" field if the given value is not nil.
func (_u *LogEntryUpdate) SetNillablePublicMessage(v *string) *LogEntryUpdate {
	if v != nil {
		_u.SetPublicMessage(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *LogEntryUpdate) SetUserID(id int) *LogEntryUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *LogEntryUpdate) SetNillableUserID(id *int) *LogEntryUpdate {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *LogEntryUpdate) SetUser(v *User) *LogEntryUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the LogEntryMutation object of the builder.
func (_u *LogEntryUpdate) Mutation() *LogEntryMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *LogEntryUpdate) ClearUser() *LogEntryUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LogEntryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LogEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LogEntryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LogEntryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *LogEntryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(logentry.Table, logentry.Columns, sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(logentry.FieldTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.TimeKnown(); ok {
		_spec.SetField(logentry.FieldTimeKnown, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(logentry.FieldLevel, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLevel(); ok {
		_spec.AddField(logentry.FieldLevel, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(logentry.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Attributes(); ok {
		_spec.SetField(logentry.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.SourceFile(); ok {
		_spec.SetField(logentry.FieldSourceFile, field.TypeString, value)
	}
	if value, ok := _u.mutation.SourceFunction(); ok {
		_spec.SetField(logentry.FieldSourceFunction, field.TypeString, value)
	}
	if value, ok := _u.mutation.SourceLine(); ok {
		_spec.SetField(logentry.FieldSourceLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSourceLine(); ok {
		_spec.AddField(logentry.FieldSourceLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PublicMessage(); ok {
		_spec.SetField(logentry.FieldPublicMessage, field.TypeString, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   logentry.UserTable,
			Columns: []string{logentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   logentry.UserTable,
			Columns: []string{logentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LogEntryUpdateOne is the builder for updating a single LogEntry entity.
type LogEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogEntryMutation
}

// SetTime sets the "time" field.
func (_u *LogEntryUpdateOne) SetTime(v time.Time) *LogEntryUpdateOne {
	_u.mutation.SetTime(v)
	return _u
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillableTime(v *time.Time) *LogEntryUpdateOne {
	if v != nil {
		_u.SetTime(*v)
	}
	return _u
}

// SetTimeKnown sets the "timeKnown" field.
func (_u *LogEntryUpdateOne) SetTimeKnown(v bool) *LogEntryUpdateOne {
	_u.mutation.SetTimeKnown(v)
	return _u
}

// SetNillableTimeKnown sets the "timeKnown" field if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillableTimeKnown(v *bool) *LogEntryUpdateOne {
	if v != nil {
		_u.SetTimeKnown(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *LogEntryUpdateOne) SetLevel(v int) *LogEntryUpdateOne {
	_u.mutation.ResetLevel()
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillableLevel(v *int) *LogEntryUpdateOne {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// AddLevel adds value to the "level" field.
func (_u *LogEntryUpdateOne) AddLevel(v int) *LogEntryUpdateOne {
	_u.mutation.AddLevel(v)
	return _u
}

// SetMessage sets the "message" field.
func (_u *LogEntryUpdateOne) SetMessage(v string) *LogEntryUpdateOne {
	_u.mutation.SetMessage(v)
	return _u
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillableMessage(v *string) *LogEntryUpdateOne {
	if v != nil {
		_u.SetMessage(*v)
	}
	return _u
}

// SetAttributes sets the "attributes" field.
func (_u *LogEntryUpdateOne) SetAttributes(v string) *LogEntryUpdateOne {
	_u.mutation.SetAttributes(v)
	return _u
}

// SetNillableAttributes sets the "attributes" field if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillableAttributes(v *string) *LogEntryUpdateOne {
	if v != nil {
		_u.SetAttributes(*v)
	}
	return _u
}

// SetSourceFile sets the "sourceFile" field.
func (_u *LogEntryUpdateOne) SetSourceFile(v string) *LogEntryUpdateOne {
	_u.mutation.SetSourceFile(v)
	return _u
}

// SetNillableSourceFile sets the "sourceFile" field if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillableSourceFile(v *string) *LogEntryUpdateOne {
	if v != nil {
		_u.SetSourceFile(*v)
	}
	return _u
}

// SetSourceFunction sets the "sourceFunction" field.
func (_u *LogEntryUpdateOne) SetSourceFunction(v string) *LogEntryUpdateOne {
	_u.mutation.SetSourceFunction(v)
	return _u
}

// SetNillableSourceFunction sets the "sourceFunction" field if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillableSourceFunction(v *string) *LogEntryUpdateOne {
	if v != nil {
		_u.SetSourceFunction(*v)
	}
	return _u
}

// SetSourceLine sets the "sourceLine" field.
func (_u *LogEntryUpdateOne) SetSourceLine(v int) *LogEntryUpdateOne {
	_u.mutation.ResetSourceLine()
	_u.mutation.SetSourceLine(v)
	return _u
}

// SetNillableSourceLine sets the "sourceLine" field if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillableSourceLine(v *int) *LogEntryUpdateOne {
	if v != nil {
		_u.SetSourceLine(*v)
	}
	return _u
}

// AddSourceLine adds value to the "sourceLine" field.
func (_u *LogEntryUpdateOne) AddSourceLine(v int) *LogEntryUpdateOne {
	_u.mutation.AddSourceLine(v)
	return _u
}

// SetPublicMessage sets the "publicMessage" field.
func (_u *LogEntryUpdateOne) SetPublicMessage(v string) *LogEntryUpdateOne {
	_u.mutation.SetPublicMessage(v)
	return _u
}

// SetNillablePublicMessage sets the "publicMessage" field if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillablePublicMessage(v *string) *LogEntryUpdateOne {
	if v != nil {
		_u.SetPublicMessage(*v)
	}
	return _u
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *LogEntryUpdateOne) SetUserID(id int) *LogEntryUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_u *LogEntryUpdateOne) SetNillableUserID(id *int) *LogEntryUpdateOne {
	if id != nil {
		_u = _u.SetUserID(*id)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *LogEntryUpdateOne) SetUser(v *User) *LogEntryUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the LogEntryMutation object of the builder.
func (_u *LogEntryUpdateOne) Mutation() *LogEntryMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *LogEntryUpdateOne) ClearUser() *LogEntryUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the LogEntryUpdate builder.
func (_u *LogEntryUpdateOne) Where(ps ...predicate.LogEntry) *LogEntryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LogEntryUpdateOne) Select(field string, fields ...string) *LogEntryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated LogEntry entity.
func (_u *LogEntryUpdateOne) Save(ctx context.Context) (*LogEntry, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LogEntryUpdateOne) SaveX(ctx context.Context) *LogEntry {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LogEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LogEntryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *LogEntryUpdateOne) sqlSave(ctx context.Context) (_node *LogEntry, err error) {
	_spec := sqlgraph.NewUpdateSpec(logentry.Table, logentry.Columns, sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LogEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logentry.FieldID)
		for _, f := range fields {
			if !logentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Time(); ok {
		_spec.SetField(logentry.FieldTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.TimeKnown(); ok {
		_spec.SetField(logentry.FieldTimeKnown, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(logentry.FieldLevel, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLevel(); ok {
		_spec.AddField(logentry.FieldLevel, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Message(); ok {
		_spec.SetField(logentry.FieldMessage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Attributes(); ok {
		_spec.SetField(logentry.FieldAttributes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.SourceFile(); ok {
		_spec.SetField(logentry.FieldSourceFile, field.TypeString, value)
	}
	if value, ok := _u.mutation.SourceFunction(); ok {
		_spec.SetField(logentry.FieldSourceFunction, field.TypeString, value)
	}
	if value, ok := _u.mutation.SourceLine(); ok {
		_spec.SetField(logentry.FieldSourceLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSourceLine(); ok {
		_spec.AddField(logentry.FieldSourceLine, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PublicMessage(); ok {
		_spec.SetField(logentry.FieldPublicMessage, field.TypeString, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   logentry.UserTable,
			Columns: []string{logentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   logentry.UserTable,
			Columns: []string{logentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LogEntry{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
