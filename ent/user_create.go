// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/logentry"
	"github.com/hedgehog125/project-reboot/ent/session"
	"github.com/hedgehog125/project-reboot/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUsername sets the "username" field.
func (_c *UserCreate) SetUsername(v string) *UserCreate {
	_c.mutation.SetUsername(v)
	return _c
}

// SetAlertDiscordId sets the "alertDiscordId" field.
func (_c *UserCreate) SetAlertDiscordId(v string) *UserCreate {
	_c.mutation.SetAlertDiscordId(v)
	return _c
}

// SetNillableAlertDiscordId sets the "alertDiscordId" field if the given value is not nil.
func (_c *UserCreate) SetNillableAlertDiscordId(v *string) *UserCreate {
	if v != nil {
		_c.SetAlertDiscordId(*v)
	}
	return _c
}

// SetAlertEmail sets the "alertEmail" field.
func (_c *UserCreate) SetAlertEmail(v string) *UserCreate {
	_c.mutation.SetAlertEmail(v)
	return _c
}

// SetNillableAlertEmail sets the "alertEmail" field if the given value is not nil.
func (_c *UserCreate) SetNillableAlertEmail(v *string) *UserCreate {
	if v != nil {
		_c.SetAlertEmail(*v)
	}
	return _c
}

// SetLocked sets the "locked" field.
func (_c *UserCreate) SetLocked(v bool) *UserCreate {
	_c.mutation.SetLocked(v)
	return _c
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_c *UserCreate) SetNillableLocked(v *bool) *UserCreate {
	if v != nil {
		_c.SetLocked(*v)
	}
	return _c
}

// SetLockedUntil sets the "lockedUntil" field.
func (_c *UserCreate) SetLockedUntil(v time.Time) *UserCreate {
	_c.mutation.SetLockedUntil(v)
	return _c
}

// SetNillableLockedUntil sets the "lockedUntil" field if the given value is not nil.
func (_c *UserCreate) SetNillableLockedUntil(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLockedUntil(*v)
	}
	return _c
}

// SetContent sets the "content" field.
func (_c *UserCreate) SetContent(v []byte) *UserCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetFileName sets the "fileName" field.
func (_c *UserCreate) SetFileName(v string) *UserCreate {
	_c.mutation.SetFileName(v)
	return _c
}

// SetMime sets the "mime" field.
func (_c *UserCreate) SetMime(v string) *UserCreate {
	_c.mutation.SetMime(v)
	return _c
}

// SetNonce sets the "nonce" field.
func (_c *UserCreate) SetNonce(v []byte) *UserCreate {
	_c.mutation.SetNonce(v)
	return _c
}

// SetKeySalt sets the "keySalt" field.
func (_c *UserCreate) SetKeySalt(v []byte) *UserCreate {
	_c.mutation.SetKeySalt(v)
	return _c
}

// SetHashTime sets the "hashTime" field.
func (_c *UserCreate) SetHashTime(v uint32) *UserCreate {
	_c.mutation.SetHashTime(v)
	return _c
}

// SetHashMemory sets the "hashMemory" field.
func (_c *UserCreate) SetHashMemory(v uint32) *UserCreate {
	_c.mutation.SetHashMemory(v)
	return _c
}

// SetHashThreads sets the "hashThreads" field.
func (_c *UserCreate) SetHashThreads(v uint8) *UserCreate {
	_c.mutation.SetHashThreads(v)
	return _c
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (_c *UserCreate) AddSessionIDs(ids ...int) *UserCreate {
	_c.mutation.AddSessionIDs(ids...)
	return _c
}

// AddSessions adds the "sessions" edges to the Session entity.
func (_c *UserCreate) AddSessions(v ...*Session) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSessionIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the LogEntry entity by IDs.
func (_c *UserCreate) AddLogIDs(ids ...uuid.UUID) *UserCreate {
	_c.mutation.AddLogIDs(ids...)
	return _c
}

// AddLogs adds the "logs" edges to the LogEntry entity.
func (_c *UserCreate) AddLogs(v ...*LogEntry) *UserCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddLogIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.AlertDiscordId(); !ok {
		v := user.DefaultAlertDiscordId
		_c.mutation.SetAlertDiscordId(v)
	}
	if _, ok := _c.mutation.AlertEmail(); !ok {
		v := user.DefaultAlertEmail
		_c.mutation.SetAlertEmail(v)
	}
	if _, ok := _c.mutation.Locked(); !ok {
		v := user.DefaultLocked
		_c.mutation.SetLocked(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if v, ok := _c.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AlertDiscordId(); !ok {
		return &ValidationError{Name: "alertDiscordId", err: errors.New(`ent: missing required field "User.alertDiscordId"`)}
	}
	if _, ok := _c.mutation.AlertEmail(); !ok {
		return &ValidationError{Name: "alertEmail", err: errors.New(`ent: missing required field "User.alertEmail"`)}
	}
	if _, ok := _c.mutation.Locked(); !ok {
		return &ValidationError{Name: "locked", err: errors.New(`ent: missing required field "User.locked"`)}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "User.content"`)}
	}
	if v, ok := _c.mutation.Content(); ok {
		if err := user.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "User.content": %w`, err)}
		}
	}
	if _, ok := _c.mutation.FileName(); !ok {
		return &ValidationError{Name: "fileName", err: errors.New(`ent: missing required field "User.fileName"`)}
	}
	if v, ok := _c.mutation.FileName(); ok {
		if err := user.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "fileName", err: fmt.Errorf(`ent: validator failed for field "User.fileName": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Mime(); !ok {
		return &ValidationError{Name: "mime", err: errors.New(`ent: missing required field "User.mime"`)}
	}
	if v, ok := _c.mutation.Mime(); ok {
		if err := user.MimeValidator(v); err != nil {
			return &ValidationError{Name: "mime", err: fmt.Errorf(`ent: validator failed for field "User.mime": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Nonce(); !ok {
		return &ValidationError{Name: "nonce", err: errors.New(`ent: missing required field "User.nonce"`)}
	}
	if v, ok := _c.mutation.Nonce(); ok {
		if err := user.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`ent: validator failed for field "User.nonce": %w`, err)}
		}
	}
	if _, ok := _c.mutation.KeySalt(); !ok {
		return &ValidationError{Name: "keySalt", err: errors.New(`ent: missing required field "User.keySalt"`)}
	}
	if v, ok := _c.mutation.KeySalt(); ok {
		if err := user.KeySaltValidator(v); err != nil {
			return &ValidationError{Name: "keySalt", err: fmt.Errorf(`ent: validator failed for field "User.keySalt": %w`, err)}
		}
	}
	if _, ok := _c.mutation.HashTime(); !ok {
		return &ValidationError{Name: "hashTime", err: errors.New(`ent: missing required field "User.hashTime"`)}
	}
	if _, ok := _c.mutation.HashMemory(); !ok {
		return &ValidationError{Name: "hashMemory", err: errors.New(`ent: missing required field "User.hashMemory"`)}
	}
	if _, ok := _c.mutation.HashThreads(); !ok {
		return &ValidationError{Name: "hashThreads", err: errors.New(`ent: missing required field "User.hashThreads"`)}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := _c.mutation.AlertDiscordId(); ok {
		_spec.SetField(user.FieldAlertDiscordId, field.TypeString, value)
		_node.AlertDiscordId = value
	}
	if value, ok := _c.mutation.AlertEmail(); ok {
		_spec.SetField(user.FieldAlertEmail, field.TypeString, value)
		_node.AlertEmail = value
	}
	if value, ok := _c.mutation.Locked(); ok {
		_spec.SetField(user.FieldLocked, field.TypeBool, value)
		_node.Locked = value
	}
	if value, ok := _c.mutation.LockedUntil(); ok {
		_spec.SetField(user.FieldLockedUntil, field.TypeTime, value)
		_node.LockedUntil = &value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(user.FieldContent, field.TypeBytes, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.FileName(); ok {
		_spec.SetField(user.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := _c.mutation.Mime(); ok {
		_spec.SetField(user.FieldMime, field.TypeString, value)
		_node.Mime = value
	}
	if value, ok := _c.mutation.Nonce(); ok {
		_spec.SetField(user.FieldNonce, field.TypeBytes, value)
		_node.Nonce = value
	}
	if value, ok := _c.mutation.KeySalt(); ok {
		_spec.SetField(user.FieldKeySalt, field.TypeBytes, value)
		_node.KeySalt = value
	}
	if value, ok := _c.mutation.HashTime(); ok {
		_spec.SetField(user.FieldHashTime, field.TypeUint32, value)
		_node.HashTime = value
	}
	if value, ok := _c.mutation.HashMemory(); ok {
		_spec.SetField(user.FieldHashMemory, field.TypeUint32, value)
		_node.HashMemory = value
	}
	if value, ok := _c.mutation.HashThreads(); ok {
		_spec.SetField(user.FieldHashThreads, field.TypeUint8, value)
		_node.HashThreads = value
	}
	if nodes := _c.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LogsTable,
			Columns: []string{user.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetUsername(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (_c *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	_c.conflict = opts
	return &UserUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: _c,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUsername sets the "username" field.
func (u *UserUpsert) SetUsername(v string) *UserUpsert {
	u.Set(user.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsert) UpdateUsername() *UserUpsert {
	u.SetExcluded(user.FieldUsername)
	return u
}

// SetAlertDiscordId sets the "alertDiscordId" field.
func (u *UserUpsert) SetAlertDiscordId(v string) *UserUpsert {
	u.Set(user.FieldAlertDiscordId, v)
	return u
}

// UpdateAlertDiscordId sets the "alertDiscordId" field to the value that was provided on create.
func (u *UserUpsert) UpdateAlertDiscordId() *UserUpsert {
	u.SetExcluded(user.FieldAlertDiscordId)
	return u
}

// SetAlertEmail sets the "alertEmail" field.
func (u *UserUpsert) SetAlertEmail(v string) *UserUpsert {
	u.Set(user.FieldAlertEmail, v)
	return u
}

// UpdateAlertEmail sets the "alertEmail" field to the value that was provided on create.
func (u *UserUpsert) UpdateAlertEmail() *UserUpsert {
	u.SetExcluded(user.FieldAlertEmail)
	return u
}

// SetLocked sets the "locked" field.
func (u *UserUpsert) SetLocked(v bool) *UserUpsert {
	u.Set(user.FieldLocked, v)
	return u
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *UserUpsert) UpdateLocked() *UserUpsert {
	u.SetExcluded(user.FieldLocked)
	return u
}

// SetLockedUntil sets the "lockedUntil" field.
func (u *UserUpsert) SetLockedUntil(v time.Time) *UserUpsert {
	u.Set(user.FieldLockedUntil, v)
	return u
}

// UpdateLockedUntil sets the "lockedUntil" field to the value that was provided on create.
func (u *UserUpsert) UpdateLockedUntil() *UserUpsert {
	u.SetExcluded(user.FieldLockedUntil)
	return u
}

// ClearLockedUntil clears the value of the "lockedUntil" field.
func (u *UserUpsert) ClearLockedUntil() *UserUpsert {
	u.SetNull(user.FieldLockedUntil)
	return u
}

// SetContent sets the "content" field.
func (u *UserUpsert) SetContent(v []byte) *UserUpsert {
	u.Set(user.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *UserUpsert) UpdateContent() *UserUpsert {
	u.SetExcluded(user.FieldContent)
	return u
}

// SetFileName sets the "fileName" field.
func (u *UserUpsert) SetFileName(v string) *UserUpsert {
	u.Set(user.FieldFileName, v)
	return u
}

// UpdateFileName sets the "fileName" field to the value that was provided on create.
func (u *UserUpsert) UpdateFileName() *UserUpsert {
	u.SetExcluded(user.FieldFileName)
	return u
}

// SetMime sets the "mime" field.
func (u *UserUpsert) SetMime(v string) *UserUpsert {
	u.Set(user.FieldMime, v)
	return u
}

// UpdateMime sets the "mime" field to the value that was provided on create.
func (u *UserUpsert) UpdateMime() *UserUpsert {
	u.SetExcluded(user.FieldMime)
	return u
}

// SetNonce sets the "nonce" field.
func (u *UserUpsert) SetNonce(v []byte) *UserUpsert {
	u.Set(user.FieldNonce, v)
	return u
}

// UpdateNonce sets the "nonce" field to the value that was provided on create.
func (u *UserUpsert) UpdateNonce() *UserUpsert {
	u.SetExcluded(user.FieldNonce)
	return u
}

// SetKeySalt sets the "keySalt" field.
func (u *UserUpsert) SetKeySalt(v []byte) *UserUpsert {
	u.Set(user.FieldKeySalt, v)
	return u
}

// UpdateKeySalt sets the "keySalt" field to the value that was provided on create.
func (u *UserUpsert) UpdateKeySalt() *UserUpsert {
	u.SetExcluded(user.FieldKeySalt)
	return u
}

// SetHashTime sets the "hashTime" field.
func (u *UserUpsert) SetHashTime(v uint32) *UserUpsert {
	u.Set(user.FieldHashTime, v)
	return u
}

// UpdateHashTime sets the "hashTime" field to the value that was provided on create.
func (u *UserUpsert) UpdateHashTime() *UserUpsert {
	u.SetExcluded(user.FieldHashTime)
	return u
}

// AddHashTime adds v to the "hashTime" field.
func (u *UserUpsert) AddHashTime(v uint32) *UserUpsert {
	u.Add(user.FieldHashTime, v)
	return u
}

// SetHashMemory sets the "hashMemory" field.
func (u *UserUpsert) SetHashMemory(v uint32) *UserUpsert {
	u.Set(user.FieldHashMemory, v)
	return u
}

// UpdateHashMemory sets the "hashMemory" field to the value that was provided on create.
func (u *UserUpsert) UpdateHashMemory() *UserUpsert {
	u.SetExcluded(user.FieldHashMemory)
	return u
}

// AddHashMemory adds v to the "hashMemory" field.
func (u *UserUpsert) AddHashMemory(v uint32) *UserUpsert {
	u.Add(user.FieldHashMemory, v)
	return u
}

// SetHashThreads sets the "hashThreads" field.
func (u *UserUpsert) SetHashThreads(v uint8) *UserUpsert {
	u.Set(user.FieldHashThreads, v)
	return u
}

// UpdateHashThreads sets the "hashThreads" field to the value that was provided on create.
func (u *UserUpsert) UpdateHashThreads() *UserUpsert {
	u.SetExcluded(user.FieldHashThreads)
	return u
}

// AddHashThreads adds v to the "hashThreads" field.
func (u *UserUpsert) AddHashThreads(v uint8) *UserUpsert {
	u.Add(user.FieldHashThreads, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *UserUpsertOne) SetUsername(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetAlertDiscordId sets the "alertDiscordId" field.
func (u *UserUpsertOne) SetAlertDiscordId(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAlertDiscordId(v)
	})
}

// UpdateAlertDiscordId sets the "alertDiscordId" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAlertDiscordId() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAlertDiscordId()
	})
}

// SetAlertEmail sets the "alertEmail" field.
func (u *UserUpsertOne) SetAlertEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAlertEmail(v)
	})
}

// UpdateAlertEmail sets the "alertEmail" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAlertEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAlertEmail()
	})
}

// SetLocked sets the "locked" field.
func (u *UserUpsertOne) SetLocked(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLocked() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocked()
	})
}

// SetLockedUntil sets the "lockedUntil" field.
func (u *UserUpsertOne) SetLockedUntil(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLockedUntil(v)
	})
}

// UpdateLockedUntil sets the "lockedUntil" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLockedUntil() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockedUntil()
	})
}

// ClearLockedUntil clears the value of the "lockedUntil" field.
func (u *UserUpsertOne) ClearLockedUntil() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockedUntil()
	})
}

// SetContent sets the "content" field.
func (u *UserUpsertOne) SetContent(v []byte) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateContent() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateContent()
	})
}

// SetFileName sets the "fileName" field.
func (u *UserUpsertOne) SetFileName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "fileName" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFileName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFileName()
	})
}

// SetMime sets the "mime" field.
func (u *UserUpsertOne) SetMime(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMime(v)
	})
}

// UpdateMime sets the "mime" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMime()
	})
}

// SetNonce sets the "nonce" field.
func (u *UserUpsertOne) SetNonce(v []byte) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNonce(v)
	})
}

// UpdateNonce sets the "nonce" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNonce() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNonce()
	})
}

// SetKeySalt sets the "keySalt" field.
func (u *UserUpsertOne) SetKeySalt(v []byte) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetKeySalt(v)
	})
}

// UpdateKeySalt sets the "keySalt" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateKeySalt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateKeySalt()
	})
}

// SetHashTime sets the "hashTime" field.
func (u *UserUpsertOne) SetHashTime(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHashTime(v)
	})
}

// AddHashTime adds v to the "hashTime" field.
func (u *UserUpsertOne) AddHashTime(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddHashTime(v)
	})
}

// UpdateHashTime sets the "hashTime" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHashTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashTime()
	})
}

// SetHashMemory sets the "hashMemory" field.
func (u *UserUpsertOne) SetHashMemory(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHashMemory(v)
	})
}

// AddHashMemory adds v to the "hashMemory" field.
func (u *UserUpsertOne) AddHashMemory(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddHashMemory(v)
	})
}

// UpdateHashMemory sets the "hashMemory" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHashMemory() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashMemory()
	})
}

// SetHashThreads sets the "hashThreads" field.
func (u *UserUpsertOne) SetHashThreads(v uint8) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHashThreads(v)
	})
}

// AddHashThreads adds v to the "hashThreads" field.
func (u *UserUpsertOne) AddHashThreads(v uint8) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddHashThreads(v)
	})
}

// UpdateHashThreads sets the "hashThreads" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHashThreads() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashThreads()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (_c *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	_c.conflict = opts
	return &UserUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: _c,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *UserUpsertBulk) SetUsername(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetAlertDiscordId sets the "alertDiscordId" field.
func (u *UserUpsertBulk) SetAlertDiscordId(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAlertDiscordId(v)
	})
}

// UpdateAlertDiscordId sets the "alertDiscordId" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAlertDiscordId() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAlertDiscordId()
	})
}

// SetAlertEmail sets the "alertEmail" field.
func (u *UserUpsertBulk) SetAlertEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAlertEmail(v)
	})
}

// UpdateAlertEmail sets the "alertEmail" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAlertEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAlertEmail()
	})
}

// SetLocked sets the "locked" field.
func (u *UserUpsertBulk) SetLocked(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLocked(v)
	})
}

// UpdateLocked sets the "locked" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLocked() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocked()
	})
}

// SetLockedUntil sets the "lockedUntil" field.
func (u *UserUpsertBulk) SetLockedUntil(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLockedUntil(v)
	})
}

// UpdateLockedUntil sets the "lockedUntil" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLockedUntil() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLockedUntil()
	})
}

// ClearLockedUntil clears the value of the "lockedUntil" field.
func (u *UserUpsertBulk) ClearLockedUntil() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLockedUntil()
	})
}

// SetContent sets the "content" field.
func (u *UserUpsertBulk) SetContent(v []byte) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateContent() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateContent()
	})
}

// SetFileName sets the "fileName" field.
func (u *UserUpsertBulk) SetFileName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "fileName" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFileName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFileName()
	})
}

// SetMime sets the "mime" field.
func (u *UserUpsertBulk) SetMime(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMime(v)
	})
}

// UpdateMime sets the "mime" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMime()
	})
}

// SetNonce sets the "nonce" field.
func (u *UserUpsertBulk) SetNonce(v []byte) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNonce(v)
	})
}

// UpdateNonce sets the "nonce" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNonce() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNonce()
	})
}

// SetKeySalt sets the "keySalt" field.
func (u *UserUpsertBulk) SetKeySalt(v []byte) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetKeySalt(v)
	})
}

// UpdateKeySalt sets the "keySalt" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateKeySalt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateKeySalt()
	})
}

// SetHashTime sets the "hashTime" field.
func (u *UserUpsertBulk) SetHashTime(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHashTime(v)
	})
}

// AddHashTime adds v to the "hashTime" field.
func (u *UserUpsertBulk) AddHashTime(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddHashTime(v)
	})
}

// UpdateHashTime sets the "hashTime" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHashTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashTime()
	})
}

// SetHashMemory sets the "hashMemory" field.
func (u *UserUpsertBulk) SetHashMemory(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHashMemory(v)
	})
}

// AddHashMemory adds v to the "hashMemory" field.
func (u *UserUpsertBulk) AddHashMemory(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddHashMemory(v)
	})
}

// UpdateHashMemory sets the "hashMemory" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHashMemory() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashMemory()
	})
}

// SetHashThreads sets the "hashThreads" field.
func (u *UserUpsertBulk) SetHashThreads(v uint8) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHashThreads(v)
	})
}

// AddHashThreads adds v to the "hashThreads" field.
func (u *UserUpsertBulk) AddHashThreads(v uint8) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddHashThreads(v)
	})
}

// UpdateHashThreads sets the "hashThreads" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHashThreads() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHashThreads()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
