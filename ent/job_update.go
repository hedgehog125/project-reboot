// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/hedgehog125/project-reboot/ent/job"
	"github.com/hedgehog125/project-reboot/ent/periodicjob"
	"github.com/hedgehog125/project-reboot/ent/predicate"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (_u *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreated sets the "created" field.
func (_u *JobUpdate) SetCreated(v time.Time) *JobUpdate {
	_u.mutation.SetCreated(v)
	return _u
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (_u *JobUpdate) SetNillableCreated(v *time.Time) *JobUpdate {
	if v != nil {
		_u.SetCreated(*v)
	}
	return _u
}

// SetDue sets the "due" field.
func (_u *JobUpdate) SetDue(v time.Time) *JobUpdate {
	_u.mutation.SetDue(v)
	return _u
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (_u *JobUpdate) SetNillableDue(v *time.Time) *JobUpdate {
	if v != nil {
		_u.SetDue(*v)
	}
	return _u
}

// SetOriginallyDue sets the "originallyDue" field.
func (_u *JobUpdate) SetOriginallyDue(v time.Time) *JobUpdate {
	_u.mutation.SetOriginallyDue(v)
	return _u
}

// SetNillableOriginallyDue sets the "originallyDue" field if the given value is not nil.
func (_u *JobUpdate) SetNillableOriginallyDue(v *time.Time) *JobUpdate {
	if v != nil {
		_u.SetOriginallyDue(*v)
	}
	return _u
}

// SetStarted sets the "started" field.
func (_u *JobUpdate) SetStarted(v time.Time) *JobUpdate {
	_u.mutation.SetStarted(v)
	return _u
}

// SetNillableStarted sets the "started" field if the given value is not nil.
func (_u *JobUpdate) SetNillableStarted(v *time.Time) *JobUpdate {
	if v != nil {
		_u.SetStarted(*v)
	}
	return _u
}

// ClearStarted clears the value of the "started" field.
func (_u *JobUpdate) ClearStarted() *JobUpdate {
	_u.mutation.ClearStarted()
	return _u
}

// SetType sets the "type" field.
func (_u *JobUpdate) SetType(v string) *JobUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *JobUpdate) SetNillableType(v *string) *JobUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetVersion sets the "version" field.
func (_u *JobUpdate) SetVersion(v int) *JobUpdate {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *JobUpdate) SetNillableVersion(v *int) *JobUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *JobUpdate) AddVersion(v int) *JobUpdate {
	_u.mutation.AddVersion(v)
	return _u
}

// SetPriority sets the "priority" field.
func (_u *JobUpdate) SetPriority(v int8) *JobUpdate {
	_u.mutation.ResetPriority()
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *JobUpdate) SetNillablePriority(v *int8) *JobUpdate {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// AddPriority adds value to the "priority" field.
func (_u *JobUpdate) AddPriority(v int8) *JobUpdate {
	_u.mutation.AddPriority(v)
	return _u
}

// SetWeight sets the "weight" field.
func (_u *JobUpdate) SetWeight(v int) *JobUpdate {
	_u.mutation.ResetWeight()
	_u.mutation.SetWeight(v)
	return _u
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (_u *JobUpdate) SetNillableWeight(v *int) *JobUpdate {
	if v != nil {
		_u.SetWeight(*v)
	}
	return _u
}

// AddWeight adds value to the "weight" field.
func (_u *JobUpdate) AddWeight(v int) *JobUpdate {
	_u.mutation.AddWeight(v)
	return _u
}

// SetBody sets the "body" field.
func (_u *JobUpdate) SetBody(v json.RawMessage) *JobUpdate {
	_u.mutation.SetBody(v)
	return _u
}

// AppendBody appends value to the "body" field.
func (_u *JobUpdate) AppendBody(v json.RawMessage) *JobUpdate {
	_u.mutation.AppendBody(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *JobUpdate) SetStatus(v job.Status) *JobUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *JobUpdate) SetNillableStatus(v *job.Status) *JobUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetRetries sets the "retries" field.
func (_u *JobUpdate) SetRetries(v int) *JobUpdate {
	_u.mutation.ResetRetries()
	_u.mutation.SetRetries(v)
	return _u
}

// SetNillableRetries sets the "retries" field if the given value is not nil.
func (_u *JobUpdate) SetNillableRetries(v *int) *JobUpdate {
	if v != nil {
		_u.SetRetries(*v)
	}
	return _u
}

// AddRetries adds value to the "retries" field.
func (_u *JobUpdate) AddRetries(v int) *JobUpdate {
	_u.mutation.AddRetries(v)
	return _u
}

// SetRetriedFraction sets the "retriedFraction" field.
func (_u *JobUpdate) SetRetriedFraction(v float64) *JobUpdate {
	_u.mutation.ResetRetriedFraction()
	_u.mutation.SetRetriedFraction(v)
	return _u
}

// SetNillableRetriedFraction sets the "retriedFraction" field if the given value is not nil.
func (_u *JobUpdate) SetNillableRetriedFraction(v *float64) *JobUpdate {
	if v != nil {
		_u.SetRetriedFraction(*v)
	}
	return _u
}

// AddRetriedFraction adds value to the "retriedFraction" field.
func (_u *JobUpdate) AddRetriedFraction(v float64) *JobUpdate {
	_u.mutation.AddRetriedFraction(v)
	return _u
}

// SetLoggedStallWarning sets the "loggedStallWarning" field.
func (_u *JobUpdate) SetLoggedStallWarning(v bool) *JobUpdate {
	_u.mutation.SetLoggedStallWarning(v)
	return _u
}

// SetNillableLoggedStallWarning sets the "loggedStallWarning" field if the given value is not nil.
func (_u *JobUpdate) SetNillableLoggedStallWarning(v *bool) *JobUpdate {
	if v != nil {
		_u.SetLoggedStallWarning(*v)
	}
	return _u
}

// SetPeriodicJobID sets the "periodicJobID" field.
func (_u *JobUpdate) SetPeriodicJobID(v int) *JobUpdate {
	_u.mutation.SetPeriodicJobID(v)
	return _u
}

// SetNillablePeriodicJobID sets the "periodicJobID" field if the given value is not nil.
func (_u *JobUpdate) SetNillablePeriodicJobID(v *int) *JobUpdate {
	if v != nil {
		_u.SetPeriodicJobID(*v)
	}
	return _u
}

// ClearPeriodicJobID clears the value of the "periodicJobID" field.
func (_u *JobUpdate) ClearPeriodicJobID() *JobUpdate {
	_u.mutation.ClearPeriodicJobID()
	return _u
}

// SetPeriodicJob sets the "periodicJob" edge to the PeriodicJob entity.
func (_u *JobUpdate) SetPeriodicJob(v *PeriodicJob) *JobUpdate {
	return _u.SetPeriodicJobID(v.ID)
}

// Mutation returns the JobMutation object of the builder.
func (_u *JobUpdate) Mutation() *JobMutation {
	return _u.mutation
}

// ClearPeriodicJob clears the "periodicJob" edge to the PeriodicJob entity.
func (_u *JobUpdate) ClearPeriodicJob() *JobUpdate {
	_u.mutation.ClearPeriodicJob()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *JobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *JobUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := job.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Job.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	return nil
}

func (_u *JobUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Created(); ok {
		_spec.SetField(job.FieldCreated, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Due(); ok {
		_spec.SetField(job.FieldDue, field.TypeTime, value)
	}
	if value, ok := _u.mutation.OriginallyDue(); ok {
		_spec.SetField(job.FieldOriginallyDue, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Started(); ok {
		_spec.SetField(job.FieldStarted, field.TypeTime, value)
	}
	if _u.mutation.StartedCleared() {
		_spec.ClearField(job.FieldStarted, field.TypeTime)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(job.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(job.FieldVersion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(job.FieldVersion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(job.FieldPriority, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedPriority(); ok {
		_spec.AddField(job.FieldPriority, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.Weight(); ok {
		_spec.SetField(job.FieldWeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWeight(); ok {
		_spec.AddField(job.FieldWeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Body(); ok {
		_spec.SetField(job.FieldBody, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldBody, value)
		})
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Retries(); ok {
		_spec.SetField(job.FieldRetries, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetries(); ok {
		_spec.AddField(job.FieldRetries, field.TypeInt, value)
	}
	if value, ok := _u.mutation.RetriedFraction(); ok {
		_spec.SetField(job.FieldRetriedFraction, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRetriedFraction(); ok {
		_spec.AddField(job.FieldRetriedFraction, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.LoggedStallWarning(); ok {
		_spec.SetField(job.FieldLoggedStallWarning, field.TypeBool, value)
	}
	if _u.mutation.PeriodicJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.PeriodicJobTable,
			Columns: []string{job.PeriodicJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(periodicjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PeriodicJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.PeriodicJobTable,
			Columns: []string{job.PeriodicJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(periodicjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetCreated sets the "created" field.
func (_u *JobUpdateOne) SetCreated(v time.Time) *JobUpdateOne {
	_u.mutation.SetCreated(v)
	return _u
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableCreated(v *time.Time) *JobUpdateOne {
	if v != nil {
		_u.SetCreated(*v)
	}
	return _u
}

// SetDue sets the "due" field.
func (_u *JobUpdateOne) SetDue(v time.Time) *JobUpdateOne {
	_u.mutation.SetDue(v)
	return _u
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableDue(v *time.Time) *JobUpdateOne {
	if v != nil {
		_u.SetDue(*v)
	}
	return _u
}

// SetOriginallyDue sets the "originallyDue" field.
func (_u *JobUpdateOne) SetOriginallyDue(v time.Time) *JobUpdateOne {
	_u.mutation.SetOriginallyDue(v)
	return _u
}

// SetNillableOriginallyDue sets the "originallyDue" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableOriginallyDue(v *time.Time) *JobUpdateOne {
	if v != nil {
		_u.SetOriginallyDue(*v)
	}
	return _u
}

// SetStarted sets the "started" field.
func (_u *JobUpdateOne) SetStarted(v time.Time) *JobUpdateOne {
	_u.mutation.SetStarted(v)
	return _u
}

// SetNillableStarted sets the "started" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableStarted(v *time.Time) *JobUpdateOne {
	if v != nil {
		_u.SetStarted(*v)
	}
	return _u
}

// ClearStarted clears the value of the "started" field.
func (_u *JobUpdateOne) ClearStarted() *JobUpdateOne {
	_u.mutation.ClearStarted()
	return _u
}

// SetType sets the "type" field.
func (_u *JobUpdateOne) SetType(v string) *JobUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableType(v *string) *JobUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetVersion sets the "version" field.
func (_u *JobUpdateOne) SetVersion(v int) *JobUpdateOne {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableVersion(v *int) *JobUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *JobUpdateOne) AddVersion(v int) *JobUpdateOne {
	_u.mutation.AddVersion(v)
	return _u
}

// SetPriority sets the "priority" field.
func (_u *JobUpdateOne) SetPriority(v int8) *JobUpdateOne {
	_u.mutation.ResetPriority()
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillablePriority(v *int8) *JobUpdateOne {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// AddPriority adds value to the "priority" field.
func (_u *JobUpdateOne) AddPriority(v int8) *JobUpdateOne {
	_u.mutation.AddPriority(v)
	return _u
}

// SetWeight sets the "weight" field.
func (_u *JobUpdateOne) SetWeight(v int) *JobUpdateOne {
	_u.mutation.ResetWeight()
	_u.mutation.SetWeight(v)
	return _u
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableWeight(v *int) *JobUpdateOne {
	if v != nil {
		_u.SetWeight(*v)
	}
	return _u
}

// AddWeight adds value to the "weight" field.
func (_u *JobUpdateOne) AddWeight(v int) *JobUpdateOne {
	_u.mutation.AddWeight(v)
	return _u
}

// SetBody sets the "body" field.
func (_u *JobUpdateOne) SetBody(v json.RawMessage) *JobUpdateOne {
	_u.mutation.SetBody(v)
	return _u
}

// AppendBody appends value to the "body" field.
func (_u *JobUpdateOne) AppendBody(v json.RawMessage) *JobUpdateOne {
	_u.mutation.AppendBody(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *JobUpdateOne) SetStatus(v job.Status) *JobUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableStatus(v *job.Status) *JobUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetRetries sets the "retries" field.
func (_u *JobUpdateOne) SetRetries(v int) *JobUpdateOne {
	_u.mutation.ResetRetries()
	_u.mutation.SetRetries(v)
	return _u
}

// SetNillableRetries sets the "retries" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableRetries(v *int) *JobUpdateOne {
	if v != nil {
		_u.SetRetries(*v)
	}
	return _u
}

// AddRetries adds value to the "retries" field.
func (_u *JobUpdateOne) AddRetries(v int) *JobUpdateOne {
	_u.mutation.AddRetries(v)
	return _u
}

// SetRetriedFraction sets the "retriedFraction" field.
func (_u *JobUpdateOne) SetRetriedFraction(v float64) *JobUpdateOne {
	_u.mutation.ResetRetriedFraction()
	_u.mutation.SetRetriedFraction(v)
	return _u
}

// SetNillableRetriedFraction sets the "retriedFraction" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableRetriedFraction(v *float64) *JobUpdateOne {
	if v != nil {
		_u.SetRetriedFraction(*v)
	}
	return _u
}

// AddRetriedFraction adds value to the "retriedFraction" field.
func (_u *JobUpdateOne) AddRetriedFraction(v float64) *JobUpdateOne {
	_u.mutation.AddRetriedFraction(v)
	return _u
}

// SetLoggedStallWarning sets the "loggedStallWarning" field.
func (_u *JobUpdateOne) SetLoggedStallWarning(v bool) *JobUpdateOne {
	_u.mutation.SetLoggedStallWarning(v)
	return _u
}

// SetNillableLoggedStallWarning sets the "loggedStallWarning" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableLoggedStallWarning(v *bool) *JobUpdateOne {
	if v != nil {
		_u.SetLoggedStallWarning(*v)
	}
	return _u
}

// SetPeriodicJobID sets the "periodicJobID" field.
func (_u *JobUpdateOne) SetPeriodicJobID(v int) *JobUpdateOne {
	_u.mutation.SetPeriodicJobID(v)
	return _u
}

// SetNillablePeriodicJobID sets the "periodicJobID" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillablePeriodicJobID(v *int) *JobUpdateOne {
	if v != nil {
		_u.SetPeriodicJobID(*v)
	}
	return _u
}

// ClearPeriodicJobID clears the value of the "periodicJobID" field.
func (_u *JobUpdateOne) ClearPeriodicJobID() *JobUpdateOne {
	_u.mutation.ClearPeriodicJobID()
	return _u
}

// SetPeriodicJob sets the "periodicJob" edge to the PeriodicJob entity.
func (_u *JobUpdateOne) SetPeriodicJob(v *PeriodicJob) *JobUpdateOne {
	return _u.SetPeriodicJobID(v.ID)
}

// Mutation returns the JobMutation object of the builder.
func (_u *JobUpdateOne) Mutation() *JobMutation {
	return _u.mutation
}

// ClearPeriodicJob clears the "periodicJob" edge to the PeriodicJob entity.
func (_u *JobUpdateOne) ClearPeriodicJob() *JobUpdateOne {
	_u.mutation.ClearPeriodicJob()
	return _u
}

// Where appends a list predicates to the JobUpdate builder.
func (_u *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Job entity.
func (_u *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := job.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Job.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	return nil
}

func (_u *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Created(); ok {
		_spec.SetField(job.FieldCreated, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Due(); ok {
		_spec.SetField(job.FieldDue, field.TypeTime, value)
	}
	if value, ok := _u.mutation.OriginallyDue(); ok {
		_spec.SetField(job.FieldOriginallyDue, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Started(); ok {
		_spec.SetField(job.FieldStarted, field.TypeTime, value)
	}
	if _u.mutation.StartedCleared() {
		_spec.ClearField(job.FieldStarted, field.TypeTime)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(job.FieldType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(job.FieldVersion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(job.FieldVersion, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(job.FieldPriority, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.AddedPriority(); ok {
		_spec.AddField(job.FieldPriority, field.TypeInt8, value)
	}
	if value, ok := _u.mutation.Weight(); ok {
		_spec.SetField(job.FieldWeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedWeight(); ok {
		_spec.AddField(job.FieldWeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Body(); ok {
		_spec.SetField(job.FieldBody, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldBody, value)
		})
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Retries(); ok {
		_spec.SetField(job.FieldRetries, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetries(); ok {
		_spec.AddField(job.FieldRetries, field.TypeInt, value)
	}
	if value, ok := _u.mutation.RetriedFraction(); ok {
		_spec.SetField(job.FieldRetriedFraction, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedRetriedFraction(); ok {
		_spec.AddField(job.FieldRetriedFraction, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.LoggedStallWarning(); ok {
		_spec.SetField(job.FieldLoggedStallWarning, field.TypeBool, value)
	}
	if _u.mutation.PeriodicJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.PeriodicJobTable,
			Columns: []string{job.PeriodicJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(periodicjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PeriodicJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.PeriodicJobTable,
			Columns: []string{job.PeriodicJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(periodicjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
