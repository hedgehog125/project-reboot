// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hedgehog125/project-reboot/ent/job"
	"github.com/hedgehog125/project-reboot/ent/predicate"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetCreated sets the "created" field.
func (ju *JobUpdate) SetCreated(t time.Time) *JobUpdate {
	ju.mutation.SetCreated(t)
	return ju
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCreated(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetCreated(*t)
	}
	return ju
}

// SetDue sets the "due" field.
func (ju *JobUpdate) SetDue(t time.Time) *JobUpdate {
	ju.mutation.SetDue(t)
	return ju
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (ju *JobUpdate) SetNillableDue(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetDue(*t)
	}
	return ju
}

// SetType sets the "type" field.
func (ju *JobUpdate) SetType(s string) *JobUpdate {
	ju.mutation.SetType(s)
	return ju
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ju *JobUpdate) SetNillableType(s *string) *JobUpdate {
	if s != nil {
		ju.SetType(*s)
	}
	return ju
}

// SetVersion sets the "version" field.
func (ju *JobUpdate) SetVersion(i int) *JobUpdate {
	ju.mutation.ResetVersion()
	ju.mutation.SetVersion(i)
	return ju
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ju *JobUpdate) SetNillableVersion(i *int) *JobUpdate {
	if i != nil {
		ju.SetVersion(*i)
	}
	return ju
}

// AddVersion adds i to the "version" field.
func (ju *JobUpdate) AddVersion(i int) *JobUpdate {
	ju.mutation.AddVersion(i)
	return ju
}

// SetData sets the "data" field.
func (ju *JobUpdate) SetData(s string) *JobUpdate {
	ju.mutation.SetData(s)
	return ju
}

// SetNillableData sets the "data" field if the given value is not nil.
func (ju *JobUpdate) SetNillableData(s *string) *JobUpdate {
	if s != nil {
		ju.SetData(*s)
	}
	return ju
}

// SetStatus sets the "status" field.
func (ju *JobUpdate) SetStatus(j job.Status) *JobUpdate {
	ju.mutation.SetStatus(j)
	return ju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStatus(j *job.Status) *JobUpdate {
	if j != nil {
		ju.SetStatus(*j)
	}
	return ju
}

// SetRetries sets the "retries" field.
func (ju *JobUpdate) SetRetries(i int) *JobUpdate {
	ju.mutation.ResetRetries()
	ju.mutation.SetRetries(i)
	return ju
}

// SetNillableRetries sets the "retries" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRetries(i *int) *JobUpdate {
	if i != nil {
		ju.SetRetries(*i)
	}
	return ju
}

// AddRetries adds i to the "retries" field.
func (ju *JobUpdate) AddRetries(i int) *JobUpdate {
	ju.mutation.AddRetries(i)
	return ju
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.GetType(); ok {
		if err := job.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Job.type": %w`, err)}
		}
	}
	if v, ok := ju.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	return nil
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Created(); ok {
		_spec.SetField(job.FieldCreated, field.TypeTime, value)
	}
	if value, ok := ju.mutation.Due(); ok {
		_spec.SetField(job.FieldDue, field.TypeTime, value)
	}
	if value, ok := ju.mutation.GetType(); ok {
		_spec.SetField(job.FieldType, field.TypeString, value)
	}
	if value, ok := ju.mutation.Version(); ok {
		_spec.SetField(job.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ju.mutation.AddedVersion(); ok {
		_spec.AddField(job.FieldVersion, field.TypeInt, value)
	}
	if value, ok := ju.mutation.Data(); ok {
		_spec.SetField(job.FieldData, field.TypeJSON, value)
	}
	if value, ok := ju.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ju.mutation.Retries(); ok {
		_spec.SetField(job.FieldRetries, field.TypeInt, value)
	}
	if value, ok := ju.mutation.AddedRetries(); ok {
		_spec.AddField(job.FieldRetries, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetCreated sets the "created" field.
func (juo *JobUpdateOne) SetCreated(t time.Time) *JobUpdateOne {
	juo.mutation.SetCreated(t)
	return juo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreated(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetCreated(*t)
	}
	return juo
}

// SetDue sets the "due" field.
func (juo *JobUpdateOne) SetDue(t time.Time) *JobUpdateOne {
	juo.mutation.SetDue(t)
	return juo
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableDue(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetDue(*t)
	}
	return juo
}

// SetType sets the "type" field.
func (juo *JobUpdateOne) SetType(s string) *JobUpdateOne {
	juo.mutation.SetType(s)
	return juo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableType(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetType(*s)
	}
	return juo
}

// SetVersion sets the "version" field.
func (juo *JobUpdateOne) SetVersion(i int) *JobUpdateOne {
	juo.mutation.ResetVersion()
	juo.mutation.SetVersion(i)
	return juo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableVersion(i *int) *JobUpdateOne {
	if i != nil {
		juo.SetVersion(*i)
	}
	return juo
}

// AddVersion adds i to the "version" field.
func (juo *JobUpdateOne) AddVersion(i int) *JobUpdateOne {
	juo.mutation.AddVersion(i)
	return juo
}

// SetData sets the "data" field.
func (juo *JobUpdateOne) SetData(s string) *JobUpdateOne {
	juo.mutation.SetData(s)
	return juo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableData(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetData(*s)
	}
	return juo
}

// SetStatus sets the "status" field.
func (juo *JobUpdateOne) SetStatus(j job.Status) *JobUpdateOne {
	juo.mutation.SetStatus(j)
	return juo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStatus(j *job.Status) *JobUpdateOne {
	if j != nil {
		juo.SetStatus(*j)
	}
	return juo
}

// SetRetries sets the "retries" field.
func (juo *JobUpdateOne) SetRetries(i int) *JobUpdateOne {
	juo.mutation.ResetRetries()
	juo.mutation.SetRetries(i)
	return juo
}

// SetNillableRetries sets the "retries" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRetries(i *int) *JobUpdateOne {
	if i != nil {
		juo.SetRetries(*i)
	}
	return juo
}

// AddRetries adds i to the "retries" field.
func (juo *JobUpdateOne) AddRetries(i int) *JobUpdateOne {
	juo.mutation.AddRetries(i)
	return juo
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.GetType(); ok {
		if err := job.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Job.type": %w`, err)}
		}
	}
	if v, ok := juo.mutation.Status(); ok {
		if err := job.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Job.status": %w`, err)}
		}
	}
	return nil
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := juo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.Created(); ok {
		_spec.SetField(job.FieldCreated, field.TypeTime, value)
	}
	if value, ok := juo.mutation.Due(); ok {
		_spec.SetField(job.FieldDue, field.TypeTime, value)
	}
	if value, ok := juo.mutation.GetType(); ok {
		_spec.SetField(job.FieldType, field.TypeString, value)
	}
	if value, ok := juo.mutation.Version(); ok {
		_spec.SetField(job.FieldVersion, field.TypeInt, value)
	}
	if value, ok := juo.mutation.AddedVersion(); ok {
		_spec.AddField(job.FieldVersion, field.TypeInt, value)
	}
	if value, ok := juo.mutation.Data(); ok {
		_spec.SetField(job.FieldData, field.TypeJSON, value)
	}
	if value, ok := juo.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := juo.mutation.Retries(); ok {
		_spec.SetField(job.FieldRetries, field.TypeInt, value)
	}
	if value, ok := juo.mutation.AddedRetries(); ok {
		_spec.AddField(job.FieldRetries, field.TypeInt, value)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
