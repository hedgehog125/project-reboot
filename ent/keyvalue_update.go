// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/hedgehog125/project-reboot/ent/keyvalue"
	"github.com/hedgehog125/project-reboot/ent/predicate"
)

// KeyValueUpdate is the builder for updating KeyValue entities.
type KeyValueUpdate struct {
	config
	hooks    []Hook
	mutation *KeyValueMutation
}

// Where appends a list predicates to the KeyValueUpdate builder.
func (_u *KeyValueUpdate) Where(ps ...predicate.KeyValue) *KeyValueUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetKey sets the "key" field.
func (_u *KeyValueUpdate) SetKey(v string) *KeyValueUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *KeyValueUpdate) SetNillableKey(v *string) *KeyValueUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *KeyValueUpdate) SetValue(v json.RawMessage) *KeyValueUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// AppendValue appends value to the "value" field.
func (_u *KeyValueUpdate) AppendValue(v json.RawMessage) *KeyValueUpdate {
	_u.mutation.AppendValue(v)
	return _u
}

// Mutation returns the KeyValueMutation object of the builder.
func (_u *KeyValueUpdate) Mutation() *KeyValueMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *KeyValueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *KeyValueUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *KeyValueUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *KeyValueUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *KeyValueUpdate) check() error {
	if v, ok := _u.mutation.Key(); ok {
		if err := keyvalue.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "KeyValue.key": %w`, err)}
		}
	}
	return nil
}

func (_u *KeyValueUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(keyvalue.Table, keyvalue.Columns, sqlgraph.NewFieldSpec(keyvalue.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(keyvalue.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(keyvalue.FieldValue, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedValue(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keyvalue.FieldValue, value)
		})
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// KeyValueUpdateOne is the builder for updating a single KeyValue entity.
type KeyValueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeyValueMutation
}

// SetKey sets the "key" field.
func (_u *KeyValueUpdateOne) SetKey(v string) *KeyValueUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *KeyValueUpdateOne) SetNillableKey(v *string) *KeyValueUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *KeyValueUpdateOne) SetValue(v json.RawMessage) *KeyValueUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// AppendValue appends value to the "value" field.
func (_u *KeyValueUpdateOne) AppendValue(v json.RawMessage) *KeyValueUpdateOne {
	_u.mutation.AppendValue(v)
	return _u
}

// Mutation returns the KeyValueMutation object of the builder.
func (_u *KeyValueUpdateOne) Mutation() *KeyValueMutation {
	return _u.mutation
}

// Where appends a list predicates to the KeyValueUpdate builder.
func (_u *KeyValueUpdateOne) Where(ps ...predicate.KeyValue) *KeyValueUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *KeyValueUpdateOne) Select(field string, fields ...string) *KeyValueUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated KeyValue entity.
func (_u *KeyValueUpdateOne) Save(ctx context.Context) (*KeyValue, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *KeyValueUpdateOne) SaveX(ctx context.Context) *KeyValue {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *KeyValueUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *KeyValueUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *KeyValueUpdateOne) check() error {
	if v, ok := _u.mutation.Key(); ok {
		if err := keyvalue.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "KeyValue.key": %w`, err)}
		}
	}
	return nil
}

func (_u *KeyValueUpdateOne) sqlSave(ctx context.Context) (_node *KeyValue, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(keyvalue.Table, keyvalue.Columns, sqlgraph.NewFieldSpec(keyvalue.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KeyValue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keyvalue.FieldID)
		for _, f := range fields {
			if !keyvalue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keyvalue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(keyvalue.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(keyvalue.FieldValue, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedValue(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keyvalue.FieldValue, value)
		})
	}
	_node = &KeyValue{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyvalue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
