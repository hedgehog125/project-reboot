// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/logentry"
	"github.com/hedgehog125/project-reboot/ent/user"
)

// LogEntryCreate is the builder for creating a LogEntry entity.
type LogEntryCreate struct {
	config
	mutation *LogEntryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTime sets the "time" field.
func (_c *LogEntryCreate) SetTime(v time.Time) *LogEntryCreate {
	_c.mutation.SetTime(v)
	return _c
}

// SetTimeKnown sets the "timeKnown" field.
func (_c *LogEntryCreate) SetTimeKnown(v bool) *LogEntryCreate {
	_c.mutation.SetTimeKnown(v)
	return _c
}

// SetLevel sets the "level" field.
func (_c *LogEntryCreate) SetLevel(v int) *LogEntryCreate {
	_c.mutation.SetLevel(v)
	return _c
}

// SetMessage sets the "message" field.
func (_c *LogEntryCreate) SetMessage(v string) *LogEntryCreate {
	_c.mutation.SetMessage(v)
	return _c
}

// SetAttributes sets the "attributes" field.
func (_c *LogEntryCreate) SetAttributes(v map[string]interface{}) *LogEntryCreate {
	_c.mutation.SetAttributes(v)
	return _c
}

// SetSourceFile sets the "sourceFile" field.
func (_c *LogEntryCreate) SetSourceFile(v string) *LogEntryCreate {
	_c.mutation.SetSourceFile(v)
	return _c
}

// SetSourceFunction sets the "sourceFunction" field.
func (_c *LogEntryCreate) SetSourceFunction(v string) *LogEntryCreate {
	_c.mutation.SetSourceFunction(v)
	return _c
}

// SetSourceLine sets the "sourceLine" field.
func (_c *LogEntryCreate) SetSourceLine(v int) *LogEntryCreate {
	_c.mutation.SetSourceLine(v)
	return _c
}

// SetPublicMessage sets the "publicMessage" field.
func (_c *LogEntryCreate) SetPublicMessage(v string) *LogEntryCreate {
	_c.mutation.SetPublicMessage(v)
	return _c
}

// SetID sets the "id" field.
func (_c *LogEntryCreate) SetID(v uuid.UUID) *LogEntryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *LogEntryCreate) SetNillableID(v *uuid.UUID) *LogEntryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_c *LogEntryCreate) SetUserID(id int) *LogEntryCreate {
	_c.mutation.SetUserID(id)
	return _c
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (_c *LogEntryCreate) SetNillableUserID(id *int) *LogEntryCreate {
	if id != nil {
		_c = _c.SetUserID(*id)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *LogEntryCreate) SetUser(v *User) *LogEntryCreate {
	return _c.SetUserID(v.ID)
}

// Mutation returns the LogEntryMutation object of the builder.
func (_c *LogEntryCreate) Mutation() *LogEntryMutation {
	return _c.mutation
}

// Save creates the LogEntry in the database.
func (_c *LogEntryCreate) Save(ctx context.Context) (*LogEntry, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *LogEntryCreate) SaveX(ctx context.Context) *LogEntry {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LogEntryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LogEntryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *LogEntryCreate) defaults() {
	if _, ok := _c.mutation.ID(); !ok {
		v := logentry.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *LogEntryCreate) check() error {
	if _, ok := _c.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "LogEntry.time"`)}
	}
	if _, ok := _c.mutation.TimeKnown(); !ok {
		return &ValidationError{Name: "timeKnown", err: errors.New(`ent: missing required field "LogEntry.timeKnown"`)}
	}
	if _, ok := _c.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "LogEntry.level"`)}
	}
	if _, ok := _c.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "LogEntry.message"`)}
	}
	if _, ok := _c.mutation.Attributes(); !ok {
		return &ValidationError{Name: "attributes", err: errors.New(`ent: missing required field "LogEntry.attributes"`)}
	}
	if _, ok := _c.mutation.SourceFile(); !ok {
		return &ValidationError{Name: "sourceFile", err: errors.New(`ent: missing required field "LogEntry.sourceFile"`)}
	}
	if _, ok := _c.mutation.SourceFunction(); !ok {
		return &ValidationError{Name: "sourceFunction", err: errors.New(`ent: missing required field "LogEntry.sourceFunction"`)}
	}
	if _, ok := _c.mutation.SourceLine(); !ok {
		return &ValidationError{Name: "sourceLine", err: errors.New(`ent: missing required field "LogEntry.sourceLine"`)}
	}
	if _, ok := _c.mutation.PublicMessage(); !ok {
		return &ValidationError{Name: "publicMessage", err: errors.New(`ent: missing required field "LogEntry.publicMessage"`)}
	}
	return nil
}

func (_c *LogEntryCreate) sqlSave(ctx context.Context) (*LogEntry, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *LogEntryCreate) createSpec() (*LogEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &LogEntry{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(logentry.Table, sqlgraph.NewFieldSpec(logentry.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Time(); ok {
		_spec.SetField(logentry.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if value, ok := _c.mutation.TimeKnown(); ok {
		_spec.SetField(logentry.FieldTimeKnown, field.TypeBool, value)
		_node.TimeKnown = value
	}
	if value, ok := _c.mutation.Level(); ok {
		_spec.SetField(logentry.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := _c.mutation.Message(); ok {
		_spec.SetField(logentry.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := _c.mutation.Attributes(); ok {
		_spec.SetField(logentry.FieldAttributes, field.TypeJSON, value)
		_node.Attributes = value
	}
	if value, ok := _c.mutation.SourceFile(); ok {
		_spec.SetField(logentry.FieldSourceFile, field.TypeString, value)
		_node.SourceFile = value
	}
	if value, ok := _c.mutation.SourceFunction(); ok {
		_spec.SetField(logentry.FieldSourceFunction, field.TypeString, value)
		_node.SourceFunction = value
	}
	if value, ok := _c.mutation.SourceLine(); ok {
		_spec.SetField(logentry.FieldSourceLine, field.TypeInt, value)
		_node.SourceLine = value
	}
	if value, ok := _c.mutation.PublicMessage(); ok {
		_spec.SetField(logentry.FieldPublicMessage, field.TypeString, value)
		_node.PublicMessage = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   logentry.UserTable,
			Columns: []string{logentry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.log_entry_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LogEntry.Create().
//		SetTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LogEntryUpsert) {
//			SetTime(v+v).
//		}).
//		Exec(ctx)
func (_c *LogEntryCreate) OnConflict(opts ...sql.ConflictOption) *LogEntryUpsertOne {
	_c.conflict = opts
	return &LogEntryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LogEntry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *LogEntryCreate) OnConflictColumns(columns ...string) *LogEntryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &LogEntryUpsertOne{
		create: _c,
	}
}

type (
	// LogEntryUpsertOne is the builder for "upsert"-ing
	//  one LogEntry node.
	LogEntryUpsertOne struct {
		create *LogEntryCreate
	}

	// LogEntryUpsert is the "OnConflict" setter.
	LogEntryUpsert struct {
		*sql.UpdateSet
	}
)

// SetTime sets the "time" field.
func (u *LogEntryUpsert) SetTime(v time.Time) *LogEntryUpsert {
	u.Set(logentry.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *LogEntryUpsert) UpdateTime() *LogEntryUpsert {
	u.SetExcluded(logentry.FieldTime)
	return u
}

// SetTimeKnown sets the "timeKnown" field.
func (u *LogEntryUpsert) SetTimeKnown(v bool) *LogEntryUpsert {
	u.Set(logentry.FieldTimeKnown, v)
	return u
}

// UpdateTimeKnown sets the "timeKnown" field to the value that was provided on create.
func (u *LogEntryUpsert) UpdateTimeKnown() *LogEntryUpsert {
	u.SetExcluded(logentry.FieldTimeKnown)
	return u
}

// SetLevel sets the "level" field.
func (u *LogEntryUpsert) SetLevel(v int) *LogEntryUpsert {
	u.Set(logentry.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *LogEntryUpsert) UpdateLevel() *LogEntryUpsert {
	u.SetExcluded(logentry.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *LogEntryUpsert) AddLevel(v int) *LogEntryUpsert {
	u.Add(logentry.FieldLevel, v)
	return u
}

// SetMessage sets the "message" field.
func (u *LogEntryUpsert) SetMessage(v string) *LogEntryUpsert {
	u.Set(logentry.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *LogEntryUpsert) UpdateMessage() *LogEntryUpsert {
	u.SetExcluded(logentry.FieldMessage)
	return u
}

// SetAttributes sets the "attributes" field.
func (u *LogEntryUpsert) SetAttributes(v map[string]interface{}) *LogEntryUpsert {
	u.Set(logentry.FieldAttributes, v)
	return u
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *LogEntryUpsert) UpdateAttributes() *LogEntryUpsert {
	u.SetExcluded(logentry.FieldAttributes)
	return u
}

// SetSourceFile sets the "sourceFile" field.
func (u *LogEntryUpsert) SetSourceFile(v string) *LogEntryUpsert {
	u.Set(logentry.FieldSourceFile, v)
	return u
}

// UpdateSourceFile sets the "sourceFile" field to the value that was provided on create.
func (u *LogEntryUpsert) UpdateSourceFile() *LogEntryUpsert {
	u.SetExcluded(logentry.FieldSourceFile)
	return u
}

// SetSourceFunction sets the "sourceFunction" field.
func (u *LogEntryUpsert) SetSourceFunction(v string) *LogEntryUpsert {
	u.Set(logentry.FieldSourceFunction, v)
	return u
}

// UpdateSourceFunction sets the "sourceFunction" field to the value that was provided on create.
func (u *LogEntryUpsert) UpdateSourceFunction() *LogEntryUpsert {
	u.SetExcluded(logentry.FieldSourceFunction)
	return u
}

// SetSourceLine sets the "sourceLine" field.
func (u *LogEntryUpsert) SetSourceLine(v int) *LogEntryUpsert {
	u.Set(logentry.FieldSourceLine, v)
	return u
}

// UpdateSourceLine sets the "sourceLine" field to the value that was provided on create.
func (u *LogEntryUpsert) UpdateSourceLine() *LogEntryUpsert {
	u.SetExcluded(logentry.FieldSourceLine)
	return u
}

// AddSourceLine adds v to the "sourceLine" field.
func (u *LogEntryUpsert) AddSourceLine(v int) *LogEntryUpsert {
	u.Add(logentry.FieldSourceLine, v)
	return u
}

// SetPublicMessage sets the "publicMessage" field.
func (u *LogEntryUpsert) SetPublicMessage(v string) *LogEntryUpsert {
	u.Set(logentry.FieldPublicMessage, v)
	return u
}

// UpdatePublicMessage sets the "publicMessage" field to the value that was provided on create.
func (u *LogEntryUpsert) UpdatePublicMessage() *LogEntryUpsert {
	u.SetExcluded(logentry.FieldPublicMessage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LogEntry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(logentry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LogEntryUpsertOne) UpdateNewValues() *LogEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(logentry.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LogEntry.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LogEntryUpsertOne) Ignore() *LogEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LogEntryUpsertOne) DoNothing() *LogEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LogEntryCreate.OnConflict
// documentation for more info.
func (u *LogEntryUpsertOne) Update(set func(*LogEntryUpsert)) *LogEntryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LogEntryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTime sets the "time" field.
func (u *LogEntryUpsertOne) SetTime(v time.Time) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *LogEntryUpsertOne) UpdateTime() *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateTime()
	})
}

// SetTimeKnown sets the "timeKnown" field.
func (u *LogEntryUpsertOne) SetTimeKnown(v bool) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetTimeKnown(v)
	})
}

// UpdateTimeKnown sets the "timeKnown" field to the value that was provided on create.
func (u *LogEntryUpsertOne) UpdateTimeKnown() *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateTimeKnown()
	})
}

// SetLevel sets the "level" field.
func (u *LogEntryUpsertOne) SetLevel(v int) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *LogEntryUpsertOne) AddLevel(v int) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *LogEntryUpsertOne) UpdateLevel() *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateLevel()
	})
}

// SetMessage sets the "message" field.
func (u *LogEntryUpsertOne) SetMessage(v string) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *LogEntryUpsertOne) UpdateMessage() *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateMessage()
	})
}

// SetAttributes sets the "attributes" field.
func (u *LogEntryUpsertOne) SetAttributes(v map[string]interface{}) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *LogEntryUpsertOne) UpdateAttributes() *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateAttributes()
	})
}

// SetSourceFile sets the "sourceFile" field.
func (u *LogEntryUpsertOne) SetSourceFile(v string) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetSourceFile(v)
	})
}

// UpdateSourceFile sets the "sourceFile" field to the value that was provided on create.
func (u *LogEntryUpsertOne) UpdateSourceFile() *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateSourceFile()
	})
}

// SetSourceFunction sets the "sourceFunction" field.
func (u *LogEntryUpsertOne) SetSourceFunction(v string) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetSourceFunction(v)
	})
}

// UpdateSourceFunction sets the "sourceFunction" field to the value that was provided on create.
func (u *LogEntryUpsertOne) UpdateSourceFunction() *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateSourceFunction()
	})
}

// SetSourceLine sets the "sourceLine" field.
func (u *LogEntryUpsertOne) SetSourceLine(v int) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetSourceLine(v)
	})
}

// AddSourceLine adds v to the "sourceLine" field.
func (u *LogEntryUpsertOne) AddSourceLine(v int) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.AddSourceLine(v)
	})
}

// UpdateSourceLine sets the "sourceLine" field to the value that was provided on create.
func (u *LogEntryUpsertOne) UpdateSourceLine() *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateSourceLine()
	})
}

// SetPublicMessage sets the "publicMessage" field.
func (u *LogEntryUpsertOne) SetPublicMessage(v string) *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetPublicMessage(v)
	})
}

// UpdatePublicMessage sets the "publicMessage" field to the value that was provided on create.
func (u *LogEntryUpsertOne) UpdatePublicMessage() *LogEntryUpsertOne {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdatePublicMessage()
	})
}

// Exec executes the query.
func (u *LogEntryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LogEntryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LogEntryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LogEntryUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LogEntryUpsertOne.ID is not supported by MySQL driver. Use LogEntryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LogEntryUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LogEntryCreateBulk is the builder for creating many LogEntry entities in bulk.
type LogEntryCreateBulk struct {
	config
	err      error
	builders []*LogEntryCreate
	conflict []sql.ConflictOption
}

// Save creates the LogEntry entities in the database.
func (_c *LogEntryCreateBulk) Save(ctx context.Context) ([]*LogEntry, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*LogEntry, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *LogEntryCreateBulk) SaveX(ctx context.Context) []*LogEntry {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LogEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LogEntryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LogEntry.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LogEntryUpsert) {
//			SetTime(v+v).
//		}).
//		Exec(ctx)
func (_c *LogEntryCreateBulk) OnConflict(opts ...sql.ConflictOption) *LogEntryUpsertBulk {
	_c.conflict = opts
	return &LogEntryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LogEntry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *LogEntryCreateBulk) OnConflictColumns(columns ...string) *LogEntryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &LogEntryUpsertBulk{
		create: _c,
	}
}

// LogEntryUpsertBulk is the builder for "upsert"-ing
// a bulk of LogEntry nodes.
type LogEntryUpsertBulk struct {
	create *LogEntryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LogEntry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(logentry.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LogEntryUpsertBulk) UpdateNewValues() *LogEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(logentry.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LogEntry.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LogEntryUpsertBulk) Ignore() *LogEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LogEntryUpsertBulk) DoNothing() *LogEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LogEntryCreateBulk.OnConflict
// documentation for more info.
func (u *LogEntryUpsertBulk) Update(set func(*LogEntryUpsert)) *LogEntryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LogEntryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTime sets the "time" field.
func (u *LogEntryUpsertBulk) SetTime(v time.Time) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *LogEntryUpsertBulk) UpdateTime() *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateTime()
	})
}

// SetTimeKnown sets the "timeKnown" field.
func (u *LogEntryUpsertBulk) SetTimeKnown(v bool) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetTimeKnown(v)
	})
}

// UpdateTimeKnown sets the "timeKnown" field to the value that was provided on create.
func (u *LogEntryUpsertBulk) UpdateTimeKnown() *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateTimeKnown()
	})
}

// SetLevel sets the "level" field.
func (u *LogEntryUpsertBulk) SetLevel(v int) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *LogEntryUpsertBulk) AddLevel(v int) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *LogEntryUpsertBulk) UpdateLevel() *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateLevel()
	})
}

// SetMessage sets the "message" field.
func (u *LogEntryUpsertBulk) SetMessage(v string) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *LogEntryUpsertBulk) UpdateMessage() *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateMessage()
	})
}

// SetAttributes sets the "attributes" field.
func (u *LogEntryUpsertBulk) SetAttributes(v map[string]interface{}) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetAttributes(v)
	})
}

// UpdateAttributes sets the "attributes" field to the value that was provided on create.
func (u *LogEntryUpsertBulk) UpdateAttributes() *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateAttributes()
	})
}

// SetSourceFile sets the "sourceFile" field.
func (u *LogEntryUpsertBulk) SetSourceFile(v string) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetSourceFile(v)
	})
}

// UpdateSourceFile sets the "sourceFile" field to the value that was provided on create.
func (u *LogEntryUpsertBulk) UpdateSourceFile() *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateSourceFile()
	})
}

// SetSourceFunction sets the "sourceFunction" field.
func (u *LogEntryUpsertBulk) SetSourceFunction(v string) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetSourceFunction(v)
	})
}

// UpdateSourceFunction sets the "sourceFunction" field to the value that was provided on create.
func (u *LogEntryUpsertBulk) UpdateSourceFunction() *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateSourceFunction()
	})
}

// SetSourceLine sets the "sourceLine" field.
func (u *LogEntryUpsertBulk) SetSourceLine(v int) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetSourceLine(v)
	})
}

// AddSourceLine adds v to the "sourceLine" field.
func (u *LogEntryUpsertBulk) AddSourceLine(v int) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.AddSourceLine(v)
	})
}

// UpdateSourceLine sets the "sourceLine" field to the value that was provided on create.
func (u *LogEntryUpsertBulk) UpdateSourceLine() *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdateSourceLine()
	})
}

// SetPublicMessage sets the "publicMessage" field.
func (u *LogEntryUpsertBulk) SetPublicMessage(v string) *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.SetPublicMessage(v)
	})
}

// UpdatePublicMessage sets the "publicMessage" field to the value that was provided on create.
func (u *LogEntryUpsertBulk) UpdatePublicMessage() *LogEntryUpsertBulk {
	return u.Update(func(s *LogEntryUpsert) {
		s.UpdatePublicMessage()
	})
}

// Exec executes the query.
func (u *LogEntryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LogEntryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LogEntryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LogEntryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
