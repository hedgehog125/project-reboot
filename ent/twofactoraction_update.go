// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hedgehog125/project-reboot/ent/predicate"
	"github.com/hedgehog125/project-reboot/ent/twofactoraction"
)

// TwoFactorActionUpdate is the builder for updating TwoFactorAction entities.
type TwoFactorActionUpdate struct {
	config
	hooks    []Hook
	mutation *TwoFactorActionMutation
}

// Where appends a list predicates to the TwoFactorActionUpdate builder.
func (tfau *TwoFactorActionUpdate) Where(ps ...predicate.TwoFactorAction) *TwoFactorActionUpdate {
	tfau.mutation.Where(ps...)
	return tfau
}

// SetType sets the "type" field.
func (tfau *TwoFactorActionUpdate) SetType(s string) *TwoFactorActionUpdate {
	tfau.mutation.SetType(s)
	return tfau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tfau *TwoFactorActionUpdate) SetNillableType(s *string) *TwoFactorActionUpdate {
	if s != nil {
		tfau.SetType(*s)
	}
	return tfau
}

// SetVersion sets the "version" field.
func (tfau *TwoFactorActionUpdate) SetVersion(i int) *TwoFactorActionUpdate {
	tfau.mutation.ResetVersion()
	tfau.mutation.SetVersion(i)
	return tfau
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tfau *TwoFactorActionUpdate) SetNillableVersion(i *int) *TwoFactorActionUpdate {
	if i != nil {
		tfau.SetVersion(*i)
	}
	return tfau
}

// AddVersion adds i to the "version" field.
func (tfau *TwoFactorActionUpdate) AddVersion(i int) *TwoFactorActionUpdate {
	tfau.mutation.AddVersion(i)
	return tfau
}

// SetData sets the "data" field.
func (tfau *TwoFactorActionUpdate) SetData(m *map[string]interface{}) *TwoFactorActionUpdate {
	tfau.mutation.SetData(m)
	return tfau
}

// SetExpiresAt sets the "expiresAt" field.
func (tfau *TwoFactorActionUpdate) SetExpiresAt(t time.Time) *TwoFactorActionUpdate {
	tfau.mutation.SetExpiresAt(t)
	return tfau
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (tfau *TwoFactorActionUpdate) SetNillableExpiresAt(t *time.Time) *TwoFactorActionUpdate {
	if t != nil {
		tfau.SetExpiresAt(*t)
	}
	return tfau
}

// SetCode sets the "code" field.
func (tfau *TwoFactorActionUpdate) SetCode(s string) *TwoFactorActionUpdate {
	tfau.mutation.SetCode(s)
	return tfau
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tfau *TwoFactorActionUpdate) SetNillableCode(s *string) *TwoFactorActionUpdate {
	if s != nil {
		tfau.SetCode(*s)
	}
	return tfau
}

// Mutation returns the TwoFactorActionMutation object of the builder.
func (tfau *TwoFactorActionUpdate) Mutation() *TwoFactorActionMutation {
	return tfau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfau *TwoFactorActionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tfau.sqlSave, tfau.mutation, tfau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfau *TwoFactorActionUpdate) SaveX(ctx context.Context) int {
	affected, err := tfau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfau *TwoFactorActionUpdate) Exec(ctx context.Context) error {
	_, err := tfau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfau *TwoFactorActionUpdate) ExecX(ctx context.Context) {
	if err := tfau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfau *TwoFactorActionUpdate) check() error {
	if v, ok := tfau.mutation.GetType(); ok {
		if err := twofactoraction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TwoFactorAction.type": %w`, err)}
		}
	}
	if v, ok := tfau.mutation.Code(); ok {
		if err := twofactoraction.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "TwoFactorAction.code": %w`, err)}
		}
	}
	return nil
}

func (tfau *TwoFactorActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tfau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(twofactoraction.Table, twofactoraction.Columns, sqlgraph.NewFieldSpec(twofactoraction.FieldID, field.TypeInt))
	if ps := tfau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfau.mutation.GetType(); ok {
		_spec.SetField(twofactoraction.FieldType, field.TypeString, value)
	}
	if value, ok := tfau.mutation.Version(); ok {
		_spec.SetField(twofactoraction.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tfau.mutation.AddedVersion(); ok {
		_spec.AddField(twofactoraction.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tfau.mutation.Data(); ok {
		_spec.SetField(twofactoraction.FieldData, field.TypeJSON, value)
	}
	if value, ok := tfau.mutation.ExpiresAt(); ok {
		_spec.SetField(twofactoraction.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := tfau.mutation.Code(); ok {
		_spec.SetField(twofactoraction.FieldCode, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twofactoraction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tfau.mutation.done = true
	return n, nil
}

// TwoFactorActionUpdateOne is the builder for updating a single TwoFactorAction entity.
type TwoFactorActionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TwoFactorActionMutation
}

// SetType sets the "type" field.
func (tfauo *TwoFactorActionUpdateOne) SetType(s string) *TwoFactorActionUpdateOne {
	tfauo.mutation.SetType(s)
	return tfauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tfauo *TwoFactorActionUpdateOne) SetNillableType(s *string) *TwoFactorActionUpdateOne {
	if s != nil {
		tfauo.SetType(*s)
	}
	return tfauo
}

// SetVersion sets the "version" field.
func (tfauo *TwoFactorActionUpdateOne) SetVersion(i int) *TwoFactorActionUpdateOne {
	tfauo.mutation.ResetVersion()
	tfauo.mutation.SetVersion(i)
	return tfauo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tfauo *TwoFactorActionUpdateOne) SetNillableVersion(i *int) *TwoFactorActionUpdateOne {
	if i != nil {
		tfauo.SetVersion(*i)
	}
	return tfauo
}

// AddVersion adds i to the "version" field.
func (tfauo *TwoFactorActionUpdateOne) AddVersion(i int) *TwoFactorActionUpdateOne {
	tfauo.mutation.AddVersion(i)
	return tfauo
}

// SetData sets the "data" field.
func (tfauo *TwoFactorActionUpdateOne) SetData(m *map[string]interface{}) *TwoFactorActionUpdateOne {
	tfauo.mutation.SetData(m)
	return tfauo
}

// SetExpiresAt sets the "expiresAt" field.
func (tfauo *TwoFactorActionUpdateOne) SetExpiresAt(t time.Time) *TwoFactorActionUpdateOne {
	tfauo.mutation.SetExpiresAt(t)
	return tfauo
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (tfauo *TwoFactorActionUpdateOne) SetNillableExpiresAt(t *time.Time) *TwoFactorActionUpdateOne {
	if t != nil {
		tfauo.SetExpiresAt(*t)
	}
	return tfauo
}

// SetCode sets the "code" field.
func (tfauo *TwoFactorActionUpdateOne) SetCode(s string) *TwoFactorActionUpdateOne {
	tfauo.mutation.SetCode(s)
	return tfauo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tfauo *TwoFactorActionUpdateOne) SetNillableCode(s *string) *TwoFactorActionUpdateOne {
	if s != nil {
		tfauo.SetCode(*s)
	}
	return tfauo
}

// Mutation returns the TwoFactorActionMutation object of the builder.
func (tfauo *TwoFactorActionUpdateOne) Mutation() *TwoFactorActionMutation {
	return tfauo.mutation
}

// Where appends a list predicates to the TwoFactorActionUpdate builder.
func (tfauo *TwoFactorActionUpdateOne) Where(ps ...predicate.TwoFactorAction) *TwoFactorActionUpdateOne {
	tfauo.mutation.Where(ps...)
	return tfauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfauo *TwoFactorActionUpdateOne) Select(field string, fields ...string) *TwoFactorActionUpdateOne {
	tfauo.fields = append([]string{field}, fields...)
	return tfauo
}

// Save executes the query and returns the updated TwoFactorAction entity.
func (tfauo *TwoFactorActionUpdateOne) Save(ctx context.Context) (*TwoFactorAction, error) {
	return withHooks(ctx, tfauo.sqlSave, tfauo.mutation, tfauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfauo *TwoFactorActionUpdateOne) SaveX(ctx context.Context) *TwoFactorAction {
	node, err := tfauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfauo *TwoFactorActionUpdateOne) Exec(ctx context.Context) error {
	_, err := tfauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfauo *TwoFactorActionUpdateOne) ExecX(ctx context.Context) {
	if err := tfauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfauo *TwoFactorActionUpdateOne) check() error {
	if v, ok := tfauo.mutation.GetType(); ok {
		if err := twofactoraction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "TwoFactorAction.type": %w`, err)}
		}
	}
	if v, ok := tfauo.mutation.Code(); ok {
		if err := twofactoraction.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "TwoFactorAction.code": %w`, err)}
		}
	}
	return nil
}

func (tfauo *TwoFactorActionUpdateOne) sqlSave(ctx context.Context) (_node *TwoFactorAction, err error) {
	if err := tfauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(twofactoraction.Table, twofactoraction.Columns, sqlgraph.NewFieldSpec(twofactoraction.FieldID, field.TypeInt))
	id, ok := tfauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TwoFactorAction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twofactoraction.FieldID)
		for _, f := range fields {
			if !twofactoraction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != twofactoraction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfauo.mutation.GetType(); ok {
		_spec.SetField(twofactoraction.FieldType, field.TypeString, value)
	}
	if value, ok := tfauo.mutation.Version(); ok {
		_spec.SetField(twofactoraction.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tfauo.mutation.AddedVersion(); ok {
		_spec.AddField(twofactoraction.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tfauo.mutation.Data(); ok {
		_spec.SetField(twofactoraction.FieldData, field.TypeJSON, value)
	}
	if value, ok := tfauo.mutation.ExpiresAt(); ok {
		_spec.SetField(twofactoraction.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := tfauo.mutation.Code(); ok {
		_spec.SetField(twofactoraction.FieldCode, field.TypeString, value)
	}
	_node = &TwoFactorAction{config: tfauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twofactoraction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tfauo.mutation.done = true
	return _node, nil
}
