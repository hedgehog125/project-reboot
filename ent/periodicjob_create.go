// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/job"
	"github.com/hedgehog125/project-reboot/ent/periodicjob"
)

// PeriodicJobCreate is the builder for creating a PeriodicJob entity.
type PeriodicJobCreate struct {
	config
	mutation *PeriodicJobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (_c *PeriodicJobCreate) SetType(v string) *PeriodicJobCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetVersion sets the "version" field.
func (_c *PeriodicJobCreate) SetVersion(v int) *PeriodicJobCreate {
	_c.mutation.SetVersion(v)
	return _c
}

// SetLastScheduledNewJob sets the "lastScheduledNewJob" field.
func (_c *PeriodicJobCreate) SetLastScheduledNewJob(v time.Time) *PeriodicJobCreate {
	_c.mutation.SetLastScheduledNewJob(v)
	return _c
}

// SetNillableLastScheduledNewJob sets the "lastScheduledNewJob" field if the given value is not nil.
func (_c *PeriodicJobCreate) SetNillableLastScheduledNewJob(v *time.Time) *PeriodicJobCreate {
	if v != nil {
		_c.SetLastScheduledNewJob(*v)
	}
	return _c
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (_c *PeriodicJobCreate) AddJobIDs(ids ...uuid.UUID) *PeriodicJobCreate {
	_c.mutation.AddJobIDs(ids...)
	return _c
}

// AddJobs adds the "jobs" edges to the Job entity.
func (_c *PeriodicJobCreate) AddJobs(v ...*Job) *PeriodicJobCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobIDs(ids...)
}

// Mutation returns the PeriodicJobMutation object of the builder.
func (_c *PeriodicJobCreate) Mutation() *PeriodicJobMutation {
	return _c.mutation
}

// Save creates the PeriodicJob in the database.
func (_c *PeriodicJobCreate) Save(ctx context.Context) (*PeriodicJob, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PeriodicJobCreate) SaveX(ctx context.Context) *PeriodicJob {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PeriodicJobCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PeriodicJobCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PeriodicJobCreate) check() error {
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PeriodicJob.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := periodicjob.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PeriodicJob.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "PeriodicJob.version"`)}
	}
	return nil
}

func (_c *PeriodicJobCreate) sqlSave(ctx context.Context) (*PeriodicJob, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PeriodicJobCreate) createSpec() (*PeriodicJob, *sqlgraph.CreateSpec) {
	var (
		_node = &PeriodicJob{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(periodicjob.Table, sqlgraph.NewFieldSpec(periodicjob.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(periodicjob.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Version(); ok {
		_spec.SetField(periodicjob.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := _c.mutation.LastScheduledNewJob(); ok {
		_spec.SetField(periodicjob.FieldLastScheduledNewJob, field.TypeTime, value)
		_node.LastScheduledNewJob = value
	}
	if nodes := _c.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   periodicjob.JobsTable,
			Columns: []string{periodicjob.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PeriodicJob.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PeriodicJobUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *PeriodicJobCreate) OnConflict(opts ...sql.ConflictOption) *PeriodicJobUpsertOne {
	_c.conflict = opts
	return &PeriodicJobUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PeriodicJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PeriodicJobCreate) OnConflictColumns(columns ...string) *PeriodicJobUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PeriodicJobUpsertOne{
		create: _c,
	}
}

type (
	// PeriodicJobUpsertOne is the builder for "upsert"-ing
	//  one PeriodicJob node.
	PeriodicJobUpsertOne struct {
		create *PeriodicJobCreate
	}

	// PeriodicJobUpsert is the "OnConflict" setter.
	PeriodicJobUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *PeriodicJobUpsert) SetType(v string) *PeriodicJobUpsert {
	u.Set(periodicjob.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PeriodicJobUpsert) UpdateType() *PeriodicJobUpsert {
	u.SetExcluded(periodicjob.FieldType)
	return u
}

// SetVersion sets the "version" field.
func (u *PeriodicJobUpsert) SetVersion(v int) *PeriodicJobUpsert {
	u.Set(periodicjob.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *PeriodicJobUpsert) UpdateVersion() *PeriodicJobUpsert {
	u.SetExcluded(periodicjob.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *PeriodicJobUpsert) AddVersion(v int) *PeriodicJobUpsert {
	u.Add(periodicjob.FieldVersion, v)
	return u
}

// SetLastScheduledNewJob sets the "lastScheduledNewJob" field.
func (u *PeriodicJobUpsert) SetLastScheduledNewJob(v time.Time) *PeriodicJobUpsert {
	u.Set(periodicjob.FieldLastScheduledNewJob, v)
	return u
}

// UpdateLastScheduledNewJob sets the "lastScheduledNewJob" field to the value that was provided on create.
func (u *PeriodicJobUpsert) UpdateLastScheduledNewJob() *PeriodicJobUpsert {
	u.SetExcluded(periodicjob.FieldLastScheduledNewJob)
	return u
}

// ClearLastScheduledNewJob clears the value of the "lastScheduledNewJob" field.
func (u *PeriodicJobUpsert) ClearLastScheduledNewJob() *PeriodicJobUpsert {
	u.SetNull(periodicjob.FieldLastScheduledNewJob)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PeriodicJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PeriodicJobUpsertOne) UpdateNewValues() *PeriodicJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PeriodicJob.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PeriodicJobUpsertOne) Ignore() *PeriodicJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PeriodicJobUpsertOne) DoNothing() *PeriodicJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PeriodicJobCreate.OnConflict
// documentation for more info.
func (u *PeriodicJobUpsertOne) Update(set func(*PeriodicJobUpsert)) *PeriodicJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PeriodicJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *PeriodicJobUpsertOne) SetType(v string) *PeriodicJobUpsertOne {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PeriodicJobUpsertOne) UpdateType() *PeriodicJobUpsertOne {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.UpdateType()
	})
}

// SetVersion sets the "version" field.
func (u *PeriodicJobUpsertOne) SetVersion(v int) *PeriodicJobUpsertOne {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *PeriodicJobUpsertOne) AddVersion(v int) *PeriodicJobUpsertOne {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *PeriodicJobUpsertOne) UpdateVersion() *PeriodicJobUpsertOne {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.UpdateVersion()
	})
}

// SetLastScheduledNewJob sets the "lastScheduledNewJob" field.
func (u *PeriodicJobUpsertOne) SetLastScheduledNewJob(v time.Time) *PeriodicJobUpsertOne {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.SetLastScheduledNewJob(v)
	})
}

// UpdateLastScheduledNewJob sets the "lastScheduledNewJob" field to the value that was provided on create.
func (u *PeriodicJobUpsertOne) UpdateLastScheduledNewJob() *PeriodicJobUpsertOne {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.UpdateLastScheduledNewJob()
	})
}

// ClearLastScheduledNewJob clears the value of the "lastScheduledNewJob" field.
func (u *PeriodicJobUpsertOne) ClearLastScheduledNewJob() *PeriodicJobUpsertOne {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.ClearLastScheduledNewJob()
	})
}

// Exec executes the query.
func (u *PeriodicJobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PeriodicJobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PeriodicJobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PeriodicJobUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PeriodicJobUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PeriodicJobCreateBulk is the builder for creating many PeriodicJob entities in bulk.
type PeriodicJobCreateBulk struct {
	config
	err      error
	builders []*PeriodicJobCreate
	conflict []sql.ConflictOption
}

// Save creates the PeriodicJob entities in the database.
func (_c *PeriodicJobCreateBulk) Save(ctx context.Context) ([]*PeriodicJob, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PeriodicJob, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PeriodicJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PeriodicJobCreateBulk) SaveX(ctx context.Context) []*PeriodicJob {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PeriodicJobCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PeriodicJobCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PeriodicJob.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PeriodicJobUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (_c *PeriodicJobCreateBulk) OnConflict(opts ...sql.ConflictOption) *PeriodicJobUpsertBulk {
	_c.conflict = opts
	return &PeriodicJobUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PeriodicJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PeriodicJobCreateBulk) OnConflictColumns(columns ...string) *PeriodicJobUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PeriodicJobUpsertBulk{
		create: _c,
	}
}

// PeriodicJobUpsertBulk is the builder for "upsert"-ing
// a bulk of PeriodicJob nodes.
type PeriodicJobUpsertBulk struct {
	create *PeriodicJobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PeriodicJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PeriodicJobUpsertBulk) UpdateNewValues() *PeriodicJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PeriodicJob.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PeriodicJobUpsertBulk) Ignore() *PeriodicJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PeriodicJobUpsertBulk) DoNothing() *PeriodicJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PeriodicJobCreateBulk.OnConflict
// documentation for more info.
func (u *PeriodicJobUpsertBulk) Update(set func(*PeriodicJobUpsert)) *PeriodicJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PeriodicJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *PeriodicJobUpsertBulk) SetType(v string) *PeriodicJobUpsertBulk {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PeriodicJobUpsertBulk) UpdateType() *PeriodicJobUpsertBulk {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.UpdateType()
	})
}

// SetVersion sets the "version" field.
func (u *PeriodicJobUpsertBulk) SetVersion(v int) *PeriodicJobUpsertBulk {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *PeriodicJobUpsertBulk) AddVersion(v int) *PeriodicJobUpsertBulk {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *PeriodicJobUpsertBulk) UpdateVersion() *PeriodicJobUpsertBulk {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.UpdateVersion()
	})
}

// SetLastScheduledNewJob sets the "lastScheduledNewJob" field.
func (u *PeriodicJobUpsertBulk) SetLastScheduledNewJob(v time.Time) *PeriodicJobUpsertBulk {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.SetLastScheduledNewJob(v)
	})
}

// UpdateLastScheduledNewJob sets the "lastScheduledNewJob" field to the value that was provided on create.
func (u *PeriodicJobUpsertBulk) UpdateLastScheduledNewJob() *PeriodicJobUpsertBulk {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.UpdateLastScheduledNewJob()
	})
}

// ClearLastScheduledNewJob clears the value of the "lastScheduledNewJob" field.
func (u *PeriodicJobUpsertBulk) ClearLastScheduledNewJob() *PeriodicJobUpsertBulk {
	return u.Update(func(s *PeriodicJobUpsert) {
		s.ClearLastScheduledNewJob()
	})
}

// Exec executes the query.
func (u *PeriodicJobUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PeriodicJobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PeriodicJobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PeriodicJobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
