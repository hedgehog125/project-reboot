// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/hedgehog125/project-reboot/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hedgehog125/project-reboot/ent/job"
	"github.com/hedgehog125/project-reboot/ent/logentry"
	"github.com/hedgehog125/project-reboot/ent/periodicjob"
	"github.com/hedgehog125/project-reboot/ent/session"
	"github.com/hedgehog125/project-reboot/ent/twofactoraction"
	"github.com/hedgehog125/project-reboot/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// LogEntry is the client for interacting with the LogEntry builders.
	LogEntry *LogEntryClient
	// PeriodicJob is the client for interacting with the PeriodicJob builders.
	PeriodicJob *PeriodicJobClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// TwoFactorAction is the client for interacting with the TwoFactorAction builders.
	TwoFactorAction *TwoFactorActionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Job = NewJobClient(c.config)
	c.LogEntry = NewLogEntryClient(c.config)
	c.PeriodicJob = NewPeriodicJobClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.TwoFactorAction = NewTwoFactorActionClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Job:             NewJobClient(cfg),
		LogEntry:        NewLogEntryClient(cfg),
		PeriodicJob:     NewPeriodicJobClient(cfg),
		Session:         NewSessionClient(cfg),
		TwoFactorAction: NewTwoFactorActionClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Job:             NewJobClient(cfg),
		LogEntry:        NewLogEntryClient(cfg),
		PeriodicJob:     NewPeriodicJobClient(cfg),
		Session:         NewSessionClient(cfg),
		TwoFactorAction: NewTwoFactorActionClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Job.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Job, c.LogEntry, c.PeriodicJob, c.Session, c.TwoFactorAction, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Job, c.LogEntry, c.PeriodicJob, c.Session, c.TwoFactorAction, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *JobMutation:
		return c.Job.mutate(ctx, m)
	case *LogEntryMutation:
		return c.LogEntry.mutate(ctx, m)
	case *PeriodicJobMutation:
		return c.PeriodicJob.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *TwoFactorActionMutation:
		return c.TwoFactorAction.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// JobClient is a client for the Job schema.
type JobClient struct {
	config
}

// NewJobClient returns a client for the Job from the given config.
func NewJobClient(c config) *JobClient {
	return &JobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `job.Hooks(f(g(h())))`.
func (c *JobClient) Use(hooks ...Hook) {
	c.hooks.Job = append(c.hooks.Job, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `job.Intercept(f(g(h())))`.
func (c *JobClient) Intercept(interceptors ...Interceptor) {
	c.inters.Job = append(c.inters.Job, interceptors...)
}

// Create returns a builder for creating a Job entity.
func (c *JobClient) Create() *JobCreate {
	mutation := newJobMutation(c.config, OpCreate)
	return &JobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Job entities.
func (c *JobClient) CreateBulk(builders ...*JobCreate) *JobCreateBulk {
	return &JobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobClient) MapCreateBulk(slice any, setFunc func(*JobCreate, int)) *JobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobCreateBulk{err: fmt.Errorf("calling to JobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Job.
func (c *JobClient) Update() *JobUpdate {
	mutation := newJobMutation(c.config, OpUpdate)
	return &JobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobClient) UpdateOne(_m *Job) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJob(_m))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobClient) UpdateOneID(id uuid.UUID) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJobID(id))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Job.
func (c *JobClient) Delete() *JobDelete {
	mutation := newJobMutation(c.config, OpDelete)
	return &JobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobClient) DeleteOne(_m *Job) *JobDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobClient) DeleteOneID(id uuid.UUID) *JobDeleteOne {
	builder := c.Delete().Where(job.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDeleteOne{builder}
}

// Query returns a query builder for Job.
func (c *JobClient) Query() *JobQuery {
	return &JobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJob},
		inters: c.Interceptors(),
	}
}

// Get returns a Job entity by its id.
func (c *JobClient) Get(ctx context.Context, id uuid.UUID) (*Job, error) {
	return c.Query().Where(job.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobClient) GetX(ctx context.Context, id uuid.UUID) *Job {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPeriodicJob queries the periodicJob edge of a Job.
func (c *JobClient) QueryPeriodicJob(_m *Job) *PeriodicJobQuery {
	query := (&PeriodicJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(periodicjob.Table, periodicjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.PeriodicJobTable, job.PeriodicJobColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobClient) Hooks() []Hook {
	return c.hooks.Job
}

// Interceptors returns the client interceptors.
func (c *JobClient) Interceptors() []Interceptor {
	return c.inters.Job
}

func (c *JobClient) mutate(ctx context.Context, m *JobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Job mutation op: %q", m.Op())
	}
}

// LogEntryClient is a client for the LogEntry schema.
type LogEntryClient struct {
	config
}

// NewLogEntryClient returns a client for the LogEntry from the given config.
func NewLogEntryClient(c config) *LogEntryClient {
	return &LogEntryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `logentry.Hooks(f(g(h())))`.
func (c *LogEntryClient) Use(hooks ...Hook) {
	c.hooks.LogEntry = append(c.hooks.LogEntry, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `logentry.Intercept(f(g(h())))`.
func (c *LogEntryClient) Intercept(interceptors ...Interceptor) {
	c.inters.LogEntry = append(c.inters.LogEntry, interceptors...)
}

// Create returns a builder for creating a LogEntry entity.
func (c *LogEntryClient) Create() *LogEntryCreate {
	mutation := newLogEntryMutation(c.config, OpCreate)
	return &LogEntryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LogEntry entities.
func (c *LogEntryClient) CreateBulk(builders ...*LogEntryCreate) *LogEntryCreateBulk {
	return &LogEntryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LogEntryClient) MapCreateBulk(slice any, setFunc func(*LogEntryCreate, int)) *LogEntryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LogEntryCreateBulk{err: fmt.Errorf("calling to LogEntryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LogEntryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LogEntryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LogEntry.
func (c *LogEntryClient) Update() *LogEntryUpdate {
	mutation := newLogEntryMutation(c.config, OpUpdate)
	return &LogEntryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LogEntryClient) UpdateOne(_m *LogEntry) *LogEntryUpdateOne {
	mutation := newLogEntryMutation(c.config, OpUpdateOne, withLogEntry(_m))
	return &LogEntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LogEntryClient) UpdateOneID(id uuid.UUID) *LogEntryUpdateOne {
	mutation := newLogEntryMutation(c.config, OpUpdateOne, withLogEntryID(id))
	return &LogEntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LogEntry.
func (c *LogEntryClient) Delete() *LogEntryDelete {
	mutation := newLogEntryMutation(c.config, OpDelete)
	return &LogEntryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LogEntryClient) DeleteOne(_m *LogEntry) *LogEntryDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LogEntryClient) DeleteOneID(id uuid.UUID) *LogEntryDeleteOne {
	builder := c.Delete().Where(logentry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LogEntryDeleteOne{builder}
}

// Query returns a query builder for LogEntry.
func (c *LogEntryClient) Query() *LogEntryQuery {
	return &LogEntryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLogEntry},
		inters: c.Interceptors(),
	}
}

// Get returns a LogEntry entity by its id.
func (c *LogEntryClient) Get(ctx context.Context, id uuid.UUID) (*LogEntry, error) {
	return c.Query().Where(logentry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LogEntryClient) GetX(ctx context.Context, id uuid.UUID) *LogEntry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a LogEntry.
func (c *LogEntryClient) QueryUser(_m *LogEntry) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(logentry.Table, logentry.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, logentry.UserTable, logentry.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LogEntryClient) Hooks() []Hook {
	return c.hooks.LogEntry
}

// Interceptors returns the client interceptors.
func (c *LogEntryClient) Interceptors() []Interceptor {
	return c.inters.LogEntry
}

func (c *LogEntryClient) mutate(ctx context.Context, m *LogEntryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LogEntryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LogEntryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LogEntryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LogEntryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LogEntry mutation op: %q", m.Op())
	}
}

// PeriodicJobClient is a client for the PeriodicJob schema.
type PeriodicJobClient struct {
	config
}

// NewPeriodicJobClient returns a client for the PeriodicJob from the given config.
func NewPeriodicJobClient(c config) *PeriodicJobClient {
	return &PeriodicJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `periodicjob.Hooks(f(g(h())))`.
func (c *PeriodicJobClient) Use(hooks ...Hook) {
	c.hooks.PeriodicJob = append(c.hooks.PeriodicJob, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `periodicjob.Intercept(f(g(h())))`.
func (c *PeriodicJobClient) Intercept(interceptors ...Interceptor) {
	c.inters.PeriodicJob = append(c.inters.PeriodicJob, interceptors...)
}

// Create returns a builder for creating a PeriodicJob entity.
func (c *PeriodicJobClient) Create() *PeriodicJobCreate {
	mutation := newPeriodicJobMutation(c.config, OpCreate)
	return &PeriodicJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PeriodicJob entities.
func (c *PeriodicJobClient) CreateBulk(builders ...*PeriodicJobCreate) *PeriodicJobCreateBulk {
	return &PeriodicJobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PeriodicJobClient) MapCreateBulk(slice any, setFunc func(*PeriodicJobCreate, int)) *PeriodicJobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PeriodicJobCreateBulk{err: fmt.Errorf("calling to PeriodicJobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PeriodicJobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PeriodicJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PeriodicJob.
func (c *PeriodicJobClient) Update() *PeriodicJobUpdate {
	mutation := newPeriodicJobMutation(c.config, OpUpdate)
	return &PeriodicJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PeriodicJobClient) UpdateOne(_m *PeriodicJob) *PeriodicJobUpdateOne {
	mutation := newPeriodicJobMutation(c.config, OpUpdateOne, withPeriodicJob(_m))
	return &PeriodicJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PeriodicJobClient) UpdateOneID(id int) *PeriodicJobUpdateOne {
	mutation := newPeriodicJobMutation(c.config, OpUpdateOne, withPeriodicJobID(id))
	return &PeriodicJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PeriodicJob.
func (c *PeriodicJobClient) Delete() *PeriodicJobDelete {
	mutation := newPeriodicJobMutation(c.config, OpDelete)
	return &PeriodicJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PeriodicJobClient) DeleteOne(_m *PeriodicJob) *PeriodicJobDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PeriodicJobClient) DeleteOneID(id int) *PeriodicJobDeleteOne {
	builder := c.Delete().Where(periodicjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PeriodicJobDeleteOne{builder}
}

// Query returns a query builder for PeriodicJob.
func (c *PeriodicJobClient) Query() *PeriodicJobQuery {
	return &PeriodicJobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePeriodicJob},
		inters: c.Interceptors(),
	}
}

// Get returns a PeriodicJob entity by its id.
func (c *PeriodicJobClient) Get(ctx context.Context, id int) (*PeriodicJob, error) {
	return c.Query().Where(periodicjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PeriodicJobClient) GetX(ctx context.Context, id int) *PeriodicJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJobs queries the jobs edge of a PeriodicJob.
func (c *PeriodicJobClient) QueryJobs(_m *PeriodicJob) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(periodicjob.Table, periodicjob.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, periodicjob.JobsTable, periodicjob.JobsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PeriodicJobClient) Hooks() []Hook {
	return c.hooks.PeriodicJob
}

// Interceptors returns the client interceptors.
func (c *PeriodicJobClient) Interceptors() []Interceptor {
	return c.inters.PeriodicJob
}

func (c *PeriodicJobClient) mutate(ctx context.Context, m *PeriodicJobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PeriodicJobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PeriodicJobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PeriodicJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PeriodicJobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PeriodicJob mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionClient) MapCreateBulk(slice any, setFunc func(*SessionCreate, int)) *SessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionCreateBulk{err: fmt.Errorf("calling to SessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(_m *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(_m))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id int) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(_m *Session) *SessionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id int) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id int) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id int) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(_m *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// TwoFactorActionClient is a client for the TwoFactorAction schema.
type TwoFactorActionClient struct {
	config
}

// NewTwoFactorActionClient returns a client for the TwoFactorAction from the given config.
func NewTwoFactorActionClient(c config) *TwoFactorActionClient {
	return &TwoFactorActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `twofactoraction.Hooks(f(g(h())))`.
func (c *TwoFactorActionClient) Use(hooks ...Hook) {
	c.hooks.TwoFactorAction = append(c.hooks.TwoFactorAction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `twofactoraction.Intercept(f(g(h())))`.
func (c *TwoFactorActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.TwoFactorAction = append(c.inters.TwoFactorAction, interceptors...)
}

// Create returns a builder for creating a TwoFactorAction entity.
func (c *TwoFactorActionClient) Create() *TwoFactorActionCreate {
	mutation := newTwoFactorActionMutation(c.config, OpCreate)
	return &TwoFactorActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TwoFactorAction entities.
func (c *TwoFactorActionClient) CreateBulk(builders ...*TwoFactorActionCreate) *TwoFactorActionCreateBulk {
	return &TwoFactorActionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TwoFactorActionClient) MapCreateBulk(slice any, setFunc func(*TwoFactorActionCreate, int)) *TwoFactorActionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TwoFactorActionCreateBulk{err: fmt.Errorf("calling to TwoFactorActionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TwoFactorActionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TwoFactorActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TwoFactorAction.
func (c *TwoFactorActionClient) Update() *TwoFactorActionUpdate {
	mutation := newTwoFactorActionMutation(c.config, OpUpdate)
	return &TwoFactorActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TwoFactorActionClient) UpdateOne(_m *TwoFactorAction) *TwoFactorActionUpdateOne {
	mutation := newTwoFactorActionMutation(c.config, OpUpdateOne, withTwoFactorAction(_m))
	return &TwoFactorActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TwoFactorActionClient) UpdateOneID(id uuid.UUID) *TwoFactorActionUpdateOne {
	mutation := newTwoFactorActionMutation(c.config, OpUpdateOne, withTwoFactorActionID(id))
	return &TwoFactorActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TwoFactorAction.
func (c *TwoFactorActionClient) Delete() *TwoFactorActionDelete {
	mutation := newTwoFactorActionMutation(c.config, OpDelete)
	return &TwoFactorActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TwoFactorActionClient) DeleteOne(_m *TwoFactorAction) *TwoFactorActionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TwoFactorActionClient) DeleteOneID(id uuid.UUID) *TwoFactorActionDeleteOne {
	builder := c.Delete().Where(twofactoraction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TwoFactorActionDeleteOne{builder}
}

// Query returns a query builder for TwoFactorAction.
func (c *TwoFactorActionClient) Query() *TwoFactorActionQuery {
	return &TwoFactorActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTwoFactorAction},
		inters: c.Interceptors(),
	}
}

// Get returns a TwoFactorAction entity by its id.
func (c *TwoFactorActionClient) Get(ctx context.Context, id uuid.UUID) (*TwoFactorAction, error) {
	return c.Query().Where(twofactoraction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TwoFactorActionClient) GetX(ctx context.Context, id uuid.UUID) *TwoFactorAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TwoFactorActionClient) Hooks() []Hook {
	return c.hooks.TwoFactorAction
}

// Interceptors returns the client interceptors.
func (c *TwoFactorActionClient) Interceptors() []Interceptor {
	return c.inters.TwoFactorAction
}

func (c *TwoFactorActionClient) mutate(ctx context.Context, m *TwoFactorActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TwoFactorActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TwoFactorActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TwoFactorActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TwoFactorActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TwoFactorAction mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(_m *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLogs queries the logs edge of a User.
func (c *UserClient) QueryLogs(_m *User) *LogEntryQuery {
	query := (&LogEntryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(logentry.Table, logentry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.LogsTable, user.LogsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Job, LogEntry, PeriodicJob, Session, TwoFactorAction, User []ent.Hook
	}
	inters struct {
		Job, LogEntry, PeriodicJob, Session, TwoFactorAction, User []ent.Interceptor
	}
)
