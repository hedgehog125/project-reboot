// Code generated by ent, DO NOT EDIT.

package twofactoraction

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the twofactoraction type in the database.
	Label = "two_factor_action"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldExpiresAt holds the string denoting the expiresat field in the database.
	FieldExpiresAt = "expires_at"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// Table holds the table name of the twofactoraction in the database.
	Table = "two_factor_actions"
)

// Columns holds all SQL columns for twofactoraction fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldVersion,
	FieldData,
	FieldExpiresAt,
	FieldCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
)

// OrderOption defines the ordering options for the TwoFactorAction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expiresAt field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}
